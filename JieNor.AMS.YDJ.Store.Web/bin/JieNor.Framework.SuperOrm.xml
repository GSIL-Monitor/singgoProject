<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JieNor.Framework.SuperOrm</name>
    </assembly>
    <members>
        <member name="M:PerfmonUtil.StartMonitor">
            <summary>
            开始监控
            </summary>
        </member>
        <member name="M:PerfmonUtil.EndMonitor">
            <summary>
            结束监控
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1">
            <summary>
            用于处理具有父子关系的集合建模。此集合防止一个元素被放在两个集合中。
            </summary>
            <typeparam name="T">元素的数据类型</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1.#ctor">
            <summary>
            创建一个默认的集合。其元素的Parent指向当前集合实例。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            传递集合的内部数据，其元素的Parent指向当前集合实例。
            </summary>
            <param name="list">内部的数据集合</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1.#ctor(System.Collections.Generic.IList{`0},System.Object)">
            <summary>
            传递集合的内部数据，其元素的Parent指向给定的parent实例。
            </summary>
            <param name="list">内部的数据集合</param>
            <param name="parent">传入一个指定的Parent实例。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1.InsertItem(System.Int32,`0)">
            <summary>
            将元素插入 CollectionWithParent(Of T) 的指定索引处。此方法将阻止元素被加入多个集合中。
            </summary>
            <param name="index">从零开始的索引，应在该位置插入 item。</param>
            <param name="item">要插入的对象。该值不可以为 null。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1.SetItem(System.Int32,`0)">
            <summary>
            替换指定索引处的元素。
            </summary>
            <param name="index">待替换元素的从零开始的索引。</param>
            <param name="item">位于指定索引处的元素的新值。该值不可以为 null。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1.RemoveItem(System.Int32)">
            <summary>
            移除 CollectionWithParent 的指定索引处的元素，并清除Parent引用。
            </summary>
            <param name="index">要移除的元素的从零开始的索引。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1.ClearItems">
            <summary>
            从 CollectionWithParent 中移除所有元素。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1.GetItemParent(System.Object)">
            <summary>
            获取某个元素的Parent属性值
            </summary>
            <param name="item">要检测的元素对象</param>
            <returns>如果元素包含Parent值，返回之，否则返回null.</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.CollectionWithParent`1.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            当反序列化后，需要重新填充Parent映射
            </summary>
            <param name="context">序列化的流对象</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Collections.EmptyList`1">
            <summary>
            不包含任何数据的列表
            </summary>
            <typeparam name="T">元素的类型。</typeparam>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Collections.ForWriteList`1">
            <summary>
            只能填充不能检索的集合，此集合适合无法预知大小，但仅需要填充的场景
            </summary>
            <typeparam name="T">元素的类型</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ForWriteList`1.#ctor">
            <summary>
            创建  ForWriteList 实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ForWriteList`1.Add(`0)">
            <summary>
            向集合的末尾添加一条记录
            </summary>
            <param name="item">新增加的项目</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ForWriteList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加一组数据
            </summary>
            <param name="collection">要添加的集合</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ForWriteList`1.AddRange(System.Collections.IEnumerable)">
            <summary>
            添加一组数据
            </summary>
            <param name="collection">要添加的集合</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ForWriteList`1.ToArray">
            <summary>
            返回数组形式的所有数据
            </summary>
            <returns>结果集</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.ForWriteList`1.Count">
            <summary>
            返回列表的当前大小
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ForWriteList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An System.Collections.IEnumerator~1 object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ForWriteList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2">
            <summary>
            具有延迟名称处理的集合，允许元素包含一个名称。
            </summary>
            <typeparam name="TKey">元素的键类型</typeparam>
            <typeparam name="TValue">元素的类型</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2.#ctor">
            <summary>
            使用TKey默认的比较符号创建实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            传入一个自定义的比较器创建实例
            </summary>
            <param name="comparer">比较器，例如你可以传入一个不区分大小写的比较器</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IList{`1},System.Object)">
            <summary>
            传递集合的内部数据，其元素的Parent指向给定的parent实例。
            </summary>
            <param name="comparer">比较器，例如你可以传入一个不区分大小写的比较器</param>
            <param name="list">内部的数据集合</param>
            <param name="parent">传入一个指定的Parent实例。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2.GetKeyForItem(`1)">
            <summary>
            派生类需要重载此方法，用于获取元素的名称(键）
            </summary>
            <param name="item">要检索的元素</param>
            <returns>元素的键</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2.IndexOf(`0)">
            <summary>
            返回指定键所在集合中的位置
            </summary>
            <param name="key">要检索的键</param>
            <returns>如果找到此键的元素，返回其位置。否则返回-1</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2.Contains(`0)">
            <summary>
            检索某个键是否存在
            </summary>
            <param name="key">要检索的键</param>
            <returns>如果找到返回true，否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2.Remove(`0)">
            <summary>
            删除指定键的元素
            </summary>
            <param name="key">要删除的元素键</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2.Item(`0)">
            <summary>
            通过指定的键检索或替换元素
            </summary>
            <param name="key">检索的键</param>
            <returns>返回此键对应的元素</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.LazyKeyedCollection`2.TryGetValue(`0,`1@)">
            <summary>
            尝试从集合中检索指定键的元素
            </summary>
            <param name="key">要检索的键</param>
            <param name="value">如果检索到此键的元素，则返回此元素，否则为defalut</param>
            <returns>如果找到返回true，否则返回false</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Collections.ListEnumerator`1">
            <summary>
            IForWriteList的枚举器。
            </summary>
            <typeparam name="T">元素的类型。</typeparam>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Collections.OneItemList`1">
            <summary>
            仅仅存储一笔有记录的结构。
            </summary>
            <typeparam name="T">元素的数据类型。</typeparam>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Collections.ViewCollection`2">
            <summary>
            定义了一个视图集合，允许按照视图的模式访问实际的数据。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.#ctor(System.Collections.Generic.IList{`1})">
            <summary>
            创建ViewCollection的实例
            </summary>
            <param name="col">视图类内部管理的动态实体集合 </param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.Items">
            <summary>
            返回内部控制的集合
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.CreateView(`1)">
            <summary>
            给定一个内部元素，返回新建的视图对象
            </summary>
            <param name="item">需要包装的元素</param>
            <returns>新的视图对象</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.GetItem(`0)">
            <summary>
            给定视图对象，返回其真实对象
            </summary>
            <param name="view">视图对象</param>
            <returns>内部的真实对象</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.IndexOf(`0)">
            <summary>
            返回指定的视图对象（其实是内部的实体）所在的索引。
            </summary>
            <param name="view">视图对象</param>
            <returns>返回视图内部管理的实体实例在集合的位置。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.Insert(System.Int32,`0)">
            <summary>
            向集合中插入新的元素
            </summary>
            <param name="index">要存放的位置</param>
            <param name="view">新的实体视图，其实真正插入的是视图管理的实体。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.InsertItem(System.Int32,`1)">
            <summary>
            当通过视图向集合添加元素时，调用此虚方法。如果绕过视图直接修改真实集合不会调用此方法。
            </summary>
            <param name="index">要存放的位置</param>
            <param name="item">新的实体</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.RemoveAt(System.Int32)">
            <summary>
            删除集合中指定位置的元素
            </summary>
            <param name="index">要删除的元素位置</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.RemoveItem(System.Int32)">
            <summary>
            当通过视图删除集合的元素时，调用此虚方法。如果绕过视图直接删除真实集合的元素不会调用此方法。
            </summary>
            <param name="index">要删除的元素位置</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.Item(System.Int32)">
            <summary>
            通过索引检索指定视图实例
            </summary>
            <param name="index">要检索的实体位置</param>
            <returns>返回指定索引的实体对象的视图包装。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.SetItem(System.Int32,`1)">
            <summary>
            当通过视图更新集合的元素时，调用此虚方法。如果绕过视图直接更新真实集合的元素不会调用此方法。
            </summary>
            <param name="index">更新的索引</param>
            <param name="item">更新后的元素。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.Add(`0)">
            <summary>
            向集合中添加一个新的项
            </summary>
            <param name="view">新增的对象的视图</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.Clear">
            <summary>
            清除所有的元素
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.ClearItems">
            <summary>
            当通过视图清除所有的元素时，调用此虚方法。如果绕过视图清除所有的元素不会调用此方法。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.Contains(`0)">
            <summary>
            检索指定视图内部管理的实体是否在集合中存在
            </summary>
            <param name="view">要检索的实体视图</param>
            <returns>如果找到返回true，否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.CopyTo(`0[],System.Int32)">
            <summary>
            将数据赋值到指定的数组
            </summary>
            <param name="array">要赋值的数组</param>
            <param name="arrayIndex">数组的起始位置。</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.Count">
            <summary>
            返回集合的元素总数
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.System#Collections#Generic#ICollection{V}#IsReadOnly">
            <summary>
            返回集合是否是只读
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.Remove(`0)">
            <summary>
            删除实体视图内部管理的实体
            </summary>
            <param name="view">实体的视图</param>
            <returns>内部实际删除的是视图管理的实体。如果在集合中找到并安全删除，返回true</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.GetEnumerator">
            <summary>
            返回集合的枚举器
            </summary>
            <returns>枚举器对象</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.ViewCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回集合的枚举器
            </summary>
            <returns>枚举器对象</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2">
            <summary>
            描述了一个只读访问的，支持键访问的集合
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <typeparam name="TValue">集合项目的类型</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.Contains(`1)">
            <summary>
            确定某个实例是否在集合中存在
            </summary>
            <param name="item">要检查的项目实例</param>
            <returns>如果存在返回true，否则false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.ContainsKey(`0)">
            <summary>
            确定某个键是否在集合中存在
            </summary>
            <param name="key">要检查的键</param>
            <returns>如果存在返回true，否则false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.IndexOf(`1)">
            <summary>
            返回指定的元素在集合中的位置
            </summary>
            <param name="item">要检索的元素对象</param>
            <returns>如果找到此元素将返回索引，否则返回-1</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.CopyTo(`1[],System.Int32)">
            <summary>
            拷贝所有的数据到一个数组中去
            </summary>
            <param name="array">存放数据的数组</param>
            <param name="arrayIndex">数组赋值开始索引</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.ToArray">
            <summary>
            将所有元素转化为数组返回
            </summary>
            <returns>转化后的数组</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.Item(System.Int32)">
            <summary>
            返回指定索引位置的数据
            </summary>
            <param name="index">索引编号，注意不能超出边界</param>
            <returns>此索引处的数据</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.Item(`0)">
            <summary>
            返回指定键的数据
            </summary>
            <param name="key">要检索的键</param>
            <returns>
            如果找到此键的数据将返回此数据，否则抛出异常<see cref="T:System.Collections.Generic.KeyNotFoundException"/>。
            如果不希望抛出异常，可以使用<see cref="M:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.TryGetValue(`0,`1@)"/>方法。
            </returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.TryGetValue(`0,`1@)">
            <summary>
            检索指定键的数据
            </summary>
            <param name="key">要检索的键</param>
            <param name="value">如果检索到将返回此值，否则返回default(TValue)</param>
            <returns>如果成功找到此键则返回true，否则返回false</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.IKeyedCollectionBase`2.Count">
            <summary>
            返回集合的数目
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2">
            <summary>
            一个只读访问的，支持键访问的集合
            </summary>
            <typeparam name="TKey">键的类型</typeparam>
            <typeparam name="TValue">集合项目的类型</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.#ctor(System.Collections.Generic.IList{`1})">
            <summary>
            Initializes a new instance of the KeyedCollectionBase class that is a read-only wrapper around the specified list.
            </summary>
            <param name="list">The list to wrap.</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.CreateDictionary">
            <summary>
            重新构建字典
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.Dictionary">
            <summary>
            返回内部使用的字典对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.Comparer">
            <summary>
            返回集合使用的比较器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.GetKeyForItem(`1)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The element from which to extract the key.</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.ContainsKey(`0)">
            <summary>
            确定某个键是否在集合中存在
            </summary>
            <param name="key">要检查的键</param>
            <returns>如果存在返回true，否则false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.ToArray">
            <summary>
            将所有元素转化为数组返回
            </summary>
            <returns>转化后的数组</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.Item(`0)">
            <summary>
            返回指定键的数据
            </summary>
            <param name="key">要检索的键</param>
            <returns>
            如果找到此键的数据将返回此数据，否则抛出异常<see cref="T:System.Collections.Generic.KeyNotFoundException"/>。
            如果不希望抛出异常，可以使用<see cref="M:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.TryGetValue(`0,`1@)"/>方法。
            </returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.TryGetValue(`0,`1@)">
            <summary>
            检索指定键的数据
            </summary>
            <param name="key">要检索的键</param>
            <param name="value">如果检索到将返回此值，否则返回default(TValue)</param>
            <returns>如果成功找到此键则返回true，否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Collections.KeyedCollectionBase`2.OnDeserialization(System.Object)">
            <summary>
            反序列化完毕后调用
            </summary>
            <param name="sender"></param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityGroupKey">
            <summary>
            用于动态对象分组使用
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityGroupKey.GetComplexKey(JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase)">
            <summary>
            获取字典key
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityGroupKey.GetKey(JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase)">
            <summary>
            返回指定属性集合的分组Key
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityGroupKey.GetGuidKey(JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase)">
            <summary>
            始终返回不分组的标识GuidKey
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityCacheAttribute">
            <summary>
            标明实体在缓存时遵循的特性
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCacheAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCacheAttribute.#ctor(System.TimeSpan,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="expiryIn"></param>
            <param name="cacheQueueLen"></param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityCacheAttribute.ExpirtyIn">
            <summary>
            缓存过期时间
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityCacheAttribute.QueueLength">
            <summary>
            缓存队列长度
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityCacheAttribute.CacheKeyPropName">
            <summary>
            缓存标识的属性名称：是orm实体的一种替代行为
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityExtentions">
            <summary>
            实体常用的扩展方法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DynamicDataEntity">
            <summary>
            动态数据对象
            <![CDATA[
            <code>
            dynamic dlrObj = new DynamicDataEntity();
            dlrObj.Numeric=12345;
            dlrObj.Decimal=3456m;
            dlrObj.DateTime=DateTime.Now;
            dlrObj.InnerObj=new List<string>();
            </code>
            ]]>
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicDataEntity.Item(System.String)">
            <summary>
            提供索引器对值的访问方式
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicDataEntity.GetDynamicMemberNames">
            <summary>
            获取所有值名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicDataEntity.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicDataEntity.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            获取值
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.AutoSync">
            <summary>
            Instructs the runtime how to retrieve the value after an insert or update operation.
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.AutoSync.Never">
            <summary>
            Never returns the value.
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.AutoSync.OnInsert">
            <summary>
            Returns the value only after an insert operation.
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.AutoSync.OnUpdate">
            <summary>
            Returns the value only after an update operation.
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.AutoSync.Always">
            <summary>
            Always returns the value.
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.BoolDataEntityState">
            <summary>
            描述和管理单个实体的脏标志管理
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.BoolDataEntityState.SetPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            设置某个属性已经发生改变
            </summary>
            <param name="e">属性改变事件参数</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.BoolDataEntityState.DataEntityDirty">
            <summary>
            返回整个实体是否已发生变更
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.BoolDataEntityState.DirtyFlags">
            <summary>
            实体脏标志管理器：仅用于反序列化时填充数据用
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.BoolDataEntityState.SetDirty(System.Boolean)">
            <summary>
            设置实体的所有脏标志位
            </summary>
            <param name="newValue">要设置的新值</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.BoolDataEntityState.GetDirtyProperties">
            <summary>
            返回实体中所有变更的属性列表
            </summary>
            <returns>变更的属性列表</returns>
            <remarks>
            此方法和<see cref="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty.ShouldSerializeValue(System.Object)"/>完全不同，这里判断的是实体自创建或从数据库读取后，
            发生更改的属性列表。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.BoolDataEntityState.GetDirtyProperties(System.Boolean)">
            <summary>
            返回实体中所有变更的属性列表
            </summary>
            <returns>变更的属性列表</returns>
            <remarks>
            此方法和<see cref="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty.ShouldSerializeValue(System.Object)"/>完全不同，这里判断的是实体自创建或从数据库读取后，
            发生更改的属性列表。
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.CollectionPropertyAttribute">
            <summary>
            标记某个CLR属性是集合属性
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.CollectionPropertyAttribute.CollectionItemPropertyType">
            <summary>
            返回/设置明细的数据类型，如果集合是泛型，可以不指定
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.ComplexPropertyAttribute">
            <summary>
            标记一个属性是复杂属性
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.ComplexPropertyAttribute.ComplexPropertyType">
            <summary>
            返回/设置复杂属性的数据类型，如果不指定，默认是属性的返回类型
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.ClrDataEntity">
            <summary>
            强类型实体的基础类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.ClrDataEntity.GetDataEntityType">
            <summary>
            返回实体的数据类型
            </summary>
            <returns>ORM定义的数据结构</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase">
            <summary>DataEntityBase提供了一些性能和易用性方面的封装，通过实体派生自此基类，你可以享受到一些特性。 </summary>
                 <remarks>
                    实体尽量派生自DataEntityBase
                    DataEntityBase提供了一些性能和易用性方面的封装，通过实体派生自此基类，你可以享受到：
                    
                    实体属性的改变通知
                    包括OnPropertyChanging事件和OnPropertyChanged虚方法，以及对应的事件，当触发这些属性改变事件后，实体会记录哪些属性发生改变，从而帮助ORM引擎仅对改变的属性进行保存操作。
                    另外，属性改变机制符合System.ComponentModel.INotifyPropertyChanged接口，这样将帮助绑定系统获取改变通知。
                    如果你不想从DataEntityBase派生，ORM将认为所有的属性均发生改变并保存到数据库中。如果你希望达到优化，可以自行在属性发生改变后记录到DataEntityState对象中，并包含DataEntityState属性返回。
                    
                    ISupportInitializeNotification接口支持
                    他有助于性能的优化，因为在ORM引擎填充数据时，将不会发生PropertyChanged相关的事件流程；
                    如果你不想从DataEntityBase派生，ORM引擎在填充数据时可能会触发属性改变事件从而降低性能或者引发未知的问题。如果你希望优化，可以自行实现ISupportInitialize接口并在初始化时屏蔽不必要的事件触发。
                    
                    实体状态的记录
                    此类包含DataEntityState属性，ORM引擎检测到此属性后，将通过此属性获取改变的属性以及快照，这有助于性能的优化（参见：实体状态）；
                    如果你不想从DataEntityBase派生，ORM引擎将假设所有的数据均发生改变，且都是新建的实体。如果你希望优化，你可以在你的实体中包含一个名为DataEntityState的属性并返回DataEntityState对象。
                    
                    父对象支持
                    此类支持IObjectWithParent，此接口的属性Parent返回层次结构中的父对象，例如订单明细的Parent属性返回订单单头。这有助于一些脚本引擎或者公式系统的功能实现。
                    如果你不想从DataEntityBase派生，对ORM引擎没有任何影响，但是某些脚本系统可能在公式中使用Parent属性，如果没有此属性，这些系统将很难获取父对象。如果你希望达到此功能，通过实现此接口即可。
                    
                    强类型实体尽量派生自ClrDataEntity
                    此类重载了GetDataEntityType方法，这样实体就可以自行返回类型信息。
                    
                    动态实体尽量直接使用DynamicObject
                    当定义动态实体类型时，默认使用DynamicObject作为数据承载类，可以通过DynamicObjectType.ClrType属性指定自定义类。但我们要求指定的类型必须派生自DynamicObject。
                    一般情况下，不建议派生DynamicObject，这会使事情变的复杂。如果你仅仅只是希望创建一个强类型的访问，建议参见：动态实体的强类型视图。
                   </remarks>
                 *
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.GetDataEntityType">
            <summary>
            返回实体的数据类型
            </summary>
            <returns>ORM定义的数据结构</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.Events">
            <summary>
            返回事件列表
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            触发属性改变事件
            </summary>
            <param name="e">属性改变的事件参数</param>
        </member>
        <member name="E:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.PropertyChanged">
            <summary>
            属性改变后触发事件
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.OnPropertyChanging(System.ComponentModel.PropertyChangingEventArgs)">
            <summary>
            触发属性改变前事件
            </summary>
            <param name="e">属性改变前的事件参数</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.Initializing">
            <summary>
            返回是否正在初始化过程中。
            </summary>
        </member>
        <member name="E:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.PropertyChanging">
            <summary>
            属性改变前事件
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.OnInitialized">
            <summary>
            在实体结束初始化后发生。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.DataEntityState">
            <summary>
            返回当前数据行的状态管理
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.OnSerializing(System.Runtime.Serialization.StreamingContext)">
            <summary>
            当序列化时，将状态中的数据转移到当前实体中。
            </summary>
            <param name="context">序列化的流对象</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.JieNor#Framework#SuperOrm#DataEntity#IObjectWithParent#Parent">
            <summary>
            返回/设置当前对象的父对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.Parent">
            <summary>
            返回此实体对应的父对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityBase.UUID">
            <summary>
            动态实体唯一标识
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1">
            <summary>
            用于实体的集合，提供ListChanged事件及处理父子关系
            </summary>
            <typeparam name="T">实体的类型</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.#ctor">
            <summary>
            创建 DataEntityCollection 实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.#ctor(System.Object)">
            <summary>
            创建 DataEntityCollection 实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.#ctor(System.Object,System.Collections.Generic.IList{`0})">
            <summary>
            创建 DataEntityCollection 实例并提供底层的集合
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.Parent">
            <summary>
            返回此集合所在的实体，即父对象。
            </summary>
        </member>
        <member name="E:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.ListChanged">
            <summary>
            列表发生改变时触发
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            引发ListChanged事件
            </summary>
            <param name="e">事件参数</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the DynamicObjectCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the DynamicObjectCollection
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.ClearItems">
            <summary>
            Removes all elements from the DynamicObjectCollection
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.OnInitialized">
            <summary>
            在实体结束初始化后发生。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollection`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            對當前集合進行排序。
            </summary>
            <typeparam name="K">指定了排序時，其排序鍵的數據類型。</typeparam>
            <param name="keyFunc">獲取排序鍵的委託。</param>
            <param name="comparer">比較器對象。</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollectionWithSnapshot`1">
            <summary>
            用于实体的集合（内部使用，请改使用DataEntityCollection），对于他的基类 DataEntityCollection来说，多了一个删除状态的保存。
            </summary>
            <typeparam name="T">实体的类型</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollectionWithSnapshot`1.#ctor">
            <summary>
            创建 DataEntityCollectionWithState 实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollectionWithSnapshot`1.#ctor(System.Object)">
            <summary>
            创建 DataEntityCollectionWithState 实例
            </summary>
            <param name="parent">集合的父对象</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollectionWithSnapshot`1.#ctor(System.Object,System.Collections.Generic.IList{`0})">
            <summary>
            创建 DataEntityCollectionWithState 实例并提供底层的集合
            </summary>
            <param name="parent">集合的父对象</param>
            <param name="list">内部使用的集合类</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityCollectionWithSnapshot`1.PkSnapshot">
            <summary>
            返回此集合当时读取出来时的主键快照。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityReference">
            <summary>
            一个实体对象引用描述
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReference.#ctor(System.Object)">
            <summary>
            创建实体引用
            </summary>
            <param name="oid">实体的键</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityReference.Oid">
            <summary>
            返回/设置实体的键
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityReference.DataEntity">
            <summary>
            返回/设置引用的实际数据
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityReference.IsDataEntityLoaded">
            <summary>
            返回实体的数据是否已经装载
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList">
            <summary>
            一批对象引用的数据结构
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            创建 DataEntityReferenceList实例并指定实体的公用类型。
            </summary>
            <param name="dataEntityType">对象列表的公用类型。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.#ctor(System.String)">
            <summary>
            创建 DataEntityReferenceList实例并指定实体的公用类型名称。
            </summary>
            <param name="dataEntityTypeName">实体的公用类型名称</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.DataEntityTypeName">
            <summary>
            返回/设置实体的类型名称
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.DataEntityType">
            <summary>
            返回/设置当前实体的类型。注意此属性可能没有设置
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.Add(System.Object)">
            <summary>
            向集合中添加一个引用项，注意：如果集合中已经包含了此OID的引用，将返回原先的引用。
            </summary>
            <param name="oid">要加入的元素的键，如果已经存在此OID的元素，此元素不会添加到集合</param>
            <returns>原有的引用或新创建的引用</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.GetOrAdd(System.Object,System.Func{System.Object,JieNor.Framework.SuperOrm.DataEntity.DataEntityReference})">
            <summary>
            向集合中添加一个引用项，注意：如果集合中已经包含了此OID的引用，将返回原先的引用，否则调用委托
            </summary>
            <param name="oid">要加入的元素键，如果已经存在此OID的元素，将返回原先的引用。</param>
            <param name="valueFactory">如果没有找到，将调用此委托</param>
            <returns>原有的引用或新创建的引用</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.Clear">
            <summary>
            清除所有的实体引用
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.TryGet(System.Object,JieNor.Framework.SuperOrm.DataEntity.DataEntityReference@)">
            <summary>
            从集合中检索指定的项目
            </summary>
            <param name="oid">你要检索的主键值</param>
            <param name="item">如果检索到此主键的值，返回对应的引用对象，否则返回null</param>
            <returns>是否成功找到指定主键的引用。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.Contains(JieNor.Framework.SuperOrm.DataEntity.DataEntityReference)">
            <summary>
            返回集合中是否存在指定的元素
            </summary>
            <param name="item">要检测的元素</param>
            <returns>如果存在返回true，否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.CopyTo(JieNor.Framework.SuperOrm.DataEntity.DataEntityReference[],System.Int32)">
            <summary>
            将当前集合的数据赋值到数组中
            </summary>
            <param name="array">要赋值的数组对象</param>
            <param name="arrayIndex">元素数据被复制到数组的开始位置</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.GetOids">
            <summary>
            返回所有的Id列表
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.GetNotLoadedOids">
            <summary>
            返回所有未填充实体的主键列表
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.Count">
            <summary>
            返回集合的数目
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.System#Collections#Generic#ICollection{JieNor#Framework#SuperOrm#DataEntity#DataEntityReference}#IsReadOnly">
            <summary>
            返回集合是否是只读。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.Remove(JieNor.Framework.SuperOrm.DataEntity.DataEntityReference)">
            <summary>
            删除指定的元素对象
            </summary>
            <param name="item">要删除的元素对象</param>
            <returns>是否在集合中找到并成功删除。删除时将按引用的键查找。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.GetEnumerator">
            <summary>
            返回集合的枚举器对象
            </summary>
            <returns>值的枚举器对象</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回集合的枚举器对象
            </summary>
            <returns>值的枚举器对象</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityState">
            <summary>
            描述和管理单个实体的脏标志管理
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityState.#ctor">
            <summary>
            构建 DataEntityState 并使用默认值
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityState.#ctor(JieNor.Framework.SuperOrm.DataEntity.PkSnapshot[],System.Boolean)">
            <summary>
            构建 DataEntityState 对象并传入快照和FromDatabase参数
            </summary>
            <param name="pkSnapshots">当前实体的快照对象</param>
            <param name="fromDatabase">是否是从数据库加载</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityState.SetPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            设置某个属性已经发生改变
            </summary>
            <param name="e">属性改变事件参数</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityState.DataEntityDirty">
            <summary>
            返回整个实体是否已发生变更
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityState.GetDirtyProperties">
            <summary>
            返回指定实体中所有变更的属性列表
            </summary>
            <returns>变更的属性列表</returns>
            <remarks>
            此方法和<see cref="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty.ShouldSerializeValue(System.Object)"/>完全不同，这里判断的是实体自创建或从数据库读取后，
            发生更改的属性列表。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityState.SetDirty(System.Boolean)">
            <summary>
            设置实体的所有脏标志位
            </summary>
            <param name="newValue">要设置的新值</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityState.PkSnapshotSet">
            <summary>
            返回此实体携带的快照对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityState.FromDatabase">
            <summary>
            返回此实体是否是从数据库中加载过来
            </summary>
            <remarks>
            默认情况下，当实体从数据库中加载时，将自动设置Dirty为false
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.PkSnapshotSet">
            <summary>
            返回一个实体携带的快照对象
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.PkSnapshotSet.#ctor(System.Int32)">
            <summary>
            创建 PkSnapshotSet 实例并指定快照表的期望大小
            </summary>
            <param name="capacity">期望大小</param>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.PkSnapshotSet.Snapshots">
            <summary>
            返回明细表的快照对象
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.PkSnapshot">
            <summary>
            返回单个表对象的快照对象
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.PkSnapshot.TableName">
            <summary>
            返回快照对象对应的表
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.PkSnapshot.Oids">
            <summary>
            返回快照中所有的主键数据
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityTypeAttribute">
            <summary>
            标记一个类是实体类
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityTypeAttribute.AutoCreateSchema">
            <summary>
            标明某实体对象是否需要自动创建表结构
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityWalkerCallback">
            <summary>
            实体枚举器的回调
            </summary>
            <param name="e">每枚举到某些记录时的参数对象。</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DataEntityWalkerEventArgs">
            <summary>
            实体枚举器的回调参数对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityWalkerEventArgs.Count">
            <summary>
            返回当前回调事件中实体的总数目
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityWalkerEventArgs.DataEntities">
            <summary>
            返回当前回调中所有的实体，使用枚举访问
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DataEntityWalkerEventArgs.ToArray">
            <summary>
            将当前的实体全部转化为数组方式输出
            </summary>
            <returns>数组形式的数据</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityWalkerEventArgs.DataEntityType">
            <summary>
            返回这些实体的基类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DataEntityWalkerEventArgs.PropertyStock">
            <summary>
            返回当前递归调用的属性栈，
            </summary>
            <remarks>
            根类型由于没有属性，所以其Property为null，与根类型靠近的属性放在前面。依次类推
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DbIgnoreAttribute">
            <summary>
            标记是否在数据库的所有操作中，忽略此属性。
            </summary>
            <remarks>
            默认的，如果实体的字段不是简单、复杂和集合中的任何一种，都
            不会参与数据库操作。但如果你有字段需要支持这些结构，但又不希望参与数据库
            操作，那么可以设置此
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectCollection">
            <summary>
            承载DynamicObject的默认集合,实现IListSource,接口,可向对象提供返回可以绑定到数据源列表的功能。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectCollection.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,System.Object)">
            <summary>
            创建 DynamicObjectCollection 实例
            </summary>
            <param name="dynamicItemPropertyType">集合关联的明细类型</param>
            <param name="parent">指定此集合的父对象。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectCollection.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,System.Object,System.Collections.Generic.IList{JieNor.Framework.SuperOrm.DataEntity.DynamicObject})">
            <summary>
            创建 DynamicObjectCollection 实例
            </summary>
            <param name="dynamicItemPropertyType">集合关联的明细类型</param>
            <param name="parent">指定此集合的父对象。</param>
            <param name="list">默认的内部集合实例。</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectCollection.DynamicCollectionItemPropertyType">
            <summary>
            返回集合属性的元素数据类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectCollection.System#ComponentModel#IListSource#ContainsListCollection">
            <summary>
            Gets a value indicating whether the collection is a collection of DynamicObjectCollection objects.
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectCollection.System#ComponentModel#IListSource#GetList">
            <summary>
            Returns an DynamicObjectCollection that can be bound to a data source from an object that does not implement an System.Collections.IList itself.
            </summary>
            <returns>An System.Collections.IList that can be bound to a data source from the object.</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView">
            <summary>
            动态实例的强类型访问类基类。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView.#ctor">
            <summary>
            允许派生类在构建时先不传递数据
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView.#ctor(JieNor.Framework.SuperOrm.DataEntity.DynamicObject)">
            <summary>
            创建视图的实例
            </summary>
            <param name="dataEntity">视图类管理的后台实体。</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView.DataEntity">
            <summary>
            返回实体类管理的实体
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView.GetHashCode">
            <summary>
            重载了获取HashCode的方法，使之从实体上获取。
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView.Equals(System.Object)">
            <summary>
            重载的相等判断，使其两个视图的判断已实体的判断为依据
            </summary>
            <param name="obj">要比较的实体或视图类</param>
            <returns>如果两个对象的实体相等，返回true，否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView.op_Implicit(JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView)~JieNor.Framework.SuperOrm.DataEntity.DynamicObject">
            <summary>
            允许视图类隐式转换为动态实体。
            </summary>
            <param name="obj">视图类</param>
            <returns>视图类内部管理的实体实例。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView.GetValue``1(System.String)">
            <summary>
            获取实体属性值
            </summary>
            <remarks>
            主要应对实体视图的变更，没有及时更新强类型视图，可以通过此方法获取新增的属性值
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectView.GetValue``1(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            获取实体属性值
            </summary>
            <remarks>
            主要应对实体视图的变更，没有及时更新强类型视图，可以通过此方法获取新增的属性值
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectViewCollection`1">
            <summary>
            默认的动态实体集合管理类
            </summary>
            <typeparam name="T">动态实体的强类型视图类</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectViewCollection`1.CreateViewInstance(JieNor.Framework.SuperOrm.DataEntity.DynamicObject)">
            <summary>
            创建一个指定视图的实例。
            </summary>
            <param name="obj">视图控制的动态实体。</param>
            <returns>一个视图实例。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectViewCollection`1.#ctor(JieNor.Framework.SuperOrm.DataEntity.DynamicObjectCollection)">
            <summary>
            创建DynamicObjectViewCollection的实例
            </summary>
            <param name="col">视图类内部管理的动态实体集合 </param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectViewCollection`1.DynamicObjects">
            <summary>
            返回内部控制的动态实体集合
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectViewCollection`1.AddNew">
            <summary>
            向集合中添加一个新的项，并返回他的视图对象
            </summary>
            <returns>新增的对象的视图</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectViewCollection`1.CreateView(JieNor.Framework.SuperOrm.DataEntity.DynamicObject)">
            <summary>
            给定一个内部元素，返回新建的视图对象
            </summary>
            <param name="item">需要包装的元素</param>
            <returns>新的视图对象</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectViewCollection`1.GetItem(`0)">
            <summary>
            给定视图对象，返回其真实对象
            </summary>
            <param name="view">视图对象</param>
            <returns>内部的真实对象</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObjectViewCollection`1.Sort``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            對當前集合進行排序。
            </summary>
            <typeparam name="K">指定了排序時，其排序鍵的數據類型。</typeparam>
            <param name="keyFunc">獲取排序鍵的委託。</param>
            <param name="comparer">比較器對象。</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.GetSetValueCallbackAttribute">
            <summary>
            定义自己的取值策略
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.GetSetValueCallbackAttribute.BuildGetCallbackHandlers(System.Collections.Generic.IList{JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyGetValueCallback})">
            <summary>
            构建动态取值策略
            </summary>
            <param name="handlers">默认的取值策略</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.GetSetValueCallbackAttribute.BuildSetCallbackHandlers(System.Collections.Generic.IList{JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertySetValueCallback})">
            <summary>
            构建动态取值策略
            </summary>
            <param name="handlers">默认的取值策略</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase">
            <summary>
            定义了可选的实体接口，在ORM操作时，此接口并不是必须的。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase.GetDataEntityType">
            <summary>
            返回当前实体的数据类型
            </summary>
            <returns>当前实体的数据类型</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.IDataStorage">
            <summary>
            实现动态实体内部数据的存储机制
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.IDataStorage.GetLocalValue(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            获取一个本地的值
            </summary>
            <param name="property">要访问的属性</param>
            <returns>本地存储的值</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.IDataStorage.SetLocalValue(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty,System.Object)">
            <summary>
            设置本地的值
            </summary>
            <param name="property">要设置的属性</param>
            <param name="value">本地值</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.IDataStorage.MemberClone">
            <summary>
            浅克隆
            </summary>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.ILocaleValue">
            <summary>
            用于描述一种在一个对象中存储多个语言信息的对象访问方式。
            </summary>
            <remarks>
            此接口的实现由JieNor.Framework的LocaleValue实现，在此工程中定义是
            为方便序列化和反序列化程序处理此特殊的对象。
            </remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.ILocaleValue.Item(System.Int32)">
            <summary>
            获取/设置指定时区对应的字符信息
            </summary>
            <param name="lcid">时区对应的LCID值</param>
            <returns>此时区对应的字符信息</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.IObjectWithParent">
            <summary>
            描述一个对象，支持获取和设置父对象的功能
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.IObjectWithParent.Parent">
            <summary>
            返回/设置当前对象的父对象
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.MappingToAttribute">
            <summary>
            辅助配置系统转化为真实实体对象，提供一种明确的转化定义
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.MappingToAttribute.#ctor(System.Type)">
            <summary>
            指定真实对象的类型
            </summary>
            <param name="objectType">真实对象的类型</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.MappingToAttribute.#ctor(System.String)">
            <summary>
            指定真实对象的类型名称，必须是AssemblyQualifiedName
            </summary>
            <param name="objectTypeName"></param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.MappingToAttribute.ObjectType">
            <summary>
            返回真实对象的数据类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.MappingToAttribute.ObjectTypeName">
            <summary>
            返回真实对象数据类型的AssemblyQualifiedName
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.MetadataAttributeBase">
            <summary>
            ORM框架Attribute的基类,为抽象类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.MetadataAttributeBase.#ctor">
            <summary>
            创建 MetadataAttributeBase 实例，派生类调用
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.MetadataAttributeBase.Alias">
            <summary>
            返回/设置元数据的别名，别名用于数据库的名称
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.MetadataAttributeBase.DisplayName">
            <summary>
            返回/设置元数据的显示名称，例如列的中文名称
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.MetadataAttributeBase.Description">
            <summary>
            返回/设置元数据的注释
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.OrmPropertyChangingEventArgs">
            <summary>
            定义了ORM特有的属性改变前事件参数
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.OrmPropertyChangingEventArgs.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty,System.Object,System.Object)">
            <summary>
            创建 OrmPropertyChangingEventArgs 实例
            </summary>
            <param name="property">即将发生改变的属性</param>
            <param name="oldValue">旧的值</param>
            <param name="newValue">新的值</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.OrmPropertyChangingEventArgs.Property">
            <summary>
            返回发生数据改变前的属性对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.OrmPropertyChangingEventArgs.OldValue">
            <summary>
            返回改变前的值
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.OrmPropertyChangingEventArgs.NewValue">
            <summary>
            返回准备改变的值
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.PropertyAttributeBase">
            <summary>
            属性的基类,为抽象类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode">
            <summary>
            在对实体结构进行递归分析时，描述当前递归调用所在的属性位置。
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode.Property">
            <summary>
            返回一个属性，此属性是递归过程中其中的一个属性层级。根位置可能此值为null
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode.DataEntityType">
            <summary>
            返回此属性指向的基础类型，如果是复杂属性则指向复杂类型，如果是集合属性，则返回明细的类型，如果是根对象，则返回根类型
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode.Previous">
            <summary>
            返回前一个递归层次的节点对象
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            创建一个根节点对象
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode.CreateNextNode(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            创建一个下级节点
            </summary>
            <param name="property">属性</param>
            <param name="dt">数据类型</param>
            <returns>新的节点</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode.CreateNextNode(JieNor.Framework.SuperOrm.Metadata.DataEntity.IComplexProperty)">
            <summary>
            创建一个下级节点
            </summary>
            <param name="property">属性</param>
            <returns>新的节点</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode.CreateNextNode(JieNor.Framework.SuperOrm.Metadata.DataEntity.ICollectionProperty)">
            <summary>
            创建一个下级节点
            </summary>
            <param name="property">属性</param>
            <returns>新的节点</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode.PropertyPath">
            <summary>
            返回当前递归位置，使用点隔开
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.ReferenceAttribute">
            <summary>
            表示某个简单属性存在引用定义，即是一个外键
            使用ReferenceAttribute时,实体只保存外键值来表达关联关系,并不保存实际数据.
            引用到属性可以指向一个类型,或者类型的某个属性,参考ReferenceTo
            <example>
            <code>
            构建一个订单
            DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
            定义SaleOrderID属性，并设置为主键
            SaleOrderIDProperty = saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
            //引用属性
            DynamicProperty CustomerIdProperty = OrderType.RegisterSimpleProperty("CustomerId", typeof(int), attributes: new ReferenceAttribute("Customer"));
            //Customer定义
            public sealed class Customer
            {
               public readonly static DynamicObjectType CustomerType;
               public readonly static DynamicProperty CustomerIdProperty;
               static Customer()
               {
                   DataEntityTypeAttribute att = new DataEntityTypeAttribute() { Alias = "Customers" };
                   CustomerType = new DynamicObjectType("Customer", attributes: att);
                   CustomerIdProperty = CustomerType.RegisterSimpleProperty("CustomerId", typeof(int), attributes: new SimplePropertyAttribute(true));
                   CustomerType.RegisterInterface(NameAndCode.NameAndCodeType);
               }
            }
            </code>
            </example>
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.ReferenceAttribute.#ctor(System.String)">
            <summary>
            创建 ReferenceAttribute 实例并指定引用指向的路径
            </summary>
            <param name="referenceTo">指向的引用路径或实体</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.ReferenceAttribute.ReferenceTo">
            <summary>
            返回引用属性指向哪个实体或属性路径
            </summary>
            <remarks>
            <para>引用到属性可以指向一个类型，或更长的路径。</para>
            <example>
            <para>下面的例子演示了：订单的CustomerId指向客户档案。</para>
            <code>ReferenceAttribute("Customer")</code>
            <para>下面的例子演示了：订单的销售员其所在的部门</para>
            <code>ReferenceAttribute("Seller.DepartmentId")</code>
            <para>下面的例子中演示：出货单的明细上关联了订单的某个明细记录</para>
            <code>ReferenceAttribute("OrderDetail")</code>
            </example>
            </remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.ReferenceAttribute.ReferenceObjectProperty">
            <summary>
            返回此引用属性其真实引用的对象可以存放到哪个属性上,如果为空表示不支持此功能
            </summary>
            <remarks>
            你可以在配置系统中定义一个BaseTypeName属性，他是字符串类型，表示基类是什么
            但是他是字符串类型的值，当配置系统还原数据时，他可以根据这个值填写到真实实体
            的ReferenceObjectProperty指定的属性上。
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.SimplePropertyAttribute">
            <summary>
            简单属性，此属性参与ORM的处理
            简单属性对应数据库中最基本的类型,包括(整型、字符、浮点型、日期等)
            简单属性通过设置ableGroup提供当表有太多的字段,拆分到另外的表中
            <example>
            <code>
            构建一个订单
            DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
            定义SaleOrderID属性，并设置为主键
            SaleOrderIDProperty = saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
            //单据日期
            DynamicProperty SheetDateProperty = saleOrderType.RegisterProperty("SheetDate", typeof(DateTime),new DateTime(2009,9,1));
            //简单属性的读取和设置
            DynamicObject obj = new DynamicObject(saleOrderType);
            SaleOrderIDProperty.GetValue(obj); //缺省值0
            SheetDateProperty.GetValue(obj); //缺省值
            SaleOrderIDProperty.SetValue(obj, 99);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.SimplePropertyAttribute.#ctor">
            <summary>
            创建SimplePropertyAttribute实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.SimplePropertyAttribute.#ctor(System.Boolean)">
            <summary>
            创建SimplePropertyAttribute实例并指定此属性是主键
            </summary>
            <param name="primaryKey">如果设置为true表示此属性是主键。</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.SimplePropertyAttribute.PrimaryKey">
            <summary>
            返回/设置此字段是否是主键
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.SimplePropertyAttribute.Size">
            <summary>
            返回/设置字段的大小
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.SimplePropertyAttribute.Scale">
            <summary>
            返回/设置字段小数部分的长度
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.SimplePropertyAttribute.DbType">
            <summary>
            返回/设置此属性映射的数据库类型，默认是DbType.Object，ORM将根据属性的返回类型决定使用哪个具体的DbType
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.SimplePropertyAttribute.TableGroup">
            <summary>
            返回/设置此字段存储的扩展表后缀
            </summary>
            <remarks>
            <para>
            当我们的业务设计的越来越多时，会出现一个表有太多的字段，这个时候
            可以利用ORM提供的扩展表功能。例如你在某个简单属性上标示TableGroup='Ex‘，那么
            此简单属性将存储在 table_Ex 这张表中(table是原始表的名称），此扩展表
            和原始表具有 1..1 的关系。
            </para>
            <para>
            目前仅支持标记在简单属性上，还不支持复杂属性，因为这样会造成命名的复杂性。
            </para>
            </remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.SimplePropertyAttribute.AutoSync">
            <summary>
            Gets or sets the AutoSync enumeration.
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.PropertyConverterAttribute">
            <summary>
            orm属性转换器,参与orm取值转换的处理过程
            </summary>
            <remarks>
            本代码反编译至微软的TypeConverterAttribute类
            </remarks>
            <author>linus_wang</author>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.VersionAttribute">
            <summary>
            允许标注到某个属性上，以标明此属性提供版本的记录功能。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataEntity.DynamicObject">
            <summary>
            动态实体实例对象,对应ORM的持久化对象Object
            对实体的访问规则如下: 
            DynamicProperty.getValue(DynamicObject), 
            DynamicProperty.setValue(DynamicObject,value)                   
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObject.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            传递动态实体的类型创建 DynamicObject 实例
            </summary>
            <param name="dt">当前动态实体的类型，不可为空。</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicObject.DynamicObjectType">
            <summary>
            返回当前实体的动态实体类型
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObject.GetDataEntityType">
            <summary>
            返回当前实体的数据类型
            </summary>
            <returns>当前实体的数据类型</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicObject.DataStorage">
            <summary>
            返回动态实体的本地值存储器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataEntity.DynamicObject.CreateDataStorage">
            <summary>
            创建动态实体的本地值存储策略。
            </summary>
            <returns>一个实现了本地值存储的类实例</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicObject.Item(System.String)">
            <summary>
            返回/设置此实体中指定名称属性的数据
            </summary>
            <param name="propertyName">此属性的名称</param>
            <returns>返回此字段的值</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicObject.Item(System.Int32)">
            <summary>
            返回/设置此实体中指定位置的数据
            </summary>
            <param name="index">此属性所在的位置</param>
            <returns>返回此字段的值</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataEntity.DynamicObject.Item(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            返回/设置此实体中指定属性的数据
            </summary>
            <param name="property">要处理的属性对象</param>
            <returns>返回此字段的值</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.BatchOrmAction`2">
            <summary>
            接受批量的ID并执行
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchema">
            <summary>
            描述了实体引用属性的定义情况
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchema.Add(JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchemaItem)">
            <summary>
            添加一个扫描的结果
            </summary>
            <param name="item">新的结果</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchema.GetItemsByPropertyPath(System.String,System.Boolean)">
            <summary>
            获取某个属性路径下所有的引用定义
            </summary>
            <param name="propertyPath">引用属性路径</param>
            <param name="mustHaveReferenceObjectProperty">是否尽搜索包含ReferenceObjectProperty属性定义的引用属性</param>
            <returns>所有的引用定义</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchema.GetReferenceSchema(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Boolean)">
            <summary>
            通过分析一个指定的数据结构，获取其引用定义
            </summary>
            <param name="dt">要分析的数据结构</param>
            <param name="onlyDbProperty">是否仅处理有物理字段的属性</param>
            <returns>分析后的数据结构，此结构描述了所有的引用属性定义情况</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchema.SearchDataEntityReferenceSchema(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchema,JieNor.Framework.SuperOrm.DataEntity.PropertyStockNode,System.Boolean)">
            <summary>
            扫描指定实体类型，获取引用属性定义情况
            </summary>
            <param name="dt">实体类型</param>
            <param name="schema">引用属性定义情况</param>
            <param name="stock"></param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchemaItem">
            <summary>
            描述了实体应用属性的单个定义情况
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchemaItem.PropertyPath">
            <summary>
            返回/设置引用属性所在的路径
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchemaItem.ReferenceOidProperty">
            <summary>
            返回/设置引用属性
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchemaItem.ReferenceTo">
            <summary>
            返回/设置此引用属性指向的路径
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataEntityReferenceSchemaItem.ReferenceObjectProperty">
            <summary>
            返回/设置引用属性最终填充到哪个引用对象属性
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement">
            <summary>
            数据管理器具体实现类,返回IDataManager操作接口,实现对实体的读写等操作。
            一、数据管理器工作过程(读取)
            1.设置数据库驱动,连接串信息
            2.根据传进的动态实体类型构造DataEntityTypeMap(实体结构的Map,描述字段及字段关系),供构造SQL使用. 此处使用缓存.
            3.构造ReadWhere,有三种参数类型object id,object[] ids,whereSql,分别对应单记录,多记录,查询条件。
              同时提供OperateOption参数进行控制，现未有任何实现
            4.读取数据到表模型上ReadToDataSet,根据2的Map构造Sql,查询后一次性返回数据(包含事务、锁定等优化),
              根据返回数据reader,填充到QuickDataSet中。此步骤因连接多实际上有性能问题，不使用并行技术。
            5.把表模型转化为对象模型DataSetToEntities,表数据DataSet根据Map使用最基本的DynamicProperty.setValue(DynamicObject,value)
              给object赋值最终转换成Entities数组。对于复杂属性及集合属性，实际上是创建了另外的Entities数组并引用到其上，
              这里需要递归调用DataSetToEntities.另外此步骤填充实体时当列多，使用列并行技术。
            6.返回动态实体对象数组
            二、数据管理器工作过程(保存)
            1、
            2、
            三、数据管理器工作过程(删除)
            1、
            2、
            </summary>
            <example>
            <code>
            SqlServerDbDriver driver = new SqlServerDbDriver();
            driver.ConnectionString = TestConnectionString;
            IDataManager manager = DataManagerUtils.GetDataManager(Order.OrderType, driver);
            object order = manager.Read(1);
            DynamicObject dynamicObject = (DynamicObject)order[0];
            </code>
            </example>
            <summary>
            Delete 部分 
            </summary> 
            <summary>
            Maping 部分 
            </summary> 
            <summary>
            Read 部分 
            </summary>
            <summary>
            //Save 部分 
            </summary> 
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.CacheProvider">
            <summary>
            Orm缓存管理器
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.DbDriver">
            <summary>
            Orm数据库驱动
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.DataEntityType">
            <summary>
            数据实体类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.DataEntityTypeMap">
            <summary>
            数据实体类型映射
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.Database">
            <summary>
            orm数据模型架构
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.Option">
            <summary>
            实体操作选项
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.UpdateMetadata(JieNor.Framework.SuperOrm.Drivers.IOrmTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            按照当前实体的结构构建数据库
            </summary>
            <param name="ormTransaction">事务</param>
            <param name="option">操作的可选项 </param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.AutoBatchExecute(System.Collections.IEnumerable,JieNor.Framework.SuperOrm.OperateOption,System.Func{System.Object[],System.Object[]})">
            <summary>
            分析一批编号，根据数据量的大小进行批量处理
            </summary>
            <param name="ids">编号列表</param>
            <param name="option">选项</param>
            <param name="func">实际执行的方法</param>
            <returns>执行的最终的结果</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.GetSaveDataSet(System.Object[])">
            <summary>
            获取实体数据分析结果，哪些行是Insert，哪些是Update，哪些是Delete的
            </summary>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.TryGetTableMaping(System.String,JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable@,System.String@)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="table"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.TryGetColumnMaping(System.String,JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn@,System.String@)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="column"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.Select(System.Object,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            获取指定一个orm数据对象
            </summary>
            <param name="oid"></param>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.SelectBy(System.String,JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            指定一个条件，按此条件返回一批数据。
            </summary>
            <param name="where">条件字符串，默认情况下条件中的字段使用属性表示，而是不使用原生的字段名称。</param>
            <param name="option">如果希望使用原生的字段名称，那么可以设置DonotAutoMapWhere为true</param>
            <param name="bNeedSnapshot">表示返回集合是否支持快照，若支持快照，则返回集合可以进行crud操作后再保存</param>
            <returns>查询结果，此结果集支持再保存，即对集合的Add、Remove后，再调用保存方法可以还原。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.Select(System.Collections.Generic.IEnumerable{System.Object},JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            返回指定一批编号的实体数据数组并返回可重新保存的数组形式
            </summary>
            <param name="oids">一批编号数组</param>
            <param name="option">此操作的选项</param>
            <param name="bNeedSnapshot">表示返回集合是否支持快照，若支持快照，则返回集合可以进行crud操作后再保存</param>
            <returns>能够找到的实体集合，没有找到的不会出现错误</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.Select(JieNor.Framework.SuperOrm.Drivers.ReadWhere,JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            根据指定条件读取数据
            </summary>
            <param name="where"></param>
            <param name="option"></param>
            <param name="bNeedSnapshot"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.SetEntitySnapshotEx(JieNor.Framework.SuperOrm.DataManager.QuickDataSet,JieNor.Framework.SuperOrm.DataManager.QuickDataTable,System.Collections.Generic.Dictionary{System.Object,JieNor.Framework.SuperOrm.DataManager.RuntimePkSnapshotSet})">
            <summary>
            递归创建快照对象，通过外键直接定位到根实体的快照集对象。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.CommitSnapData(System.Collections.IEnumerable)">
            <summary>
            快照更新
            </summary>
            <param name="dataEntities"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.EntitiesToDataSetForSimpleProperty(JieNor.Framework.SuperOrm.DataManager.SaveDataTable,System.Object[],JieNor.Framework.SuperOrm.DataManager.SaveDataSet,JieNor.Framework.SuperOrm.Metadata.Database.DataEntityTypeMap)">
            <summary>将实体中脏数据填充到表格中。</summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.GetOutputList(JieNor.Framework.SuperOrm.Metadata.Database.DataEntityTypeMap)">
            <summary>寻找输出列</summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.DataManagerImplement.ClearEntityDirty(System.Object[],JieNor.Framework.SuperOrm.Metadata.Database.DataEntityTypeMap,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            清除实体脏标志
            </summary>
            <param name="dataEntities"></param>
            <param name="dataEntityTypeMap"></param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.IOrmCacheProvider">
            <summary>
            orm缓存客户端
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IOrmCacheProvider.GetDcData(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.String)">
            <summary>
            获取Orm数据对象
            </summary>
            <param name="dt"></param>
            <param name="pkId"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IOrmCacheProvider.GetAllDcData(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取ORM数据集合
            </summary>
            <param name="dt"></param>
            <param name="allPkIds"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IOrmCacheProvider.GetAllDcData(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Object}@)">
            <summary>
            获取指定Id的数据缓存
            </summary>
            <param name="dt"></param>
            <param name="allPkIds"></param>
            <param name="nohitPkIds"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IOrmCacheProvider.SetDcData(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Collections.Generic.IEnumerable{JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase})">
            <summary>
            设置Orm数据至缓存
            </summary>
            <param name="dt"></param>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IOrmCacheProvider.SetDcData(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase)">
            <summary>
            设置Orm数据至缓存
            </summary>
            <param name="dt"></param>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IOrmCacheProvider.RemoveDcData(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.String)">
            <summary>
            移除指定标识的缓存数据
            </summary>
            <param name="dt"></param>
            <param name="pkId"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IOrmCacheProvider.RemoveAllDcData(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除所有标识的缓存数据
            </summary>
            <param name="dt"></param>
            <param name="allPkIds"></param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.IDataManager`2">
            <summary>
            数据操作接口类
            包含对实体的创建、查询、保存、删除操作
            </summary>
            <typeparam name="DataT">实体类型</typeparam>
            <typeparam name="OidT">数据标示类型</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Create(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            创建一个实体实例
            </summary>
            <returns>新的实体实例</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Read(`1,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            返回指定编号的实体数据
            </summary>
            <param name="oid">要检索的实体编号</param>
            <param name="option">此操作的选项</param>
            <returns>如果找到将返回此实体，否则抛出异常。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Read(System.Collections.Generic.IEnumerable{`1},JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            返回指定一批编号的实体数据数组
            </summary>
            <param name="oids">一批编号数组</param>
            <param name="option">此操作的选项</param>
            <returns>能够找到的实体数组，没有找到的不会出现错误</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Select(System.String,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            指定一个条件，按此条件返回一批数据。
            </summary>
            <param name="where">条件字符串，默认情况下条件中的字段使用属性表示，而是不使用原生的字段名称。</param>
            <param name="option">如果希望使用原生的字段名称，那么可以设置DonotAutoMapWhere为true</param>
            <returns>查询结果，此结果集支持再保存，即对集合的Add、Remove后，再调用保存方法可以还原。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Select(System.Collections.Generic.IEnumerable{`1},JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            返回指定一批编号的实体数据数组并返回可重新保存的数组形式
            </summary>
            <param name="oids">一批编号数组</param>
            <param name="option">此操作的选项</param>
            <returns>能够找到的实体集合，没有找到的不会出现错误</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Contains(`1,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            返回指定编号的实体是否存在
            </summary>
            <param name="oid">要查询的实体编号</param>
            <param name="option">此操作的选项</param>
            <returns>如果存在此实体编号将返回true，否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Contains(System.Collections.Generic.IEnumerable{`1},JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            返回一批编号的实体是否存在
            </summary>
            <param name="oids">要查询的一批实体</param>
            <param name="option">此操作的选项</param>
            <returns>返回最终找到的实体编号列表</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Save(`0,System.Data.IDbTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            保存指定的实体
            </summary>
            <param name="dataEntity">要保存的实体</param>
            <param name="dbTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Save(System.Collections.Generic.IEnumerable{`0},System.Data.IDbTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            保存一批实体数据
            </summary>
            <param name="dataEntities">要保存的一批实体</param>
            <param name="dbTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.CommitSnapData(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            快照更新
            </summary>
            <param name="dataEntities"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Delete(`1,System.Data.IDbTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            删除指定编号的实体
            </summary>
            <param name="oid">要删除的实体编号</param>
            <param name="dbTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">此操作的选项</param>
            <returns>如果删除成功，返回true，如果系统没有找到此记录，返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Delete(System.Collections.Generic.IEnumerable{`1},System.Data.IDbTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            删除一批编号的实体
            </summary>
            <param name="oids">要删除的实体编号列表</param>
            <param name="dbTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.UpdateMetadata(System.Data.IDbTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            按照当前实体的结构构建数据库
            </summary>
            <param name="dbTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">操作的可选项 </param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.Option">
            <summary>
            为系统提供额外的选项
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.IDataManager`2.DataEntityType">
            <summary>
            实体类型定义信息
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.IDataManager">
            <summary>
            实体操作的非泛型版本
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Create(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            创建一个实体实例
            </summary>
            <param name="option">此操作的选项</param>
            <returns>新的实体实例</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.SelectBy(System.String,JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            指定一个条件，按此条件返回一批数据。
            </summary>
            <param name="where">条件字符串，默认情况下条件中的字段使用属性表示，而是不使用原生的字段名称。</param>
            <param name="option">如果希望使用原生的字段名称，那么可以设置DonotAutoMapWhere为true</param>
            <param name="bNeedSnapshot">是否需要快照，有快照时，返回的集合支持CRUD,然后再次保存</param>
            <returns>查询结果，此结果集支持再保存，即对集合的Add、Remove后，再调用保存方法可以还原。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Select(System.Collections.Generic.IEnumerable{System.Object},JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            返回指定一批编号的实体数据数组并返回可重新保存的数组形式
            </summary>
            <param name="oids">一批编号数组</param>
            <param name="option">此操作的选项</param>
            <param name="bNeedSnapshot">是否需要快照，有快照时，返回的集合支持CRUD,然后再次保存</param>
            <returns>能够找到的实体集合，没有找到的不会出现错误</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Select(System.Object,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            返回指定一批编号的实体数据数组并返回可重新保存的数组形式
            </summary>
            <param name="oid">读取数据的主键</param>
            <param name="option">此操作的选项</param>
            <returns>能够找到的实体集合，没有找到的不会出现错误</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Select(JieNor.Framework.SuperOrm.Drivers.ReadWhere,JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            返回指定一批编号的实体数据数组并返回可重新保存的数组形式
            </summary>
            <param name="where">读取数据的条件</param>
            <param name="option">此操作的选项</param>
            <param name="bNeedSnapshot">是否需要快照，有快照时，返回的集合支持CRUD,然后再次保存</param>
            <returns>能够找到的实体集合，没有找到的不会出现错误</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Contains(System.Object,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            返回指定编号的实体是否存在
            </summary>
            <param name="oid">要查询的实体编号</param>
            <param name="option">此操作的选项</param>
            <returns>如果存在此实体编号将返回true，否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Contains(System.Collections.IEnumerable,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            返回一批编号的实体是否存在
            </summary>
            <param name="oids">要查询的一批实体</param>
            <param name="option">此操作的选项</param>
            <returns>返回最终找到的实体编号列表</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.GetSaveDataSet(System.Object[])">
            <summary>
            分析实体数据包，哪些是Insert哪些是Update哪些是Delete
            </summary>
            <param name="dataEntities"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Save(System.Object,JieNor.Framework.SuperOrm.Drivers.IOrmTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            保存指定的实体
            </summary>
            <param name="dataEntity">要保存的实体</param>
            <param name="ormTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Save(System.Collections.IEnumerable,JieNor.Framework.SuperOrm.Drivers.IOrmTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            保存一批实体数据
            </summary>
            <param name="dataEntities">要保存的一批实体</param>
            <param name="ormTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.CommitSnapData(System.Collections.IEnumerable)">
            <summary>
            快照更新
            </summary>
            <param name="dataEntities"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Delete(System.Object,JieNor.Framework.SuperOrm.Drivers.IOrmTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            删除指定编号的实体
            </summary>
            <param name="oid">要删除的实体编号</param>
            <param name="ormTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">此操作的选项</param>
            <returns>如果删除成功，返回true，如果系统没有找到此记录，返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.Delete(System.Collections.IEnumerable,JieNor.Framework.SuperOrm.Drivers.IOrmTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            删除一批编号的实体
            </summary>
            <param name="oids">要删除的实体编号列表</param>
            <param name="ormTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.UpdateMetadata(JieNor.Framework.SuperOrm.Drivers.IOrmTransaction,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            按照当前实体的结构构建数据库
            </summary>
            <param name="ormTransaction">此操作参与的事务对象，null表示没有事务</param>
            <param name="option">操作的可选项 </param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.TryGetTableMaping(System.String,JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable@,System.String@)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="table"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.IDataManager.TryGetColumnMaping(System.String,JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn@,System.String@)">
            <summary>
            
            </summary>
            <param name="path"></param>
            <param name="column"></param>
            <param name="errorMessage"></param>
            <returns></returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.IDataManager.Option">
            <summary>
            为系统提供额外的选项
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.IDataManager.DataEntityType">
            <summary>
            实体类型定义信息
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.IDataManager.DbDriver">
            <summary>
            
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.IDataManager.CacheProvider">
            <summary>
            缓存提供者
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.ObjectCache`2.GetOrAdd(`0,System.Func{`0,`1})">
            <summary>
            基于弱引用字典的实现。
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="valueFactory">The function used to generate a dataEntity for the key</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManager.SaveDataTable.AnalyseRows(JieNor.Framework.SuperOrm.DataEntity.PkSnapshot)">
            <summary>
            通过传入的快照，分析当前表的所有记录决定何种操作：(Insert\Update\Delete\None)
            </summary>
            <param name="pkSnapshot">此表的原始快照，目前实现的快照来自实体读取时备份的，以后还可以实现从数据库中取快照</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.SimpleColumnValuePair">
            <summary>
            简单实现的列值对，给一个固定的值
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.SimpleColumnValuePair.Column">
            <summary>
            返回列对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.SimpleColumnValuePair.Value">
            <summary>
            返回值对象,不允许设置值
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.SyncColumnValuePair">
            <summary>
            提供数据同步功能支持的列值对
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.SyncColumnValuePair.Column">
            <summary>
            返回列对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.SyncColumnValuePair.Value">
            <summary>
            返回、设置值，并同步到实体
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManager.ParentOidColumnValuePair">
            <summary>
            为父子关系的外键特殊设计的列值对。区别是Get是从父表延迟读取，而Set和SyncColumnValuePair相同。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.ParentOidColumnValuePair.Column">
            <summary>
            返回列对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.DataManager.ParentOidColumnValuePair.Value">
            <summary>
            返回、设置值，并同步到实体
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.DataManagerUtils">
            <summary>
            工具类,创建一个数据管理器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManagerUtils.GetDataManager``2">
            <summary>
            创建一个数据管理器，以便获取CRUD的能力
            </summary>
            <returns>一个数据管理器实例</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManagerUtils.GetDataManager">
            <summary>
            创建一个数据管理器，以便获取CRUD的能力
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManagerUtils.GetDataManager(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,JieNor.Framework.SuperOrm.Drivers.IDbDriver,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            创建一个数据管理器，以便获取CRUD的能力
            </summary>
            <param name="dt">数据类型</param>
            <param name="driver">驱动程序实例</param>
            <param name="option">管理器的整体选项。</param>
            <returns>一个数据管理器实例</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManagerUtils.ToArray``1(System.Collections.IEnumerable)">
            <summary>
            将IEnumerable类型的数据转换为数组
            </summary>
            <param name="col">要转换的集合</param>
            <returns>结果数组</returns>
            <typeparam name="T">数组的类型</typeparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManagerUtils.GetBatchSize(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            获取大数据量处理时，一批提交的数据量，默认5000。（内部变量名：BatchSize）
            </summary>
            <param name="option">提供选项的对象</param>
            <returns>当前选项对象中此设置的值</returns>
            <remarks>
            引擎在操作大型数据时，不能一次性执行SQL，可很可能造成数据库的超时，所以引擎在发现
            数据量很大时，会内部分批执行SQL。此参数设置一次批量处理的数量。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManagerUtils.GetAlwaysReturnArray(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            是否在读取操作时，不论数据大小都是返回数组。默认是true（内部变量名：AlwaysReturnArray）
            </summary>
            <param name="option">提供选项的对象</param>
            <returns>当前选项的值</returns>
            <remarks>
            如果是true表示无论多大的数据，总是返回数组，这可能造成巨大的内存占用。如果为false，当引擎发现数据量很大时（大于BatchSize)
            返回的将是一个延迟读取的对象，直到Foreach结果集时，才会分批读取数据，这非常适合读取巨大的数据量。但是需要注意的是：
            基于执行效率和内存占用的考虑，结果集不支持多次Foreach操作。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.DataManagerUtils.GetBulkCopy(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            是否启用BulkCopy模式的批量插入机制，默认为false。（内部变量名：BulkCopy）
            注意：只用数据库驱动程序支持BulkCopy，此选项才能真正有效。
            </summary>
            <param name="option">提供选项的对象</param>
            <returns>是否启用BulkCopy模式批量插入数据。。</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.LoadReferenceObjectManager">
            <summary>
            延迟读取所有未填充的引用属性对象的值
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.LoadReferenceObjectManager.OnlyDbProperty">
            <summary>
            返回/设置 是否仅数据库有效的属性参与计算。默认值为true.
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.LoadReferenceObjectManager.Load(JieNor.Framework.SuperOrm.DataManager.IDataManager,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Object[],System.Boolean)">
            <summary>
            延迟读取所有未填充的引用属性对象的值
            </summary>
            <param name="dm"></param>
            <param name="dt"></param>
            <param name="dataEntities">要扫描更新的实体集合</param>
            <param name="onlyDbProperty"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.LoadReferenceObjectManager.Load(JieNor.Framework.SuperOrm.DataManager.IDataManager,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Object[],System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            延迟读取所有未填充的引用属性对象的值
            </summary>
            <param name="dm"></param>
            <param name="dt"></param>
            <param name="dataEntities">要扫描更新的实体集合</param>
            <param name="onlyDbProperty"></param>
            <param name="dictReferenceWhere">引用属性where集合</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.LoadReferenceObjectManager.GetTasks(System.Object[])">
            <summary>
            获取所有的读取任务
            </summary>
            <returns>所有需要读取引用数据的任务</returns>
            <param name="dataEntities">要扫描更新的实体集合</param>
            <remarks>
            可以重载此方法，例如缓存系统可以检测创建后的任务，在进行下一步（到数据库读取数据）之前，
            在缓存中检索并填充这些数据。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.LoadReferenceObjectManager.DoTasks(JieNor.Framework.SuperOrm.DataManager.IDataManager,System.Collections.Generic.ICollection{JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList})">
            <summary>
            继续完成GetFillReferenceObjectsTasks返回的参数中，未填充的任务
            </summary>
            <param name="dm"></param>
            <param name="tasks">要继续完成的任务，如果有未读取的数据，那么将自动从数据库中检索</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.LoadReferenceObjectManager.DoTasks(JieNor.Framework.SuperOrm.DataManager.IDataManager,System.Collections.Generic.ICollection{JieNor.Framework.SuperOrm.DataEntity.DataEntityReferenceList},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            继续完成GetFillReferenceObjectsTasks返回的参数中，未填充的任务
            </summary>
            <param name="dm"></param>
            <param name="tasks">要继续完成的任务，如果有未读取的数据，那么将自动从数据库中检索</param>
            <param name="dictReferenceWhere">引用属性where集合</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.LoadReferenceObjectManager.Read(JieNor.Framework.SuperOrm.DataManager.IDataManager,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Object[])">
            <summary>
            可以重载此方法完全控制数据的读取
            </summary>
            <param name="dm"></param>
            <param name="dt">要读取的数据类型</param>
            <param name="oids">要读取的键</param>
            <returns>结果</returns>
            <remarks>
            如果需要复杂的读取逻辑，例如使用不同的驱动程序读取数据，请重载此方法。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.LoadReferenceObjectManager.Read(JieNor.Framework.SuperOrm.DataManager.IDataManager,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,JieNor.Framework.SuperOrm.Drivers.ReadWhere)">
            <summary>
            可以重载此方法完全控制数据的读取
            </summary>
            <param name="dm"></param>
            <param name="dt">要读取的数据类型</param>
            <param name="where">取数条件</param>
            <returns>结果</returns>
            <remarks>
            如果需要复杂的读取逻辑，例如使用不同的驱动程序读取数据，请重载此方法。
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.BulkCopyData">
            <summary>
            为驱动程序实现BulkCopy功能设计。
            </summary>
            <remarks>
            <para> 在一个事务中，同一个逻辑表中多个插入行任务，其共享一个BulkCopyTask,因为他们需要最后统一提交。</para>
            <para> 在内部，所有插入的数据存储到数组中，最后可以作为一个IDataReader返回数据。</para>
            <para> 当把 SqlDateTime 类型的 DataTable 列批量加载到类型为 SQL Server 2008 中新增的日期/时间类型的 SQL Server 列时，SqlBulkCopy 将失败</para>
            <para> 受制于BulkCopy机制，我无法找到如何使用数据库的默认值，只能使用CLR的默认值。这样做的话可能会出现不一致的问题。</para>
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.BulkCopyData.#ctor(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable)">
            <summary>
            派生类调用此构造创建实例。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.BulkCopyData.Table">
            <summary>
            返回当前任务关联的表
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.BulkCopyData.Insert(JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            向当前表登记插入信息。
            </summary>
            <param name="inputValues">输入数据。</param>
            <param name="oid">主键</param>
            <param name="option">选项。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.BulkCopyData.ConvertData(JieNor.Framework.SuperOrm.Drivers.TableColumnConverterContainer)">
            <summary>在提交前，将必要的字段值进行转换。</summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.BulkCopyData.CreateDataReader(System.String,JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn[])">
            <summary>
            从当前任务中提取数据，它使用IDataReader方式返回。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.BulkCopyDataReader">
            <summary>
            为BulkCopy提供一个读取器，使之从这里读取要插入的数据。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.BulkCopyDataReader.TableName">
            <summary>
            返回物理表名称
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.BulkCopyDataReader.Columns">
            <summary>
            返回所有的列对象。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskBase">
            <summary>
            为批量处理建立的任务。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskBase.#ctor(System.String,System.Collections.ObjectModel.ReadOnlyCollection{JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn},System.Data.IDataReader,System.Int32)">
            <summary>
            派生类调用此方法构建实例。
            </summary>
            <param name="tableName">表名称</param>
            <param name="columns">列集合</param>
            <param name="dataReader">数据读取器。</param>
            <param name="level">任务的优先级别</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskBase.TableName">
            <summary>
            返回物理表名称
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskBase.DataReader">
            <summary>
            返回对应的数据读取器
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskBase.Columns">
            <summary>
            返回所有的列对象。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskBase.Level">
            <summary>
            返回 表的层级，决定执行顺序
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskBase.Execute(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            执行当前任务。
            </summary>
            <param name="con">当前可用的连接对象</param>
            <param name="tran">数据库事务。</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskContainer">
            <summary>
            存放BulkCopy任务的专用容器，驱动程序可以在事务中持有此容器，并在提交时统一提交。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskContainer.#ctor">
            <summary>
            创建实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.BulkCopyTaskContainer.Insert(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            向指定的表登记插入信息。
            </summary>
            <param name="table">表对象的元数据</param>
            <param name="inputValues">输入数据。</param>
            <param name="oid">主键</param>
            <param name="option">选项。</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.TableColumnConverterContainer">
            <summary>
            为特定数据库指定特定的转换器。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.TableColumnConverterContainer.TryGetConverter(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn,System.Func{System.Object,System.Object}@)">
            <summary>
            尝试检索某个列的转换器。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.TableColumnConverterContainer.GetColumnDbValue(JieNor.Framework.SuperOrm.Metadata.IColumnValuePair)">
            <summary>
            返回一个列值对所对应的数据库值，此值根据当前驱动程序的要求进行了转换。
            </summary>
            <param name="pair">列值对</param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.DbDriverBase">
            <summary>
            参考实现的驱动程序，提供通用的实现
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.DbDriverBase.GetSelectSQL(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable)">
            <summary>
            创建Select表的SQL语句
            </summary>
            <param name="tableSchema">要Select操作的表Schema</param>
            <returns>对应的SQL语句</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.DbDriverBase.Select(JieNor.Framework.SuperOrm.Drivers.SelectCallback,System.Collections.Generic.IEnumerable{JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable},JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,JieNor.Framework.SuperOrm.Drivers.ReadWhere,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            读取指定表的数据
            </summary>
            <param name="callback">读取数据后发生的回调</param>
            <param name="tablesSchema">所有要读取的表的Schema</param>
            <param name="rootTable">根表对象</param>
            <param name="where">条件对象</param>
            <param name="option">此操作的选项。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.DbDriverBase.ExecuteReader(JieNor.Framework.SuperOrm.Drivers.SelectCallback,System.Collections.Generic.IEnumerable{JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable},JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,System.Collections.Generic.IList{System.Text.StringBuilder},JieNor.Framework.SuperOrm.Drivers.ReadWhere,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            指定指定SQL语句列表并处理读取回调
            </summary>
            <param name="callback">要进行读取处理的回调</param>
            <param name="tablesSchema">要读取的所有表的Schema</param>
            <param name="rootTable">根表对象的Schema</param>
            <param name="selectSqls">所有表的Select语句</param>
            <param name="where">条件对象</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.DbDriverBase.UpdateMetadata(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataDatabase,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            按照指定参数的定义，更新当前数据库的表结构
            </summary>
            <param name="dbMetadata">指定的数据库结构，注意，已经屏蔽了TableGroup的概念</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.DbDriverBase.BeginTransaction(System.Data.IDbTransaction)">
            <summary>
            启动事务
            </summary>
            <param name="dbTransaction"></param>
            <returns></returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.DbDriverBase.ConnectionString">
            <summary>
            当前的数据库连接字符串
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.IDatabaseTask">
            <summary>
            数据库驱动在一个事务任务。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.IDatabaseTask.Level">
            <summary>
            返回 表的层级，决定执行顺序
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.IDatabaseTask.Execute(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            执行当前任务。
            </summary>
            <param name="con">当前可用的连接对象</param>
            <param name="tran">数据库事务。</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.SelectCallback">
            <summary>
            在数据库获取到读取器后发生的回调
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.IDbDriver">
            <summary>
            ORM的驱动程序
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.IDbDriver.Select(JieNor.Framework.SuperOrm.Drivers.SelectCallback,System.Collections.Generic.IEnumerable{JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable},JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,JieNor.Framework.SuperOrm.Drivers.ReadWhere,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            读取指定表的数据
            </summary>
            <param name="callback">读取数据后发生的回调</param>
            <param name="tablesSchema">所有要读取的表的Schema</param>
            <param name="rootTable">根表对象</param>
            <param name="where">条件对象</param>
            <param name="option">此操作的选项。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.IDbDriver.UpdateMetadata(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataDatabase,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            按照指定参数的定义，更新当前数据库的表结构
            </summary>
            <param name="dbMetadata">指定的数据库结构，注意，已经屏蔽了TableGroup的概念</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.IDbDriver.BeginTransaction(System.Data.IDbTransaction)">
            <summary>
            启动事务
            </summary>
            <param name="dbTransaction"></param>
            <returns></returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.IDbDriver.ConnectionString">
            <summary>
            当前的数据库连接字符串
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.IOrmTransaction">
            <summary>
            ORM操作事务类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.IOrmTransaction.Insert(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            向数据库插入一笔记录
            </summary>
            <param name="table">要插入操作的表对象</param>
            <param name="inputValues">输入值数组</param>
            <param name="outputValues">输出值数组</param>
            <param name="oid">主键编号</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.IOrmTransaction.Update(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair,JieNor.Framework.SuperOrm.Metadata.IColumnValuePair,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            更新指定表的数据
            </summary>
            <param name="table">要更新数据的表</param>
            <param name="inputValues">输入值数组</param>
            <param name="outputValues">输出值数组</param>
            <param name="oid">要更新的行的主键值</param>
            <param name="originalVersion">原始版本号</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.IOrmTransaction.Delete(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,System.Object[],System.Object[],JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            删除指定表的数据
            </summary>
            <param name="table">要删除数据的表</param>
            <param name="oids">删除数据的编号列表</param>
            <param name="originalVersions">原始版本列表</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.IOrmTransaction.Delete(System.Collections.Generic.IEnumerable{JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable},JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,System.Object[],JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            删除指定一批表的数据，这些表具有父子关系
            </summary>
            <param name="tablesSchema">所有表的Schema</param>
            <param name="rootTable">根表对象</param>
            <param name="rootOids">根表的编号列表</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.IOrmTransaction.CommitSqlTask">
            <summary>
            提交SQL
            </summary>
        </member>
        <member name="E:JieNor.Framework.SuperOrm.Drivers.IOrmTransaction.CommitAfter">
            <summary>
            当提交事务时，执行自定义的操作.
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase">
            <summary>
            抽象的数据读取类，用于辅助将数据库读取出的数据转换为正确的实体类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.Parent">
            <summary>
            返回真正的数据库读取程序
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.TableSchema">
            <summary>
            返回当前读取器对应的表结构
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ChangeParent(System.Data.IDataReader,JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable)">
            <summary>
            切换当前的真正读取器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetValues(System.Object[])">
            <summary>
            获取当前记录的集合中的全部属性字段。
            </summary>
            <param name="values">要将属性字段复制到的 Object 的数组。</param>
            <returns>数组中 Object 的实例的数目。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetConverter(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn)">
            <summary>
            允许派生类为指定的列定义转换器函数
            </summary>
            <param name="col">列对象</param>
            <returns>一个转换器对象，可以将数据库中读取出来的值转换为你想要的值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToInt16(System.Object)">
            <summary>
            转换对象的值到Int16
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToInt32(System.Object)">
            <summary>
            转换对象的值到Int32
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToDecimal(System.Object)">
            <summary>
            转换对象的值到Decimal
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToInt64(System.Object)">
            <summary>
            转换对象的值到Int64
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToBoolean(System.Object)">
            <summary>
            转换对象的值到Boolean
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToChar(System.Object)">
            <summary>
            转换对象的值到Char
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToByte(System.Object)">
            <summary>
            转换对象的值到Byte
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToGuid(System.Object)">
            <summary>
            转换对象的值到Guid
            </summary>
            <param name="value">要转换的值，支持byte、string转换到guid</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToDouble(System.Object)">
            <summary>
            转换对象的值到Double
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.ToSingle(System.Object)">
            <summary>
            转换对象的值到Single
            </summary>
            <param name="value">要转换的值</param>
            <returns>如果是DbNull将仍然返回DbNull，否则将尝试转换。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.Close">
            <summary>
            关闭 IDataReader Object。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.Depth">
            <summary>
            获取一个值，该值指示当前行的嵌套深度。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetSchemaTable">
            <summary>
            返回一个 DataTable，它描述 IDataReader 的列元数据。
            </summary>
            <returns>一个描述列元数据的 DataTable。</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.IsClosed">
            <summary>
            获取一个值，该值指示数据读取器是否已关闭。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.NextResult">
            <summary>
            当读取批处理 SQL 语句的结果时，使数据读取器前进到下一个结果。
            </summary>
            <returns>如果存在多个行，则为 true；否则为 false。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.Read">
            <summary>
            使 IDataReader 前进到下一条记录。
            </summary>
            <returns>如果存在多个行，则为 true；否则为 false。</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.RecordsAffected">
            <summary>
            通过执行 SQL 语句获取更改、插入或删除的行数。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.Dispose">
            <summary>
            关闭 IDataReader Object。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.FieldCount">
            <summary>
            获取当前行中的列数。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetBoolean(System.Int32)">
            <summary>
            获取指定列的布尔值形式的值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>列的值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetByte(System.Int32)">
            <summary>
            获取指定列的 8 位无符号整数值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定列的 8 位无符号整数值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            从指定的列偏移量将字节流作为数组从给定的缓冲区偏移量开始读入缓冲区。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="fieldOffset">字段中的索引，从该索引位置开始读取操作。</param>
            <param name="buffer">要将字节流读入的缓冲区。</param>
            <param name="bufferoffset">开始读取操作的 buffer 索引。</param>
            <param name="length">要读取的字节数。</param>
            <returns>读取的实际字节数。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetChar(System.Int32)">
            <summary>
            获取指定列的字符值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定列的字符值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            从指定的列偏移量将字符流作为数组从给定的缓冲区偏移量开始读入缓冲区。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <param name="fieldoffset">行中的索引，从该索引位置开始读取操作。</param>
            <param name="buffer">要将字节流读入的缓冲区。</param>
            <param name="bufferoffset">开始读取操作的 buffer 索引。</param>
            <param name="length">要读取的字节数。</param>
            <returns>读取的实际字符数。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetData(System.Int32)">
            <summary>
            获取将在字段指向更多的远程结构化数据时使用的 IDataReader。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>将在字段指向更多的远程结构化数据时使用的 IDataReader。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetDataTypeName(System.Int32)">
            <summary>
            获取指定字段的数据类型信息。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的数据类型信息。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetDateTime(System.Int32)">
            <summary>
            获取指定字段的日期和时间数据值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的日期和时间数据值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetDecimal(System.Int32)">
            <summary>
            获取指定字段的固定位置的数值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的固定位置的数值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetDouble(System.Int32)">
            <summary>
            获取指定字段的双精度浮点数。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的双精度浮点数。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetFieldType(System.Int32)">
            <summary>
            获取与从 GetValue 返回的 Object 类型对应的 Type 信息。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>与从 GetValue 返回的 Object 类型对应的 Type 信息。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetFloat(System.Int32)">
            <summary>
            获取指定字段的单精度浮点数。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的单精度浮点数。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetGuid(System.Int32)">
            <summary>
            返回指定字段的 GUID 值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的 GUID 值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetInt16(System.Int32)">
            <summary>
            获取指定字段的 16 位有符号整数值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的 16 位有符号整数值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetInt32(System.Int32)">
            <summary>
            获取指定字段的 32 位有符号整数值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的 32 位有符号整数值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetInt64(System.Int32)">
            <summary>
            获取指定字段的 64 位有符号整数值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的 64 位有符号整数值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetName(System.Int32)">
            <summary>
            获取要查找的字段的名称。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>字段名称或空字符串 ("")（如果没有返回值）。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetOrdinal(System.String)">
            <summary>
            返回命名字段的索引。
            </summary>
            <param name="name">要查找的字段的名称。</param>
            <returns>命名字段的索引。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetString(System.Int32)">
            <summary>
            获取指定字段的字符串值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>指定字段的字符串值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.GetValue(System.Int32)">
            <summary>
            返回指定字段的值。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>返回时将包含字段值的 Object。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.IsDBNull(System.Int32)">
            <summary>
            返回是否将指定字段设置为空。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>如果将指定的字段设置为 空，则为 true。否则为 false。</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.Item(System.String)">
            <summary>
            获取具有指定名称的列。
            </summary>
            <param name="name">要查找的列的名称。</param>
            <returns>名称指定为 Object 的列。</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmDataReaderBase.Item(System.Int32)">
            <summary>
            获取位于指定索引处的列。
            </summary>
            <param name="i">要查找的字段的索引。</param>
            <returns>作为 Object 位于指定索引处的列。</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase">
            <summary>
            通用实现的事务处理基类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.#ctor">
            <summary>
            当派生类不支持 F （DbProviderFactory）泛型参数时使用此构造函数
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.#ctor(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            当派生类支持 F （DbProviderFactory）泛型参数时使用此参数
            </summary>
            <param name="con">当前可用的数据库连接</param>
            <param name="tran"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.CreateSqlTask">
            <summary>
            创建一个SQL任务实例
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.DbProviderFactory">
            <summary>
            返回对应的数据库对象提供者
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.Insert(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            向数据库插入一笔记录
            </summary>
            <param name="table">要插入操作的表对象</param>
            <param name="inputValues">输入值数组</param>
            <param name="outputValues">输出值数组</param>
            <param name="oid">主键编号</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.ExTableHaveRelitionField">
            <summary>
            返回在非根表的扩展表中，是否需要一个外键来关联上级表。
            </summary>
            <remarks>
            通常的，非根表的扩展表仅需要主键关联主表，然后关联上级表即可，但是根据
            利军的意见，他希望提供外键冗余这种外键。在OLEDBDriver中重载了此属性。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.Update(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair,JieNor.Framework.SuperOrm.Metadata.IColumnValuePair,JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            更新指定表的数据
            </summary>
            <param name="table">要更新数据的表</param>
            <param name="inputValues">输入值数组</param>
            <param name="outputValues">输出值数组</param>
            <param name="oid">要更新的行的主键值</param>
            <param name="originalVersion">原始版本号</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.getPkFileter(System.Object[],System.Data.DbType)">
            <summary>
            获取删除表是主表的KEY值列表，并生成Exists子句
            </summary>
            <param name="oids">主键KEY，>=1条记录</param>
            <param name="dbtype">数据类型，字符或者数字</param>
            <returns>返回EXISTS (select 1 from  table(fn_StrSplit(@FID, ',','1/2')) where fid={0})</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.Delete(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,System.Object[],System.Object[],JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            删除指定表的数据
            </summary>
            <param name="table">要删除数据的表</param>
            <param name="oids">删除数据的编号列表</param>
            <param name="originalVersions">原始版本列表</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.Delete(System.Collections.Generic.IEnumerable{JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable},JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,System.Object[],JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            删除指定一批表的数据，这些表具有父子关系
            </summary>
            <param name="tablesSchema">所有表的Schema</param>
            <param name="rootTable">根表对象</param>
            <param name="rootOids">根表的编号列表</param>
            <param name="option">此操作的选项</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.GetDeleteSql(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable,System.String,System.String)">
            <summary>
            获取主表/从表的删除语句
            </summary>
            <param name="currentTable"></param>
            <param name="tableGroup"></param>
            <param name="spkFilter"></param>
            <returns></returns>
            <remarks>由于DataEntityTable表间关系设计的原因，需要删除的表被关联了两次</remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.SupportsBulkCopy">
            <summary>
            返回驱动是否支持批量处理功能。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.CreateBulkCopyTask(System.String,System.Collections.ObjectModel.ReadOnlyCollection{JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn},System.Data.IDataReader,System.Int32)">
            <summary>
             如果驱动程序支持批量处理，需要重载此方法。
            </summary>
            <param name="tableName">插入的表名称</param>
            <param name="columns">列集合</param>
            <param name="dataReader">数据读取器</param>
            <param name="level">任务的层级。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.Commit">
            <summary>
            提交所有任务
            </summary>
        </member>
        <member name="E:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.CommitAfter">
            <summary>
            当提交事务时，执行自定义的操作.
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.ExecuteSqlTasks(System.Collections.Generic.IList{JieNor.Framework.SuperOrm.Drivers.IDatabaseTask})">
            <summary>
            执行所有批量的任务
            </summary>
            <param name="tasks">所有要执行的任务</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.UseParallel">
            <summary>
            是否可以启用并行执行，默认不启用
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.Rollback">
            <summary>
            回滚当前事务
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.Connection">
            <summary>
            返回对应的数据库连接对象
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.CreateAndOpenConnection(System.Boolean)">
            <summary>
            当使用并行处理时，必须重载此方法用于创建很多的连接
            </summary>
            <returns>新的连接对象</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.IsolationLevel">
            <summary>
            返回当前的事务级别
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.GetConverter(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn)">
            <summary>
            允许派生类为指定的列定义转换器函数
            </summary>
            <param name="col">列对象</param>
            <returns>一个转换器对象，可以将实体中的值转换为数据库希望保存的类型。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.Dispose">
            <summary>
            释放事务的资源
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.OrmTransactionBase.TryAddColumnValuePair(JieNor.Framework.SuperOrm.Metadata.IColumnValuePair[],JieNor.Framework.SuperOrm.Metadata.IColumnValuePair)">
            <summary>如果要添加的列不在数组中，向数组中添加一列</summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.ReadWhere">
            <summary>
            在查询数据时的条件对象
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.ReadWhere.#ctor(System.Object[])">
            <summary>
            通过编号列表构建条件
            </summary>
            <param name="ids"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.ReadWhere.#ctor(System.String)">
            <summary>
            通过Where子句构建条件对象
            </summary>
            <param name="where"></param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.ReadWhere.IsSingleValue">
            <summary>
            返回条件是否是单编号
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.ReadWhere.ReadOids">
            <summary>
            条件中编号列表
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.ReadWhere.WhereSql">
            <summary>
            条件中自定义的Where子句
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.SqlServerBulkCopyTask">
            <summary>
            定义了一个SQL Server实现的批量任务。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.SqlServerBulkCopyTask.#ctor(System.String,System.Collections.ObjectModel.ReadOnlyCollection{JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn},System.Data.IDataReader,System.Int32)">
            <summary>
            构建SqlServerBulkCopyTask实例。
            </summary>
            <param name="tableName">表名称</param>
            <param name="columns">列集合</param>
            <param name="dataReader">数据读取器。</param>
            <param name="level">任务的优先级别</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.SqlServerBulkCopyTask.Execute(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            执行当前任务。
            </summary>
            <param name="con">当前可用的连接对象</param>
            <param name="tran">数据库事务。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.SqlServerBulkCopyTask.GetColumnsFromDatabase(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            获取某个表的所有列名称。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Drivers.SqlTask">
            <summary>
            定义了一个SQL执行任务
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.SqlTask.#ctor">
            <summary>
            派生类需要自定义行为用
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.SqlTask.#ctor(System.Data.IDbCommand)">
            <summary>
            通过传入命令对象构建任务
            </summary>
            <param name="cmd">命令对象</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.SqlTask.Level">
            <summary>
            返回 表的层级，决定执行顺序
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.SqlTask.Command">
            <summary>
            返回与任务关联的命令
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.SqlTask.SQL">
            <summary>
            返回要执行的 SQL 
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.SqlTask.AddParamter(System.String,System.Data.DbType,System.Object,System.String@)">
            <summary>
            向任务中添加参数
            </summary>
            <param name="name">参数名称</param>
            <param name="dbType">数据类型</param>
            <param name="value">值</param>
            <param name="paramterName">返回此参数的表示形式</param>
            <returns>参数对象</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.SqlTask.BuildParamterName(System.String)">
            <summary>
            为命令定义一个参数名称
            </summary>
            <param name="name">参数原始名称</param>
            <returns>新名称，默认是加  @ </returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.SqlTask.AddParamters(System.Object[])">
            <summary>
            一次性添加很多参数
            </summary>
            <param name="paramters">要添加的参数列表</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.SqlTask.ExpectedAffectedCount">
            <summary>
            期望被影响的行数目,默认为不检查期望值(-1)
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Drivers.SqlTask.ShouldCheckAffectedCount">
            <summary>
            是否需要检查任务执行后的影响行数
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Drivers.SqlTask.Execute(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            执行当前任务。
            </summary>
            <param name="con">当前可用的连接对象</param>
            <param name="tran">数据库事务。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.CloneUtils.Clone(JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase)">
            <summary>
            克隆当前实体的数据成为一个新的数据。
            </summary>
            <returns>新的实体对象，将当前的数据复制到了新的实体。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.CloneUtils.TryGetOldProperty(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty@)">
            <summary>
            旧实体里是否有匹配的属性
            </summary>
            <param name="dp"></param>
            <param name="dtOldData"></param>
            <param name="dpOldProperty"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Exceptions.ORMBusinessException">
            <summary>
            ORM业务异常类，仅提示，不显示异常
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.ORMBusinessException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.ORMBusinessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            支持反序列化的支持
            </summary>
            <param name="info">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Exceptions.ORMDesignException">
            <summary>
            ORM运行时异常类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.ORMDesignException.#ctor(System.String,System.String)">
            <summary>
            ORM运行时异常类
            </summary>
            <param name="code">异常编号</param>
            <param name="message">异常信息</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.ORMDesignException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            通过传入异常消息和原始异常 实例化 异常对象
            </summary>
            <param name="code">异常编号</param>
            <param name="message">异常消息</param>
            <param name="inner">原始异常</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.ORMDesignException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            支持反序列化的支持
            </summary>
            <param name="info">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Exceptions.ORMArgInvalidException">
            <summary>
            ORM参数不合法异常类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.ORMArgInvalidException.#ctor(System.String,System.String)">
            <summary>
            ORM参数不合法异常类
            </summary>
            <param name="code">异常编号</param>
            <param name="message">异常信息</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.ORMArgInvalidException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            通过传入异常消息和原始异常 实例化 异常对象
            </summary>
            <param name="code">异常编号</param>
            <param name="message">异常消息</param>
            <param name="inner">原始异常</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.ORMArgInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            支持反序列化的支持
            </summary>
            <param name="info">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Exceptions.OrmException">
            <summary>
            ORM异常类基类
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Exceptions.OrmException.Code">
            <summary>
            异常编号
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.OrmException.#ctor(System.String,System.String)">
            <summary>
            ORM异常类基类
            </summary>
            <param name="code">异常编号</param>
            <param name="message">异常信息</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.OrmException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            通过传入异常消息和原始异常 实例化 异常对象
            </summary>
            <param name="code">异常编号</param>
            <param name="message">异常消息</param>
            <param name="inner">原始异常</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.OrmException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            支持反序列化的支持
            </summary>
            <param name="info">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.OrmException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.
            </param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Exceptions.SerializationException">
            <summary>
            在序列化时发生的异常
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.SerializationException.#ctor(System.String,System.String,JieNor.Framework.SuperOrm.Exceptions.SerializationException.SerializationExceptionData)">
            <summary>
            ORM运行时异常类
            </summary>
            <param name="code">异常编号</param>
            <param name="message">异常信息</param>
            <param name="data">序列化出错时的异常数据</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.SerializationException.#ctor(System.String,System.String,JieNor.Framework.SuperOrm.Exceptions.SerializationException.SerializationExceptionData,System.Exception)">
            <summary>
            通过传入异常消息和原始异常 实例化 异常对象
            </summary>
            <param name="code">异常编号</param>
            <param name="message">异常消息</param>
            <param name="data">序列化出错时的异常数据</param>
            <param name="inner">原始异常</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            支持反序列化的支持
            </summary>
            <param name="info">序列化信息</param>
            <param name="context">上下文</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Exceptions.SerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
             When overridden in a derived class, sets the System.Runtime.Serialization.SerializationInfo
                with information about the exception.
            </summary>
            <param name="info">
            The System.Runtime.Serialization.SerializationInfo that holds the serialized
                object data about the exception being thrown.
            </param>
            <param name="context">The System.Runtime.Serialization.StreamingContext that contains contextual
                information about the source or destination.</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Exceptions.SerializationException.ExceptionData">
            <summary>
            返回异常的相关信息
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Exceptions.SerializationException.Message">
            <summary>
            返回自定义的序列化异常消息。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Exceptions.SerializationException.SerializationExceptionData">
            <summary>
            异常发生时的数据信息
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Exceptions.SerializationException.SerializationExceptionData.OnReading">
            <summary>
            返回是否在读取时发生的异常，true表示是读取时（反序列化），false表示是写入时(序列化）
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Exceptions.SerializationException.SerializationExceptionData.CanIgnore">
            <summary>
            返回此错误是否是一个可忽略的异常，true表示可以忽略，程序仍然可以继续，false表示是一个无法忽略的异常，程序无法继续
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Exceptions.SerializationException.SerializationExceptionData.LineNumber">
            <summary>
            返回异常所在的行
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Exceptions.SerializationException.SerializationExceptionData.LinePosition">
            <summary>
            返回异常所在的列
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.IUniqueKeyProvider">
            <summary>
            唯一标识生成器
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.IUniqueKeyProvider.UUID">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.ListSync">
            <summary>
            这是一个列表同步功能的工具类，他能够帮助将一个列表的数据同步到另外一个列表中。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.ListSync.Sync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Action{``0,``1},System.Func{``0,``1},System.Action{System.Collections.Generic.IEnumerable{``1},``1},System.Action{System.Collections.Generic.IEnumerable{``1},``1,System.Int32},System.Boolean)">
            <summary>
            执行列表的同步操作
            </summary>
            <typeparam name="SourceT">源列表的元素类型</typeparam>
            <typeparam name="TargetT">目标列表的元素类型</typeparam>
            <param name="sourceList">源列表</param>
            <param name="targetList">目标列表</param>
            <param name="equatable">
            相等判断的函数，通过传递源列表的元素（第一个参数）和目标列表的元素（第二个参数），判断这两个元素是否相等（返回值）
            </param>
            <param name="updateFunc">
            更新数据的函数，当发现源列表的某个元素与目标的某个元素相等时，调用此函数。第一个参数是源列表的元素，第二个参数是目标列表的元素。
            需要注意的是，如果参数<paramref name="callUpdateFuncWhenCreated"/>为true，默认是true,则在创建<paramref name="createFunc"/>
            目标数据后调用此函数，以便新创建的元素与源元素同步。
            </param>
            <param name="createFunc">
            创建一个目标对象的函数，如果源列表中的某个元素（第一个参数）在目标列表中未找到，将调用此函数希望创建目标对象（返回值）。
            但需要注意的是调用此函数并没有立即将新元素添加到目标列表中，而是先调用<paramref name="updateFunc"/>将新创建的数据与源
            数据同步（如果参数<paramref name="callUpdateFuncWhenCreated"/>为false，默认是true,则不会调用updateFunc)，
            然后调用<paramref name="addFunc"/>添加。
            如果此委托返回值是<typeparamref name="TargetT"/>的默认值，则不会调用<paramref name="addFunc"/>
            </param>
            <param name="addFunc">
            新增目标到集合的函数。当创建新的有效目标对象（第二个参数）后，将调用此委托将其添加到<paramref name="targetList"/>（第一个参数）。
            如果<paramref name="targetList"/>符合IList的泛型接口，可以不给定此委托（传入null或不提供此参数），系统将调用IList接口的add方法将
            其添加到目标列表中。
            </param>
            <param name="removeFunc">
            从目标集合中删除的函数。如果在目标列表（第一个参数）中发现某个元素（第二个参数）在源列表中不存在，将调用此函数要求删除此元素。
            第三个参数是此元素在目标列表中的最初索引位置，注意是原始位置，很可能在运算过程中其他元素的插入或删除影响了其当前实际位置。
            </param>
            <param name="callUpdateFuncWhenCreated">
            当新建项目<paramref name="createFunc"/>后是否再调用更新<paramref name="updateFunc"/>方法，以便方便的将源的数据同步到目标数据中。
            这样新增时就不必重复编写同步代码了。默认为true.
            </param>
            <remarks>
            <para>
            同步数据的基本原理是：
            </para>
            <para>
            源的元素如果在目标列表中存在，将更新目标的数据，否则新增；
            如果目标列表的元素在源列表中不存在，将从目标列表中删除。
            </para>
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.CollectionProperty">
            <summary>
            CLR版本集合属性
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.ComplexProperty">
            <summary>
            复杂属性
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.DataEntityProperty">
            <summary>
            CLR模型的属性元数据实现
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.DataEntityProperty.Ordinal">
            <summary>
            返回属性所在的位置
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.DataEntityType">
            <summary>
            
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.DataEntityType.UUID">
            <summary>
            唯一标识：由表名+所有属性名排序后组成
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.DataEntityType.SetDirty(System.Object,System.Boolean)">
            <summary>
            设置实体全部为脏或不脏
            </summary>
            <param name="dataEntity">要设置的实体对象</param>
            <param name="newValue">treu:全置脏，false：全清脏</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.DataEntityType.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityType#IsAssignableFrom(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            返回指定的参数dt是否允许分配给当前类型
            </summary>
            <param name="dt">要检测的数据类型。</param>
            <returns>如果当前类型是dt的基类或实现的接口的一部分，或等于当前类型，返回true，</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.DataEntityType.ToString">
            <summary>
            返回类型的名称。
            </summary>
            <returns>在CLR实现中，返回的是类的名称。</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.Metadata`1">
            <summary>
            CLR模型的元数据实现
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.Metadata`1.MemberInfo">
            <summary>
            返回CLR模型的描述对象
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.SimpleProperty">
            <summary>
            简单属性基础实现
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.CLR.SimpleProperty.Converter">
            <summary>
            返回此属性的类型转换器
            </summary>
            <remarks>
            此转换器遵循.net标记规范，可以在属性上标记TypeConverterAttribute自定义标记，否则将使用属性返回类型的转换器。
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicCollectionProperty">
            <summary>
            动态实体的集合属性
            集合属性指向另外一个实体类型的引用，所不同的是集合属性表达主表与明细表的关系时候使用。
            在数据库中，集合属性会保存在明细表中，为一对多的关系。主实体与集合属性的关联主键使用主实体的主键，即要求明细表的外键名字和主表主键名字相同。
            如系统中的订单主表及明细表分录即使用集合属性来表示
            </summary>
            <example>
            <code>
             //构建一个订单
             DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
             定义SaleOrderID属性，并设置为主键
             saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
             //定义单据明细
             DynamicObjectType saleOrderItemType = new DynamicObjectType("SaleOrderItem");
             saleOrderItemType.RegisterSimpleProperty("SaleOrderItemID", typeof(int), 0, false, new SimplePropertyAttribute(true));
             //产品
             saleOrderItemType.RegisterSimpleProperty("ProductID", typeof(int));
             //注册集合属性
             DynamicProperty ItemsProperty = saleOrderType.RegisterCollectionProperty("Items", saleOrderItemType);
             //集合属性的读取和设置  
             DynamicObject obj = new DynamicObject(saleOrderType);
             //添加数据 
             IList list = (IList)ItemsProperty.GetValue(people);  //取得分录集合 
             list.Add(ItemsProperty.CollectionItemPropertyType.CreateInstance()); //集合操作，添加数据
             object aItem = list[0];
             IDataEntityType aItemType = aItem.CollectionItemPropertyType;  //取到第一个分录
             ((ISimpleProperty)aItemType.Properties["ProductID"]).SetValue(items[0], 2);  //赋值
            </code>
            </example>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicCollectionProperty.#ctor(System.String,System.Type,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,System.Object[])">
            <summary>
            动态集合属性构造函数
            </summary>
            <param name="name">属性名称</param>
            <param name="propertyType">属性类型</param>
            <param name="dynamicItemPropertyType">属性动态实体属性类型</param>
            <param name="attributes">扩展属性</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicCollectionProperty.DynamicCollectionItemPropertyType">
            <summary>
            返回集合属性的元素数据类型
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicCollectionProperty.CreatePropertyDescriptor">
            <summary>
            返回集合可绑定支持的属性描述符
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicCollectionProperty.CreateHashCode">
            <summary>
            根据元数据创建HashCode
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicCollectionProperty.Equals(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            判断相等
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.CollectionPropertyGetValueCallback">
            <summary>
            集合属性延迟创建策略（仅只读属性时含有）
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicComplexProperty">
            <summary>
            动态实体复杂属性
            复杂属性指向另外一个实体类型的引用，以一个字段保存一个整体段信息。
            如系统中常用的中繁英文三个字段则可整体定义为复杂属性，整个系统可共用这个类型。
            注意的是数据库中复杂属性字段与主字段在同一个表中，对于保存到另一表中的情况，使用引用属性ReferenceAttribute.
            </summary>
            <example>
            <code>
            //构建一个订单
            DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
            定义SaleOrderID属性，并设置为主键
            saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
            //注册复杂属性
            DynamicObjectType cpxType = new DynamicObjectType("CPX");
            DynamicProperty TelProperty = cpxType.RegisterSimpleProperty("Tel", typeof(string));
            DynamicProperty cpxProperty = saleOrderType.RegisterComplexProperty("ComplexProperty", cpxType); //默认只读
            //复杂属性的读取和设置
            DynamicObject obj = new DynamicObject(saleOrderType);
            DynamicObject cpxValue = (DynamicObject)cpxProperty.GetValue(obj);
            TelProperty.SetValue(cpxValue, "2008"); 
            </code>
            </example>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicComplexProperty.#ctor(System.String,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,System.Object[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="dynamicPropertyType">动态实体属性类型</param>
            <param name="attributes">扩展属性</param>
            <param name="isReadonly">是否只读</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicComplexProperty.DynamicComplexPropertyType">
            <summary>
            返回复杂属性的属性返回类型
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicComplexProperty.CreateHashCode">
            <summary>
            根据元数据创建HashCode
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicComplexProperty.Equals(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            判断相等
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.ComplexPropertyGetValueCallback">
            <summary>
            复杂属性延迟创建策略（仅只读属性时含有）
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicMetadata">
            <summary>
            定义动态实体架构的基础元数据对象
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicMetadata.#ctor">
            <summary>
            创建 DynamicMetadata 实例，仅派生类可以调用
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicMetadata.Name">
            <summary>
            返回此元数据对象的名称
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicMetadata.GetCustomAttributes(System.Boolean)">
            <summary>
            返回此元数据上定义的所有Attribute
            </summary>
            <param name="inherit">是否搜索基类的数据</param>
            <returns>所有检索到得Attribute</returns>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicMetadata.EmptyAttributes">
            <summary>
            空标记
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicMetadata.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            返回此元数据上定义的指定类型的Attribute
            </summary>
            <param name="attributeType">要检索的元数据类型</param>
            <param name="inherit">是否搜索基类的数据</param>
            <returns>所有检索的Attribute</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicMetadata.IsDefined(System.Type,System.Boolean)">
            <summary>
            返回是否存在指定类型的Attribute
            </summary>
            <param name="attributeType">要检索的元数据类型</param>
            <param name="inherit">是否搜索基类的数据</param>
            <returns>只要搜索到第一个此类型的Attribute，那么就返回true，否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicMetadata.Equals(System.Object)">
            <summary>
            判断元数据实例是否和另外的实例相等
            </summary>
            <param name="obj">要判断的对象</param>
            <returns>派生类必须重载此方法来判断实例是否相等。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicMetadata.GetHashCode">
            <summary>
            必须重载此方法获取新的hashCode
            </summary>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyChangedEventArgs">
            <summary>
            动态属性发生改变后发生的事件参数
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyChangedEventArgs.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty)">
            <summary>
            创建 DataEntityPropertyChangedEventArgs 实例
            </summary>
            <param name="property">发生改变事件的属性</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyChangedEventArgs.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty,System.Boolean)">
            <summary>
            创建 DataEntityPropertyChangedEventArgs 实例
            </summary>
            <param name="property">发生改变事件的属性</param>
            <param name="isErrorRaise">造成此次属性改变事件是否是由于设置了错误信息造成的。</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyChangedEventArgs.Property">
            <summary>
            返回发生改变事件的属性
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyChangedEventArgs.IsErrorRaise">
            <summary>
            返回造成此次属性改变事件是否是由于设置了错误信息造成的。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType">
             <summary>
             DynamicObjectType允许在运行时动态构建一个实体类型，而不需要在设计时预先定义好实体类型。
             </summary>
             <remarks>
             <example>
             以下为使用构造函数动态构造定义实体类的例子
             <code>
            public sealed class DynamicICStockBill //库存表
            {
                public static readonly DynamicProperty FBrNoProperty;
                public static readonly DynamicProperty FInterIDProperty;
                public static readonly DynamicProperty FTranTypeProperty;
                public static readonly DynamicProperty FDateProperty;
                public static readonly DynamicObjectType ICStockBillType;
                static DynamicICStockBill()
                {
                    DynamicObjectType dt = new DynamicObjectType("ICStockBill");
                    FBrNoProperty = dt.RegisterSimpleProperty("FBrNo", typeof(System.String));
                    FInterIDProperty = dt.RegisterSimpleProperty("FInterID", typeof(System.Int32), 0, false, new SimplePropertyAttribute(true));
                    FTranTypeProperty = dt.RegisterSimpleProperty("FTranType", typeof(System.Int16));
                    CollectionPropertyAttribute colAtt = new CollectionPropertyAttribute();
                    colAtt.Alias = "ICStockBillEntry";
                    DetailsProperty = dt.RegisterCollectionProperty("Details", DynamicICStockBillEntry.ICStockBillEntryType, null, colAtt);
                    ICStockBillType = dt;
                }
            }
            
            public sealed class DynamicICStockBillEntry  //库存明细表
            {
                public static readonly DynamicProperty FBrNoProperty;
                public static readonly DynamicProperty FEntryIDProperty;
                public static readonly DynamicProperty FItemIDProperty;
                public static readonly DynamicProperty FQtyMustProperty;
                public static readonly DynamicObjectType ICStockBillEntryType;
            
               static DynamicICStockBillEntry()
                {
                    DynamicObjectType dt = new DynamicObjectType("ICStockBillEntry");
                    FBrNoProperty = dt.RegisterSimpleProperty("FBrNo", typeof(System.String));
                    FEntryIDProperty = dt.RegisterSimpleProperty("FEntryID", typeof(System.Int32), 0, false, new SimplePropertyAttribute(true));
                    FItemIDProperty = dt.RegisterSimpleProperty("FItemID", typeof(System.Int32));
                    ICStockBillEntryType = dt;
                }
             
             IDataEntityType dataEntityType  = DynamicICStockBill.ICStockBillType;
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.#ctor(System.String,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,System.Type,JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityTypeFlag,System.Object[])">
            <summary>
            动态实体类型定义类,ORM所有的实体类型最终都会转化为动态类型,所不同的只是各个实体的字段属性不一样
            通过统一的动态类型,可以实现多个元数据模型统一基类,是平台动态编程、客户自定义开发可扩展的基础.
            </summary>
            <example>
            <code>
            构建一个订单
            DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
            定义SaleOrderID属性，并设置为主键
            saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
            单据日期
            saleOrderType.RegisterSimpleProperty("SheetDate", typeof(DateTime));
            //创建实例
            DynamicObject obj = new DynamicObject(saleOrderType);
            //访问值
            SaleOrderIDProperty.GetValue(obj); 
            //设置值
            SaleOrderIDProperty.SetValue(obj, 99);
            //继承,动态类型可以通过参数baseType实现继承
            DynamicObjectType myOrderType = new DynamicObjectType("SaleOrder",saleOrderType);  //继承saleOrderType
            //接口的定义及注册
            <see cref="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.RegisterInterface(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">RegisterInterface</see>
            saleOrderType.RegisterInterface(INamedEntity.NamedInterfaceType);
            //接口定义
             private static class INamedEntity
            {
               public static readonly DynamicObjectType NamedInterfaceType;
                public static readonly DynamicProperty NameProperty;
                static INamedEntity()
                {
                    NamedInterfaceType = new DynamicObjectType("INamedEntity");
                    NameProperty = NamedInterfaceType.RegisterProperty("Name", typeof(string));
                }
             }
            </code>
            </example>
            <param name="name">动态实体类型名称</param>
            <param name="baseType">基类</param>
            <param name="dataEntityType">动态实体类型</param>
            <param name="flag">实体的特征标志位，默认是类Class</param>
            <param name="attributes">自定义的标记(TODO-具体attributes)</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            提供自定义反序列化的构造函数
            </summary>
            <param name="info">序列化信息</param>
            <param name="context">序列化上下文</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.BaseType">
            <summary>
            返回此实体的基类
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.Name">
            <summary>
            返回实体类型的名称
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.ExtendName">
            <summary>
            扩展名称；类型名称与各属性名合并组成的字符串；
            以此快速比对两个类型是否一致，作为缓存Region标识
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.IsValidIdentifier(System.String)">
            <summary>
            验证名称是否正确。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.ClrType">
            <summary>
            返回此动态实体最终创建后实体对应的CLR类型，默认情况下是DynamicObject
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.GetCustomAttributes(System.Boolean)">
            <summary>
            获取扩展属性
            </summary>
            <param name="inherit">是否继承</param>
            <returns></returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.Properties">
            <summary>
            返回所有的属性
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.RegisterProperty(System.String,System.Type,System.Object,System.Boolean,System.Object[])">
            <summary>
            注册一个普通属性，此属性不参与ORM的分析过程
            仅供内部使用，外部请使用RegisterSimpleProperty
            </summary>
            <param name="name">属性的名称，不能为空</param>
            <param name="propertyType">属性的返回类型</param>
            <param name="defaultValue">缺省值，如果未设置，其为返回数据类型的默认值</param>
            <param name="isReadonly">此属性是否只读</param>
            <param name="attributes">自定义的标记</param>
            <returns>新定义的属性对象</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.RegisterSimpleProperty(System.String,System.Type,System.Object,System.Boolean,System.Object[])">
            <summary>
            注册一个简单属性，此属性参与ORM的处理
            简单属性对应数据库中最基本的类型,包括(整型、字符、浮点型、日期等)
            </summary>
            <example>
            <code>
            构建一个订单
            DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
            定义SaleOrderID属性，并设置为主键
            SaleOrderIDProperty = saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
            //单据日期
            DynamicProperty SheetDateProperty = saleOrderType.RegisterProperty("SheetDate", typeof(DateTime),new DateTime(2009,9,1));
            //简单属性的读取和设置
            DynamicObject obj = new DynamicObject(saleOrderType);
            SaleOrderIDProperty.GetValue(obj); //缺省值0
            SheetDateProperty.GetValue(obj); //缺省值
            SaleOrderIDProperty.SetValue(obj, 99);
            </code>
            </example>
            <param name="name">属性的名称，不能为空</param>
            <param name="propertyType">属性的返回类型</param>
            <param name="defaultValue">缺省值，如果未设置，其为返回数据类型的默认值</param>
            <param name="isReadonly">此属性是否只读</param>
            <param name="attributes">自定义的标记</param>
            <returns>新定义的属性对象</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.RegisterComplexProperty(System.String,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,System.Boolean,System.Object[])">
            <summary>
            注册一个复杂属性
            复杂属性指向另外一个实体类型的引用，以一个属性保存一个整体段信息。
            如系统中常用的中繁英文三个字段则可整体定义为复杂属性，整个系统可共用这个类型。
            注意的是数据库中复杂属性字段与主字段在同一个表中，对于保存到另一表中的情况，使用引用属性ReferenceAttribute.
            </summary>
            <example>
            <code>
            //构建一个订单
            DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
            定义SaleOrderID属性，并设置为主键
            saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
            //注册复杂属性
            DynamicObjectType cpxType = new DynamicObjectType("CPX");
            DynamicProperty TelProperty = cpxType.RegisterSimpleProperty("Tel", typeof(string));
            DynamicProperty cpxProperty = saleOrderType.RegisterComplexProperty("ComplexProperty", cpxType); //默认只读
            //复杂属性的读取和设置
            DynamicObject obj = new DynamicObject(saleOrderType);
            DynamicObject cpxValue = (DynamicObject)cpxProperty.GetValue(obj);
            TelProperty.SetValue(cpxValue, "2008"); 
            </code>
            </example>
            <param name="name">属性的名称</param>
            <param name="dataEntityType">注册的复杂属性返回类型</param>
            <param name="isReadonly">此属性是否只读</param>
            <param name="attributes">自定义标签集</param>
            <returns>新定义的属性定义</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.RegisterCollectionProperty(System.String,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,System.Type,System.Object[])">
            <summary>
            注册一个集合属性
            集合属性和复杂属性一样也是指向另外一个实体类型的引用，所不同的是集合属性表达主表与明细表的关系时候使用。
            在数据库中，集合属性会保存在明细表中，为一对多的关系。主实体与集合属性的关联主键使用主实体的主键，即要求明细表的外键名字和主表主键名字相同。
            如系统中的订单主表及明细表分录即使用集合属性来表示
            </summary>
            <example>
            <code>
             //构建一个订单
             DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
             定义SaleOrderID属性，并设置为主键
             saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
             //定义单据明细
             DynamicObjectType saleOrderItemType = new DynamicObjectType("SaleOrderItem");
             saleOrderItemType.RegisterSimpleProperty("SaleOrderItemID", typeof(int), 0, false, new SimplePropertyAttribute(true));
             //产品
             saleOrderItemType.RegisterSimpleProperty("ProductID", typeof(int));
             //注册集合属性
             DynamicProperty ItemsProperty = saleOrderType.RegisterCollectionProperty("Items", saleOrderItemType);
             //集合属性的读取和设置  
             DynamicObject obj = new DynamicObject(saleOrderType);
             //添加数据 
             IList list = (IList)ItemsProperty.GetValue(people);  //取得分录集合 
             list.Add(ItemsProperty.CollectionItemPropertyType.CreateInstance()); //集合操作，添加数据
             object aItem = list[0];
             IDataEntityType aItemType = aItem.CollectionItemPropertyType;  //取到第一个分录
             ((ISimpleProperty)aItemType.Properties["ProductID"]).SetValue(items[0], 2);  //赋值
            </code>
            </example>
            <param name="name">属性的名称</param>
            <param name="itemDataEntityType">集合中元素的类型</param>
            <param name="collectionType">集合本省的属性类型，默认是typeof(DynamicObjectCollection)</param>
            <param name="attributes">自定义标记集合</param>
            <returns>新定义的属性</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.RegisterInterface(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            注册接口，使当前类型支持新的接口
            接口为实体同一性质特性的抽象,通过抽象同一特性可以面向接口编程,达到编写动态代码的作用.
            通俗地说就是各种各样的实体,他们的字段各异,类型都是DynamicObjectType,写通用代码时就不能判断实体是否属于某一类实体.
            例如我们要对某个单据实体进行审核,首先我们要知道该单据是否支持审核流程,而且该单据上要有审核需要的共同字段.
            此时我们就需要给该单据注册审核接口,通过判断是否注册了审核接口,然后再取去接口,对接口进行编程,则达到了动态代码的效果.
            同一个实体可以注册多个接口,这里要求各个接口的字段和实体的字段不能重复.(!!!实际上会有重复的情况很多,这里是不是要改造????)
            同时接口还可以继承.
            </summary>
            <example>
            <code>
             //构建一个订单
             DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
             定义SaleOrderID属性，并设置为主键
             saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
            //接口的定义及注册
            <see cref="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.RegisterInterface(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)" />
            saleOrderType.RegisterInterface(INamedEntity.NamedInterfaceType);
            //接口定义
             private static class INamedEntity
            {
               public static readonly DynamicObjectType NamedInterfaceType;
                public static readonly DynamicProperty NameProperty;
                static INamedEntity()
                {
                    NamedInterfaceType = new DynamicObjectType("INamedEntity");
                    NameProperty = NamedInterfaceType.RegisterProperty("Name", typeof(string));
                }
             }
             //创建实例
             DynamicObject obj = new DynamicObject(saleOrderType);
             //获取实体实现了哪些接口
             obj.GetInterfaces()
             //判断是否注册有某个接口
             ???????????????????
             // 接口的读取和设置
             INamedEntity.NameProperty.SetValue(obj, 3);
             INamedEntity.NameProperty.GetValue(obj);
             //接口的继承
             //继承INamedEntity
             private static class IFullNameEntity
             {
                 public static readonly DynamicObjectType FullNameInterfaceType;
                 public static readonly DynamicProperty FullNameProperty;
                 static IFullNameEntity()
                 {
                     FullNameInterfaceType = new DynamicObjectType("IFullNameEntity", INamedEntity.NamedInterfaceType);
                     FullNameProperty = FullNameInterfaceType.RegisterProperty("FullName", typeof(string));
                 }
             }
            </code>
            </example>
            <param name="interfaceType">新接口名称</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.GetInterfaces">
            <summary>
            获取此类型实现了哪些接口
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.IsAssignableFrom(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            判断是否继承于指定类型
            </summary>
            <param name="c">与之判断的类型</param>
            <returns>是继承关系返回true,否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.OverrideComplexProperty(System.String,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            重载复杂属性
            </summary>
            <param name="name">新的名字</param>
            <param name="newDataEntityType">被重载的类型</param>
            <returns>返回新的属性</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.OverrideCollectionProperty(System.String,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            重载集合属性
            </summary>
            <param name="name">新的名字</param>
            <param name="newItemDataEntityType">被重载的类型</param>
            <returns>返回新的属性</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.CreateInstance">
            <summary>
            使用当前类型创建一个动态实体的实例
            </summary>
            <returns>新的动态实体实例</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.ToString">
            <summary>
            返回类型的名称。
            </summary>
            <returns>在动态实体实现中，返回的是Name值。</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.Flag">
            <summary>
            返回此实体类型特征，可选值包括：Class(缺省)、Abstract、Sealed、Interface
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityType#IsDirty(System.Object)">
            <summary>
            判断实体是否为脏
            </summary>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityType#GetDirtyProperties(System.Object)">
            <summary>
            获取实体脏属性
            </summary>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityType#GetDirtyProperties(System.Object,System.Boolean)">
            <summary>
            获取实体脏属性
            </summary>
            <param name="dataEntity"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityType#SetDirty(System.Object,System.Boolean)">
            <summary>
            修改实体的脏标志
            </summary>
            <param name="dataEntity">要修改的实体实例</param>
            <param name="newValue">新的脏标志值。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityType#GetPkSnapshot(System.Object)">
            <summary>
            获取实体快照
            </summary>
            <param name="dataEntity">要处理的实体实例</param>
            <returns>返回实体的快照对象。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityType#SetPkSnapshot(System.Object,JieNor.Framework.SuperOrm.DataEntity.PkSnapshotSet)">
            <summary>
            设置实体快照
            </summary>
            <param name="dataEntity">要处理的实体实例</param>
            <param name="pkSnapshotSet">新的快照实例。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityType#SetFromDatabase(System.Object)">
            <summary>
            设置一个实体是从数据库加载而来，当读取或保存完毕后，调用此方法
            </summary>
            <param name="dataEntity">要设置的实体</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityType#IsAssignableFrom(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            返回指定的参数dt是否允许分配给当前类型
            </summary>
            <param name="dt">要检测的数据类型。</param>
            <returns>如果当前类型是dt的基类或实现的接口的一部分，或等于当前类型，返回true，</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.UUID">
            <summary>
            动态实体类型的唯一标识
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.Extract(JieNor.Framework.SuperOrm.Metadata.DataEntity.ExtractOption)">
            <summary>
            从当前实体定义中提取一个精简版本
            </summary>
            <param name="option">提取选项</param>
            <returns>新提取出来的实体定义</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用将目标对象序列化所需的数据填充 SerializationInfo。
            </summary>
            <param name="info">要填充数据的 SerializationInfo。</param>
            <param name="context">此序列化的目标</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.OnDeserialization(System.Object)">
            <summary>
            当发生反序列化结束后调用
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.GetHashCode">
            <summary>
            通过分析所有元数据信息创建新的HashCode
            </summary>
            <returns>一个元数据创建出的HashCode</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.CreateHashCode">
            <summary>
            根据元数据创建HashCode
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.Equals(System.Object)">
            <summary>
            判断两个实体结构，其名称、类型及基类等信息，来判断是否相等。
            </summary>
            <param name="obj">要判断相等的元素</param>
            <returns>如果两个实体结构，其名称、类型及基类等信息相等，那么就相等。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.Equals(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            判断两个属性描述符，其名称、返回类型及位置等信息，来判断是否相等。
            </summary>
            <param name="obj">要判断相等的元素</param>
            <returns>如果两个属性描述符，其名称、返回类型及位置等信息相等，那么属性描述符就相等。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.Equals(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            判断两个动态实体类型是否相等。
            </summary>
            <param name="a">判断相等的左边</param>
            <param name="b">判断相等的右边</param>
            <returns>两个实体</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.SetDirtyFlags(System.Object,System.String)">
            <summary>
            设置实体脏标志
            </summary>
            <param name="dataEntity"></param>
            <param name="dirtyFlags"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.op_Equality(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            相等运算符的处理
            </summary>
            <param name="a">判断相等的左</param>
            <param name="b">判断相等的右</param>
            <returns>两个动态实体定义是否相等</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType.op_Inequality(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectType)">
            <summary>
            不相等运算符的处理
            </summary>
            <param name="a">判断不相等的左</param>
            <param name="b">判断不相等的右</param>
            <returns>两个动态实体定义是否不相等</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicObjectTypeDescriptor">
            <summary>
            DynamicObject的类型描述符，支持微软设计器需要
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty">
            <summary>
            动态属性的基类,对实体字段值的操作是通过它来完成的.
            </summary>
            <example>
            <code>
            //注册一个动态属性
            DynamicProperty SheetDateProperty = saleOrderType.RegisterProperty("SheetDate", typeof(DateTime),new DateTime(2009,9,1));
            //对动态属性读取和设置
            DynamicObject obj = new DynamicObject(saleOrderType);
            SaleOrderIDProperty.GetValue(obj); //缺省值0
            SheetDateProperty.GetValue(obj); //缺省值
            SaleOrderIDProperty.SetValue(obj, 99);
            </code>
            </example>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.#ctor(System.String,System.Type,System.Object,System.Object[],System.Boolean)">
            <summary>
            仅允许派生类创建实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            为Clone功能准备的构造函数
            </summary>
            <param name="clone">要被克隆的对象</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.IsValidIdentifier(System.String)">
            <summary>
            验证名称是否正确。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.GetDefaultGetSetValueCallback(JieNor.Framework.SuperOrm.Metadata.DataEntity.GetValueCallbackDelegate@,JieNor.Framework.SuperOrm.Metadata.DataEntity.SetValueCallbackDelegate@)">
            <summary>
            返回一个缺省的
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.BuildGetSetCallback(JieNor.Framework.SuperOrm.Metadata.DataEntity.GetValueCallbackDelegate@,JieNor.Framework.SuperOrm.Metadata.DataEntity.SetValueCallbackDelegate@)">
            <summary>
            创建此属性描述符的读取、写入句柄。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.InitializeGetValueCallback(System.Collections.Generic.IList{JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyGetValueCallback})">
            <summary>
            初始化GetValue调用句柄
            </summary>
            <param name="handlers">当前默认的句柄，可以操控此句柄。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.InitializeSetValueCallback(System.Collections.Generic.IList{JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertySetValueCallback})">
            <summary>
            初始化SetValue调用句柄
            </summary>
            <param name="handlers">当前默认的句柄。</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.Name">
            <summary>
            返回此元数据对象的名称
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.GetCustomAttributes(System.Boolean)">
            <summary>
            返回此元数据上定义的所有Attribute
            </summary>
            <param name="inherit">是否搜索基类的数据</param>
            <returns>所有检索到得Attribute</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.PropertyType">
            <summary>
            返回属性的返回类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.DefaultValue">
            <summary>
            返回此属性的缺省值
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.IsReadOnly">
            <summary>
            返回是否只读
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.Ordinal">
            <summary>
            返回此属性在所在DynamicObjectType上的位置（内部使用，请慎重处理）
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.ReflectedType">
            <summary>
            返回此属性被引用的类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.PropertyDescriptor">
            <summary>
            获取属性描述符
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.CreatePropertyDescriptor">
            <summary>
            允许重载此方法创建不同的属性描述符
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.GetValueFast(JieNor.Framework.SuperOrm.DataEntity.DynamicObject)">
            <summary>
            从实体中快速检索当前属性的值,在确定dataEntity实体类型和此属性对应实体类型一致时采用此方法
            </summary>
            <param name="dataEntity">要检索的实体对象</param>
            <returns>此实体中此属性的值</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.GetValue(JieNor.Framework.SuperOrm.DataEntity.DynamicObject)">
            <summary>
            从实体中检索当前属性的值
            </summary>
            <param name="dataEntity">要检索的实体对象</param>
            <returns>此实体中此属性的值</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.GetValue``1(JieNor.Framework.SuperOrm.DataEntity.DynamicObject)">
            <summary>
            从实体中检索当前属性的值并直接返回指定类型
            </summary>
            <typeparam name="T">返回值的类型</typeparam>
            <param name="dataEntity">要检索的实体对象</param>
            <returns>此实体中此属性的值</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityProperty#GetValue(System.Object)">
            <summary>
            给定一个实体，读取此属性描述符在此实体的值
            </summary>
            <param name="dataEntity">要读取属性值的实体实例，不能为空</param>
            <returns>最后取得的值</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.JieNor#Framework#SuperOrm#Metadata#DataEntity#IDataEntityProperty#GetValueFast(System.Object)">
            <summary>
            给定一个实体，读取此属性描述符在此实体的值
            </summary>
            <param name="dataEntity">要读取属性值的实体实例，不能为空</param>
            <returns>最后取得的值</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.SetValue(JieNor.Framework.SuperOrm.DataEntity.DynamicObject,System.Object)">
            <summary>
            设置动态实体的值
            </summary>
            <param name="dataEntity">要设置的动态实体实例</param>
            <param name="newValue">此属性新的值</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.SetValueFast(JieNor.Framework.SuperOrm.DataEntity.DynamicObject,System.Object)">
            <summary>
            设置动态实体的值,在确定dataEntity实体类型和此属性对应实体类型一致时采用此方法
            </summary>
            <param name="dataEntity">要设置的动态实体实例</param>
            <param name="newValue">此属性新的值</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.ResetValue(JieNor.Framework.SuperOrm.DataEntity.DynamicObject)">
            <summary>
            重置动态实体的值
            </summary>
            <param name="dataEntity">要重置的实体</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.Clone">
            <summary>
            返回动态属性的克隆
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.GetHashCode">
            <summary>
            通过分析所有元数据信息创建新的HashCode
            </summary>
            <returns>一个元数据创建出的HashCode</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.CreateHashCode">
            <summary>
            根据元数据创建HashCode
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.Equals(System.Object)">
            <summary>
            判断两个属性描述符，其名称、返回类型及位置等信息，来判断是否相等。
            </summary>
            <param name="obj">要判断相等的元素</param>
            <returns>如果两个属性描述符，其名称、返回类型及位置等信息相等，那么属性描述符就相等。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty.Equals(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            判断两个属性描述符，其名称、返回类型及位置等信息，来判断是否相等。
            </summary>
            <param name="obj">要判断相等的元素</param>
            <returns>如果两个属性描述符，其名称、返回类型及位置等信息相等，那么属性描述符就相等。</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyCollection">
            <summary>
            动态属性的集合类型。允许按名称检索
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyCollection.GetKeyForItem(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            获取某个动态属性对象额名称。
            </summary>
            <param name="item">动态属性对象</param>
            <returns>动态属性的名称。</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyCollection.Comparer">
            <summary>
            屬性不區分大小寫。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyCollection.ReflectedType">
            <summary>
            返回此属性被引用的类型
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.GetValueCallbackDelegate">
            <summary>
            从动态对象中获取值的取值回调
            </summary>
            <param name="obj">要获取值的实体</param>
            <param name="property">属性</param>
            <returns>最终的值</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.SetValueCallbackDelegate">
            <summary>
            设置动态对象的值
            </summary>
            <param name="obj">要设置值的实体</param>
            <param name="property">属性</param>
            <param name="oldValue">原先的值</param>
            <param name="newValue">新的值</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyGetValueCallback">
            <summary>
            取值策略实现工具
            </summary>
            <remarks>
            取值优先级
            -100      公式值
            0         本地值
            100       环境值
            200       延迟创建
            int.MaxValue     默认值
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyGetValueCallback.#ctor">
            <summary>
            创建 DynamicPropertyGetValueCallback 实例，仅派生类调用
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyGetValueCallback.GetValue(JieNor.Framework.SuperOrm.DataEntity.DynamicObject,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            派生类重载此方法，定义自己的获取值策略
            </summary>
            <param name="obj">要获取值的动态实体</param>
            <param name="property">要获取值的属性</param>
            <returns>具体的值</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyGetValueCallback.NextHandler">
            <summary>
            某个GetValue回调的下一个步骤
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyGetValueCallback.Priority">
            <summary>
            返回取值策略的优先级
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertyGetValueCallback.GetDataStorage(JieNor.Framework.SuperOrm.DataEntity.DynamicObject)">
            <summary>
            允许派生类访问本地存储器
            </summary>
            <param name="obj">要获取的动态实体</param>
            <returns>本地存储区</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DefaultValueGetValueCallback">
            <summary>
            缺省值策略
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.LocalValueGetValueCallback">
            <summary>
            获取本地值的取值策略
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertySetValueCallback">
            <summary>
            设置值策略实现工具
            </summary>
            <remarks>
            <para>优先级</para>
            int.MinValue    值改变前事件
            -200      数据类型自动转化
            -100      值校正回调（外部实现）
            0         本地值
            int.MaxValue     值更新事件播发
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertySetValueCallback.#ctor">
            <summary>
            派生类创建新的SetValue策略
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertySetValueCallback.SetValue(JieNor.Framework.SuperOrm.DataEntity.DynamicObject,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty,System.Object,System.Object@)">
            <summary>
            设置动态对象的值
            </summary>
            <param name="obj">要设置值的实体</param>
            <param name="property">属性</param>
            <param name="oldValue">原先的值</param>
            <param name="newValue">新的值</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertySetValueCallback.NextHandler">
            <summary>
            某个SetValue回调的下一个步骤
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertySetValueCallback.Priority">
            <summary>
            返回设置值策略的优先级
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicPropertySetValueCallback.GetDataStorage(JieNor.Framework.SuperOrm.DataEntity.DynamicObject)">
            <summary>
            允许派生类访问本地存储器
            </summary>
            <param name="obj">要获取的动态实体</param>
            <returns>本地存储区</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor">
            <summary>
            为DynamicProperty提供微软设计器规范的属性描述符
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            返回是否允许调用Reset操作
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor.GetValue(System.Object)">
            <summary>
            返回组件的值
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            设置组件的值
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            是否需要保存实体中当前属性的值
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            重置实体中当前属性的值
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor.IsReadOnly">
            <summary>
            返回当前属性是否是只读的
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor.ComponentType">
            <summary>
            返回组件类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor.PropertyType">
            <summary>
            返回属性的返回类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityPropertyDescriptor.DataEntityProperty">
            <summary>
            返回 当前属性描述符对应的Orm属性
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicCollectionPropertyDescriptor">
            <summary>
            为集合属性创建的属性描述符
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicCollectionPropertyDescriptor.GetValue(System.Object)">
            <summary>
            重载了基类的返回值，使其返回可以绑定的对象
            </summary>
            <param name="component">动态对象</param>
            <returns>如果支持IListSource，将返回可以绑定的对象</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicCollectionPropertyDescriptor.PropertyType">
            <summary>
            返回可以绑定的类型
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicSimpleProperty">
            <summary>
            简单属性，此属性参与ORM的处理
            简单属性对应数据库中最基本的类型,包括(整型、字符、浮点型、日期等)
            简单属性通过设置ableGroup提供当表有太多的字段,拆分到另外的表中
            <example>
            <code>
            构建一个订单
            DynamicObjectType saleOrderType = new DynamicObjectType("SaleOrder");
            定义SaleOrderID属性，并设置为主键
            SaleOrderIDProperty = saleOrderType.RegisterSimpleProperty("SaleOrderID", typeof(int), 0, false, new SimplePropertyAttribute(true));
            //单据日期
            DynamicProperty SheetDateProperty = saleOrderType.RegisterProperty("SheetDate", typeof(DateTime),new DateTime(2009,9,1));
            //简单属性的读取和设置
            DynamicObject obj = new DynamicObject(saleOrderType);
            SaleOrderIDProperty.GetValue(obj); //缺省值0
            SheetDateProperty.GetValue(obj); //缺省值
            SaleOrderIDProperty.SetValue(obj, 99);
            </code>
            </example>
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicSimpleProperty.#ctor(System.String,System.Type,System.Object,System.Object[],System.Boolean)">
            <summary>
            内部创建实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicSimpleProperty.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicSimpleProperty)">
            <summary>
            为Clone功能准备的构造函数
            </summary>
            <param name="clone">要被克隆的对象</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicSimpleProperty.Converter">
            <summary>
            返回此属性的类型转换器
            </summary>
            <remarks>
            此转换器遵循.net标记规范，可以在属性上标记TypeConverterAttribute自定义标记，否则将使用属性返回类型的转换器。
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.ExtractOption">
            <summary>
            从一个动态实体定义中提取字段的选项
            </summary>
            <remarks>
            需要注意的是，未注册提取的实体类型将按源类型原封不动。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.ExtractOption.Register(System.String,System.String[])">
            <summary>
            注册提取的属性信息。包括实体类型名称及你需要提取的属性列表
            </summary>
            <param name="dtName">要提取的实体类型名称，比如你可以定义明细名称</param>
            <param name="properties">要提取的属性列表，要提取明细的数据也需要包括在内</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.ExtractOption.GetExtractedProperties(System.String)">
            <summary>
            返回指定类型应提取的属性列表
            </summary>
            <param name="dtName">要提取的类型名称</param>
            <returns>最终决定提取的属性列表。如果是null，表示全部提取，不变更。</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.ICollectionProperty">
            <summary>
            描述了集合属性
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.ICollectionProperty.CollectionItemPropertyType">
            <summary>
            返回此集合属性中项目的实体类型
            </summary>
            <remarks>
            例如订单的订单明细属性是个集合属性，那么他的CollectionItemPropertyType将是订单明细对象类型
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityPropertyCollection">
            <summary>
            描述了实体的属性集合
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType">
            <summary>
            定义实体类型的描述
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.CreateInstance">
            <summary>
            创建此实体类型的实例
            </summary>
            <returns></returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.Properties">
            <summary>
            返回所有的属性集合
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.PrimaryKey">
            <summary>
            返回当前实体的主键属性。
            </summary>
            <remarks>
            注意复杂属性可能没有主键
            </remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.Flag">
            <summary>
            返回此实体类型特征，可选值包括：Class(缺省)、Abstract、Sealed、Interface
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.IsDirty(System.Object)">
            <summary>
            返回某个实体数据是否已经发生了变更
            </summary>
            <param name="dataEntity">要检查的实体对象</param>
            <returns>如果当前实体发生了变更将返回ture，否则返回false。注意这里不判断复杂属性和集合属性的变更</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.GetDirtyProperties(System.Object)">
            <summary>
            返回指定实体中所有变更的属性列表
            </summary>
            <param name="dataEntity">要检查的实体</param>
            <returns>变更的属性列表</returns>
            <remarks>
            此方法和<see cref="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty.ShouldSerializeValue(System.Object)"/>完全不同，这里判断的是实体自创建或从数据库读取后，
            发生更改的属性列表。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.GetDirtyProperties(System.Object,System.Boolean)">
            <summary>
            返回指定实体中所有变更的属性列表,包含缺省值的列
            </summary>
            <param name="dataEntity"></param>
            <param name="includehasDefault"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.SetDirty(System.Object,System.Boolean)">
            <summary>
            设置实体全部为脏或不脏
            </summary>
            <param name="dataEntity">要设置的实体对象</param>
            <param name="newValue">treu:全置脏，false：全清脏</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.SetFromDatabase(System.Object)">
            <summary>
            设置一个实体是从数据库加载而来，当读取或保存完毕后，调用此方法
            </summary>
            <param name="dataEntity">要设置的实体</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.GetPkSnapshot(System.Object)">
            <summary>
            返回实体快照
            </summary>
            <param name="dataEntity">要检查的实体</param>
            <returns>快照</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.SetPkSnapshot(System.Object,JieNor.Framework.SuperOrm.DataEntity.PkSnapshotSet)">
            <summary>
            设置实体快照
            </summary>
            <param name="dataEntity">要设置的实体</param>
            <param name="pkSnapshotSet">实际的快照对象</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.SetDirtyFlags(System.Object,System.String)">
            <summary>
            设置实体脏标志
            </summary>
            <param name="dataEntity"></param>
            <param name="dirtyFlags"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.IsAssignableFrom(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            返回指定的参数dt是否允许分配给当前类型
            </summary>
            <param name="dt">要检测的数据类型。</param>
            <returns>如果当前类型是dt的基类或实现的接口的一部分，或等于当前类型，返回true，</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityTypeFlag">
            <summary>
            定义了实体类型的特征，可选值包括：Class(缺省)、Abstract、Sealed、Interface
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityTypeFlag.Class">
            <summary>实体类型是个普通的类，默认</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityTypeFlag.Abstract">
            <summary>实体类型是抽象类</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityTypeFlag.Sealed">
            <summary>实体类型已经封装</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityTypeFlag.Interface">
            <summary>实体类型是一个接口类型</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityTypeFlag.Primitive">
            <summary>实体类型是个基元类型，例如int32，例外string也被规划为基元类型。</summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.DataEntityCacheType">
            <summary>
            实体缓存的类型，可选值包括： 共享型（缺省），隔离型
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.IComplexProperty">
            <summary>
            复杂属性，指向一个复杂结构
            </summary>
            <remarks>例如你可能希望“联系人”实体包含个人联系方式和公司联系方式，而每种联系方式都有很多的子属性，这种情况下你就可以使用复杂属性</remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.IComplexProperty.ComplexPropertyType">
            <summary>
            返回此属性的实体类型，此属性指向一个实体类型
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty">
            <summary>
            描述一个实体的属性对象
            </summary>
            <remarks>在一个实体中包含很多的属性，这些属性都是派生自此接口</remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty.GetValueFast(System.Object)">
            <summary>
            给定一个实体，快速读取此属性描述符在此实体的值，在确定dataEntity实体类型和此属性对应实体类型一致时采用此方法
            </summary>
            <param name="dataEntity">要读取属性值的实体实例，不能为空</param>
            <returns>最后取得的值</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty.SetValueFast(System.Object,System.Object)">
            <summary>
            给定一个实体，为给定实体的属性填充指定的值，在确定dataEntity实体类型和此属性对应实体类型一致时采用此方法
            </summary>
            <param name="dataEntity">要设置值得实体对象</param>
            <param name="value">新的值</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty.GetValue(System.Object)">
            <summary>
            给定一个实体，读取此属性描述符在此实体的值
            </summary>
            <param name="dataEntity">要读取属性值的实体实例，不能为空</param>
            <returns>最后取得的值</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty.SetValue(System.Object,System.Object)">
            <summary>
            为给定实体的属性填充指定的值
            </summary>
            <param name="dataEntity">要设置值得实体对象</param>
            <param name="value">新的值</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty.PropertyType">
            <summary>
            返回此属性的返回类型
            </summary>
            <remarks>
            例如简单属性Age返回int类型，这里指的是调用GetValue返回的类型。所以集合属性返回的是集合的类型，而不是集合中某个项的类型
            </remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty.IsReadOnly">
            <summary>
            返回此属性是否是只读属性
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty.Ordinal">
            <summary>
            返回此属性在引用的实体类型中所在的位置
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty.HasDefaultValue">
            <summary>
            此属性是否有缺省值
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityTypeCollection">
            <summary>
            定义了一组实体类型的只读集合接口，允许按键检索
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.IMetadata">
            <summary>
            元数据基础接口
            </summary>
            <remarks>自描述的元数据对象，是所有元数据接口的基础，派生自此接口的包括IProperty等</remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.IMetadata.Name">
            <summary>
            元数据对象的唯一名称
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty">
            <summary>
            描述了简单属性
            </summary>
            <remarks>简单属性是最基本的属性描述符，此属性具有不可拆解。例如“员工”实体类型具有Age属性。</remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty.ResetValue(System.Object)">
            <summary>
            重置给定实体的属性值
            </summary>
            <rparam name="dataEntity">要重置属性的实体对象。</rparam>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty.ShouldSerializeValue(System.Object)">
            <summary>
            确定实体的属性值是否需要序列化
            </summary>
            <param name="dataEntity">要检查的实体对象</param>
            <returns>如果实体中此属性不是默认的值，且需要保存，将返回true，否则返回false</returns>
            <remarks>
            <para>
            此功能被用于配置文件的序列化，如果一个属性的当前值与原始（这里的原始指对象初始化后直接访问此属性的值）值
            不同，那么此方法返回ture，例如某个配置对象包含Width属性，默认值是200，如果当前值是200，则返回false，否则返回true.
            </para>
            <para>
            他和数据库的应用不同。在数据库保存数据时，并不是用此方法，而是用<see cref="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.GetDirtyProperties(System.Object)"/>，
            例如从数据库获取到一个员工对象，其Age是35岁，而Employee中其Age的默认值是0，调用此方法将返回true（因为和默认值不同了），
            但是，调用<see cref="M:JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType.GetDirtyProperties(System.Object)"/>时，将不包含此Age属性，因为数据并没有修改。这个时候
            如果修改Age为0，那么调用ShouldSerializeValue返回false，而调用GetDirtyProperties将包含Age。
            </para>
            </remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty.IsLocalizable">
            <summary>
            返回此属性值是否需要本地化处理
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty.Converter">
            <summary>
            返回此属性的类型转换器
            </summary>
            <remarks>
            此转换器遵循.net标记规范，可以在属性上标记TypeConverterAttribute自定义标记，否则将使用属性返回类型的转换器。
            </remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.CollectionPropertyMap.ParentColumn">
            <summary>
            明细表中，用于关联主表的字段
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityMetadataMapBase`1.AttributeCache">
            <summary>
            属性缓存管理器
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityMetadataMapBase`1.Name">
            <summary>
            元素别名
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityMetadataMapBase`1.AutoCreateSchema">
            <summary>
            是否自动创建schemea
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityMetadataMapBase`1.Alias">
            <summary>
            返回别名
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityMetadataMapBase`1.DisplayName">
            <summary>
            返回显示名称
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityMetadataMapBase`1.Description">
            <summary>
            返回其描述文本
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityTypeMap.IsValidIdentifier(System.String)">
            <summary>
            验证名称是否正确。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityTypeMap.BuildContext.ColumnPrefix">
            <summary>
            列的前缀，是复杂属性的拼接
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityTypeMap.BuildContext.Errors">
            <summary>
            返回用于登记异常的集合
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DataEntityTypeMap.DbTable">
            <summary>
            返回此DT映射的表，此表不包括复杂属性合并后的字段
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataBase">
            <summary>
            数据库元数据的基类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataBase.#ctor(System.String)">
            <summary>
            传递元数据的名称构建对象
            </summary>
            <param name="name">元数据的名称</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataBase.Name">
            <summary>
            返回元数据的名称。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataCollection`1">
            <summary>
            数据库元数据对象的集合类
            </summary>
            <typeparam name="T">数据库元数据对象的类型</typeparam>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataCollection`1.Item(System.String)">
            <summary>
            不区分大小写名称的方式检索某个列
            </summary>
            <param name="name">元数据的名称</param>
            <returns>
            返回检索到的元数据对象，如果未检索到，将抛出KeyNotFoundException异常.
            如果不希望抛出异常请使用<see cref="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataCollection`1.TryGetValue(System.String,`0@)"/>方法</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataCollection`1.TryGetValue(System.String,`0@)">
            <summary>
            不区分大小写名称的方式检索某个列
            </summary>
            <param name="name">元数据的名称</param>
            <param name="value">返回检索到的元数据对象，如果未检索到，将返回null</param>
            <returns>是否检索到此名称的元数据</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn">
            <summary>
            数据库的列元数据描述
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.#ctor(System.String)">
            <summary>
            创建DbMetadataColumn实例
            </summary>
            <param name="name">列的名称</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.ClrType">
            <summary>
            返回/设置CLR类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.Size">
            <summary>
            如果列允许设置大小，返回/设置 列对应的大小
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.Scale">
            <summary>
            如果列允许设置精度，返回/设置 列对应的精度，通常是指小数的精度
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.DbType">
            <summary>
            返回/设置 列对应的数据库类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.IsNullable">
            <summary>
            返回/设置 列是否允许为null值。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.AutoSync">
            <summary>
            Gets or sets the AutoSync enumeration.
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.TableGroup">
            <summary>
            返回/设置扩展表后缀
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.Table">
            <summary>
            返回此列所在的表
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.Clone(System.String)">
            <summary>
            克隆当前列的元数据信息
            </summary>
            <param name="newName">克隆的列新的名称</param>
            <returns>新的列对象。</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn.ColumnIndex">
            <summary>
            返回此列在数据库输出中的映射位置，以便加快检索速度
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumnCollection">
            <summary>
            列的集合类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumnCollection.#ctor(JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable)">
            <summary>
            创建 DbMetadataColumnCollection 实例并传入所在表
            </summary>
            <param name="tableSchema">所在的表</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumnCollection.InsertItem(System.Int32,JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn)">
            <summary>
            插入列时更新列的索引
            </summary>
            <param name="index">新的列位置</param>
            <param name="item">新的列</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumnCollection.RemoveItem(System.Int32)">
            <summary>
            删除列时更新列的索引
            </summary>
            <param name="index">要删除的列的索引</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumnCollection.SetItem(System.Int32,JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumn)">
            <summary>
            替换列时更新列的索引
            </summary>
            <param name="index">新的列位置</param>
            <param name="item">新的列</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataColumnCollection.ClearItems">
            <summary>
            当清除所有列时被调用。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataDatabase">
            <summary>
            数据库元数据对象
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataDatabase.#ctor">
            <summary>
            创建 DbMetadataDatabase 实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataDatabase.#ctor(System.String)">
            <summary>
            创建 DbMetadataDatabase 实例
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataDatabase.Tables">
            <summary>
            返回数据库的所有表对象
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataRelation">
            <summary>
            数据库关系的元数据描述对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataRelation.ChildColumn">
            <summary>
            返回/设置外键字段
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataRelation.ParentTable">
            <summary>
            返回/设置 父对象表
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataRelationCollection">
            <summary>
            关系集合
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable">
            <summary>
            数据库中表的元数据描述
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.#ctor">
            <summary>
            创建 DbMetadataTable 实例
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.#ctor(System.String)">
            <summary>
            传递元数据的名称构建对象
            </summary>
            <param name="name">元数据的名称</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.AutoCreateSchema">
            <summary>
            是否自动创建表结构
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.Columns">
            <summary>
            返回 此表的所有列对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.PrimaryKey">
            <summary>
            返回此表的主键列
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.VersionColumn">
            <summary>
            返回/设置此表是否定义了Version功能的列
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.Relations">
            <summary>
            返回此表的所有关系
            </summary>
            <remarks>
            <para>
            此表所包含的所有外键所对应的关系。例如CustomerId指向Customer表，将增加
            一个关系，其ChildColumn=CustomerId，ParentTable=Customer。
            </para>
            对于父子关系，在子表中，Parent的外键也是相同的原理，不过外面额外使用<see cref="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.ParentRelation"/>
            存储了父表的关系。
            </remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.ParentRelation">
            <summary>
            返回明细表与主表关联的关系
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.ChildTables">
            <summary>
            返回此表对应的所有子表
            </summary>
            <remarks>
            为方便程序处理，我们在主表上存储了所有明细的表关系。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTable.GetColumnsByTableGroup">
            <summary>
            依据字段的TableGroup属性分解表模型，返回多个表名加列数组的数组。
            </summary>
            <returns>
            <para>一个数组，每个元素包含包含一个表名称，和包含的列数组。</para>
            <para>但此函数不处理驱动程序上的ExTableHaveRelitionField属性，即在扩展表中并不包含与父表的关联关系字段。</para>
            </returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.Database.DbMetadataTableCollection">
            <summary>
            所有表的集合
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.SimplePropertyMap.PrimaryKey">
            <summary>
            返回简单属性是否是主键
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.SimplePropertyMap.IsVersionProperty">
            <summary>
            返回此属性是否是一个版本列
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.SimplePropertyMap.Size">
            <summary>
            返回简单属性其字段的大小
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.SimplePropertyMap.Scale">
            <summary>
            返回简单属性其字段小数部分的大小
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.SimplePropertyMap.DbType">
            <summary>
            返回字段类型
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.SimplePropertyMap.TableGroup">
            <summary>
            返回简单属性所在的扩展表后缀，默认为null
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.Database.SimplePropertyMap.AutoSync">
            <summary>
            Gets or sets the AutoSync enumeration.
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DcJsonState.PkSnapshotSet">
            <summary>
            快照信息
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DcJsonState.FromDatabase">
            <summary>
            是否来自于db
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.DcJsonState.DirtyFlags">
            <summary>
            脏标志管理器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Metadata.DcJsonState.op_Implicit(JieNor.Framework.SuperOrm.DataEntity.DataEntityState)~JieNor.Framework.SuperOrm.Metadata.DcJsonState">
            <summary>
            将内部状态对象，转换成可序列化的对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Metadata.IColumnValuePair">
            <summary>
            列和值的对
            </summary>
            <remarks>
            对应的实现对象创建及其频繁，原来是抽象类，现在改为接口，
            这样在具体实现时可以使用结构而非类，减少GC的压力。
            </remarks>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.IColumnValuePair.Column">
            <summary>
            返回列对象
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Metadata.IColumnValuePair.Value">
            <summary>
            返回/设置值对象
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.IDeleteMetaRow">
            <summary>
            数据行抽象接口
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.IDeleteMetaRow.Oid">
            <summary>
            行主键信息
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.RowOperateType">
            <summary>
            行操作类型
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.RowOperateType.Unknow">
            <summary>
            未知操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.RowOperateType.None">
            <summary>
            不执行任何操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.RowOperateType.Insert">
            <summary>
            待插入行
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.RowOperateType.Update">
            <summary>
            待更新行
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.RowOperateType.Delete">
            <summary>
            待删除行
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.ISaveDataSet">
            <summary>
            待保存的数据集
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.ISaveDataSet.Tables">
            <summary>
            需要保存的所有表格信息
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.ISaveDataTable">
            <summary>
            待保存的表格信息
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.OperateOptionUtils">
            <summary>
            扩展OperateOption参数对象的方法；
            主要用来扩展属性，方便强命名访问
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.GetIgnoreWarning(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            获取忽略警告参数
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.SetIgnoreWarning(JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            设置忽略警告参数
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.SetOnlyValidate(JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            操作选项，只验证，不执行具体操作
            </summary>
            <param name="option"></param>
            <param name="onlyValidate"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.GetOnlyValidate(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            操作选项，只验证，不执行具体操作
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.SetValidateFlag(JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            是否需要校验标志
            </summary>
            <param name="option"></param>
            <param name="validateFlag"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JieNor.Framework.SuperOrm.OperateOptionUtils.GetValidateFlag(JieNor.Framework.SuperOrm.OperateOption)" -->
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.SetBOSValidateFlag(JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            是否需要平台校验标志
            </summary>
            <param name="option"></param>
            <param name="validateFlag"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JieNor.Framework.SuperOrm.OperateOptionUtils.GetBOSValidateFlag(JieNor.Framework.SuperOrm.OperateOption)" -->
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.GetIsThrowValidationInfo(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            是否抛出校验信息
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.SetIsThrowValidationInfo(JieNor.Framework.SuperOrm.OperateOption,System.Boolean)">
            <summary>
            是否抛出校验信息
            </summary>
            <param name="option"></param>
            <param name="isThrowValidation"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.GetCacheMetadata(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            是否缓存已处理过的元数据结果,默认值是true（内部变量名：CacheMetadata）
            </summary>
            <param name="option">提供选项的对象</param>
            <returns>当前选项的值</returns>
            <remarks>
            引擎在对实体进行CRUD操作前，需要分析实体的元数据信息已产生映射关系，为提高效率，引擎默认
            会缓存分析后的结果，以便后面操作相同类型的实体时不再重新分析。但是，如果你的实体类型仅使用一次
            且可能产生很多此类的临时类型，会造成缓存命中率下降。当对此情况请设置参数为false，以通知引擎不再
            缓存分析结果。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionUtils.GetThrowExceptionWhenNotFind(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            是否在没有找到指定编号的数据时，触发异常，默认为true。（内部变量名：ThrowExceptionWhenNotFind）
            </summary>
            <param name="option">提供选项的对象</param>
            <returns>是否触发异常。</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.OrmUtils">
            <summary>
            工具类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetDataEntityType(System.Type)">
            <summary>
            返回类型的数据描述
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetSimpleProperties(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityPropertyCollection,System.Boolean)">
            <summary>
            返回属性集合中所有的简单属性
            </summary>
            <param name="properties">实体的属性集合</param>
            <param name="onlyDbProperty">是否仅仅包含数据库中定义的属性</param>
            <returns>被检测的属性列表</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetComplexProperties(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityPropertyCollection,System.Boolean)">
            <summary>
            返回属性集合中所有的复杂属性
            </summary>
            <param name="properties">实体的属性集合</param>
            <param name="onlyDbProperty">是否仅仅包含数据库中定义的属性</param>
            <returns>被检测的属性列表</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetCollectionProperties(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityPropertyCollection,System.Boolean)">
            <summary>
            返回属性集合中所有的集合属性
            </summary>
            <param name="properties">实体的属性集合</param>
            <param name="onlyDbProperty">是否仅仅包含数据库中定义的属性</param>
            <returns>被检测的属性列表</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.IsDbIgnore(JieNor.Framework.SuperOrm.Metadata.DataEntity.IMetadata)">
            <summary>
            返回元数据是否不参与所有数据库的操作
            </summary>
            <param name="metadata">要检测的元数据对象</param>
            <returns>如果此属性标记了DbIgnoreAttribute则返回true，否则返回false.</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.DataEntityWalker(System.Collections.Generic.IEnumerable{System.Object},JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,JieNor.Framework.SuperOrm.DataEntity.DataEntityWalkerCallback,System.Boolean)">
            <summary>
            搜索实体中各个层级的所有数据
            </summary>
            <param name="dataEntities">要搜索的实体</param>
            <param name="dt">根实体结构</param>
            <param name="callback">当搜索到某个级别时发生的回调</param>
            <param name="onlyDbProperty">是否仅搜索数据库使用的属性</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.Sync``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},System.Action{``0,``1},System.Func{``0,``1},System.Action{System.Collections.Generic.IEnumerable{``1},``1},System.Action{System.Collections.Generic.IEnumerable{``1},``1,System.Int32},System.Boolean)">
            <summary>
            执行列表的同步操作
            </summary>
            <typeparam name="SourceT">源列表的元素类型</typeparam>
            <typeparam name="TargetT">目标列表的元素类型</typeparam>
            <param name="sourceList">源列表</param>
            <param name="targetList">目标列表</param>
            <param name="equatable">
            相等判断的函数，通过传递源列表的元素（第一个参数）和目标列表的元素（第二个参数），判断这两个元素是否相等（返回值）
            </param>
            <param name="updateFunc">
            更新数据的函数，当发现源列表的某个元素与目标的某个元素相等时，调用此函数。第一个参数是源列表的元素，第二个参数是目标列表的元素。
            需要注意的是，如果参数<paramref name="callUpdateFuncWhenCreated"/>为true，默认是true,则在创建<paramref name="createFunc"/>
            目标数据后调用此函数，以便新创建的元素与源元素同步。
            </param>
            <param name="createFunc">
            创建一个目标对象的函数，如果源列表中的某个元素（第一个参数）在目标列表中未找到，将调用此函数希望创建目标对象（返回值）。
            但需要注意的是调用此函数并没有立即将新元素添加到目标列表中，而是先调用<paramref name="updateFunc"/>将新创建的数据与源
            数据同步（如果参数<paramref name="callUpdateFuncWhenCreated"/>为false，默认是true,则不会调用updateFunc)，
            然后调用<paramref name="addFunc"/>添加。
            如果此委托返回值是<typeparamref name="TargetT"/>的默认值，则不会调用<paramref name="addFunc"/>
            </param>
            <param name="addFunc">
            新增目标到集合的函数。当创建新的有效目标对象（第二个参数）后，将调用此委托将其添加到<paramref name="targetList"/>（第一个参数）。
            如果<paramref name="targetList"/>符合IList的泛型接口，可以不给定此委托（传入null或不提供此参数），系统将调用IList接口的add方法将
            其添加到目标列表中。
            </param>
            <param name="removeFunc">
            从目标集合中删除的函数。如果在目标列表（第一个参数）中发现某个元素（第二个参数）在源列表中不存在，将调用此函数要求删除此元素。
            第三个参数是此元素在目标列表中的最初索引位置，注意是原始位置，很可能在运算过程中其他元素的插入或删除影响了其当前实际位置。
            </param>
            <param name="callUpdateFuncWhenCreated">
            当新建项目<paramref name="createFunc"/>后是否再调用更新<paramref name="updateFunc"/>方法，以便方便的将源的数据同步到目标数据中。
            这样新增时就不必重复编写同步代码了。默认为true.
            </param>
            <remarks>
            <para>
            同步数据的基本原理是：
            </para>
            <para>
            源的元素如果在目标列表中存在，将更新目标的数据，否则新增；
            如果目标列表的元素在源列表中不存在，将从目标列表中删除。
            </para>
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.Clone(JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase,System.Boolean,System.Boolean)">
            <summary>
            克隆当前实体的数据成为一个新的数据。注意他不会复制实体上的脏标识信息和快照信息。
            </summary>
            <param name="dataEntity">要克隆的实体</param>
            <param name="onlyDbProperty">是否仅赋值数据库映射的字段。默认为false</param>
            <param name="clearPrimaryKeyValue">是否清除主键的值，默认为false</param>
            <returns>新的实体对象，将当前的数据复制到了新的实体。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.Clone(System.Object,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Boolean,System.Boolean)">
            <summary>
            克隆当前实体的数据成为一个新的数据。注意他不会复制实体上的脏标识信息和快照信息。
            </summary>
            <param name="dataEntity">要克隆的实体</param>
            <param name="dt">当前实体的类型，不能为空。</param>
            <param name="onlyDbProperty">是否仅赋值数据库映射的字段。默认为false</param>
            <param name="clearPrimaryKeyValue">是否清除主键的值，默认为false</param>
            <returns>新的实体对象，将当前的数据复制到了新的实体。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetPrimaryKeyValue``1(JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase,System.Boolean)">
            <summary>
            获取一个实体类的主键值。
            </summary>
            <typeparam name="T">主键值的类型</typeparam>
            <param name="dataEntity">要获取主键值的实体</param>
            <param name="throwOnError">如果实体为空或没有定义主键时是否抛出异常。</param>
            <returns>主键的值。</returns>
            <remarks>
            下面的代碼演示了在实体集合中寻找主键为3的实体。
            <code>
            var findItem = items.FirstOrDefault((p) =&gt; p.GetPrimaryKeyValue&lt;int&gt;() == 3);
            </code>
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetPrimaryKeyValue(JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase,System.Boolean)">
            <summary>
            获取一个实体类的主键值。非泛型版本。
            </summary>
            <param name="dataEntity">要获取主键值的实体</param>
            <param name="throwOnError">如果实体为空或没有定义主键时是否抛出异常。</param>
            <returns>主键的值。</returns>
            <remarks>
            下面的代碼演示了在实体集合中寻找主键为3的实体。
            <code>
            var findItem = items.FirstOrDefault((p) =&gt; p.GetPrimaryKeyValue&lt;int&gt;() == 3);
            </code>
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetListHashCode``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            返回一个数组的HashCode值。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetListEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            判断两个集合是否相等
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetFieldName(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            从动态属性中获取关联db的字段名称
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetTableName(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            获取实体所映射的物理表名称
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.ToKSqlString(JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty)">
            <summary>
            根据DynamicProperty生成SQL建表的语法
            这里只是简单的对常用值类型进行处理，其它则默认为字符串的
            通常这也就是用于临时表生成，所以不用太精确
            add by linus wang at 2016-04-20
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetValue``1(JieNor.Framework.SuperOrm.DataEntity.DynamicObject,System.String,``0)">
            <summary>
            获取实体属性值
            </summary>
            <remarks>
            主要应对实体视图的变更，没有及时更新强类型视图，可以通过此方法获取新增的属性值
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.GetValue``1(JieNor.Framework.SuperOrm.DataEntity.DynamicObject,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty,``0)">
            <summary>
            获取实体属性值
            </summary>
            <remarks>
            主要应对实体视图的变更，没有及时更新强类型视图，可以通过此方法获取新增的属性值
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.SetValue(JieNor.Framework.SuperOrm.DataEntity.DynamicObject,System.String,System.Object)">
            <summary>
            设置实体属性值
            </summary>
            <remarks>
            主要应对实体视图的变更，没有及时更新强类型视图，可以通过此方法获取新增的属性值
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OrmUtils.SetValue(JieNor.Framework.SuperOrm.DataEntity.DynamicObject,JieNor.Framework.SuperOrm.Metadata.DataEntity.DynamicProperty,System.Object)">
            <summary>
            设置实体属性值
            </summary>
            <remarks>
            主要应对实体视图的变更，没有及时更新强类型视图，可以通过此方法获取新增的属性值
            </remarks>
            <param name="data"></param>
            <param name="property"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.OperateOption">
            <summary>
            为数据的操作提供额外的选项
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOption.Create">
            <summary>
            构建空的操作选项
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOption.Merge(JieNor.Framework.SuperOrm.OperateOption)">
            <summary>
            创建一个新的操作选项，他以当前的操作选项为优先，如果找不到将使用baseOption的选项。
            </summary>
            <param name="baseOption">基础选项</param>
            <returns>返回一个新的选项对象。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOption.TryGetVariableValue``1(System.String,``0@)">
            <summary>
            尝试获取某个变量的值
            </summary>
            <typeparam name="T">变量的返回类型</typeparam>
            <param name="name">变量的名称，不区分大小写</param>
            <param name="result">变量的结果，如果没有找到是T的默认值</param>
            <returns>返回是否找到此变量</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOption.GetVariableValue``1(System.String,``0)">
            <summary>
            从选项中获取定义的值
            </summary>
            <param name="name">选项的键，不区分大小写</param>
            <param name="defaultValue">如果没有找到定义，其缺省值是多少</param>
            <returns>如果有定义，返回定义的值，否则返回缺省值。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOption.GetVariableValue``1(System.String)">
            <summary>
            获取某个变量的值，如果没有定义此变量，将抛出异常。
            </summary>
            <typeparam name="T">变量的返回类型</typeparam>
            <param name="name">变量的名称，不区分大小写</param>
            <returns>变量的结果</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOption.SetVariableValue(System.String,System.Object)">
            <summary>
            设置定义的值
            </summary>
            <param name="name">选项的键，不区分大小写</param>
            <param name="value">定义的值</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOption.RemoveVariable(System.String)">
            <summary>
            删除定义的值
            </summary>
            <param name="name">变量名称</param>
            <returns>是否成功删除</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.OperateOptionPrivate">
            <summary>
            操作选项对象
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionPrivate.#ctor">
            <summary>
            操作选项
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.OperateOptionPrivate.TryGetVariableValue``1(System.String,``0@)">
            <summary>
            尝试获取指定key的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.PropertyDescriptorUtils">
            <summary>
            从.net 反编译过来整理的代码。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.PropertyDescriptorUtils.GetConverter(System.Reflection.ICustomAttributeProvider,System.Type)">
            <summary>
            获取某个属性的转换器对象
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.PropertyDescriptorUtils.GetShouldSerializeMethod(System.Reflection.PropertyInfo)">
            <summary>
            获取某个属性的 ShouldSerializeXX 方法。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.PropertyDescriptorUtils.GetDefaultValueMethod(System.Reflection.PropertyInfo)">
            <summary>
            获取某个属性的 GetDefaultValueXX 方法。
            </summary>
            <param name="pInfo"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.PropertyUtil">
            <summary>
            元素属性处理辅助类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.PropertyUtil.GetPropertyValue(System.Object,System.String)">
            <summary>
            获取指定名称的属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.PropertyUtil.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            根据属性名称设置属性值
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.PropertyUtil.SetPropertyValue(System.Object,System.String,System.Object,System.Boolean)">
            <summary>
            设置私有属性值（未缓存）
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="bReflectOnly">仅反射调用（不缓存）</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.PropertyUtil.IsInt(System.String)">
            <summary>
            判断指定的字符串是否是整数
            </summary>
            <param name="value">要判断的字符串</param>
            <returns>如果是整数， 则为true； 否则为false</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Resource.ImageDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Resource.ResManager.CultureInfoUtils">
            <summary>
            主要是负责国际化相关的功能类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.CultureInfoUtils.GetOSSelectLanguageLocaleCode">
            <summary>
            获取操作系统选定的语言LocaleCode
            </summary>
            <example>
            string strLocaleCode = CultureInfoUtils.GetOSSelectLanguageLocaleCode()
            </example>
            <returns>LocaleCode : 例如 "zh-CN","en-US"</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.CultureInfoUtils.GetOSSelectLanguageLocaleID">
            <summary>
            获取操作系统选定的语言LocaleCode
            </summary>
            <example>
            int iLangID = GetSystemDefaultLangID();
            </example>
            <returns>LocaleID : 例如 "2052","1033"</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Resource.ResManager.ClientPath">
            <summary>
            IEPlugin组件所在路径
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Resource.ResManager.Language">
            <summary>
            当前装载资源语言zh-CN,zh-HK,en-US
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Resource.ResManager.SubSystemTpe">
            <summary>
            
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Resource.ResManager.ImageSource">
            <summary>
            标示是客户端调用1，还是Web页面调用2
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.LoadJNString(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            加载多语言字符
            </summary>
            <param name="description">描述字符串</param>
            <param name="resourceID">资源ID</param>
            <param name="language">zh-CN,zh-HK,en-US</param>
            <param name="systemType">子系统</param>
            <param name="args">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.LoadResFormat(System.String,System.String,System.Object[])">
            <summary>
            带参数的多语言
            </summary>
            <param name="description"></param>
            <param name="resourceID"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.LoadResFormat(System.String,System.String,JieNor.Framework.SuperOrm.Resource.SubSystemType,System.Object[])">
            <summary>
            带参数的多语言
            </summary>
            <param name="description"></param>
            <param name="resourceID"></param>
            <param name="systemType"></param>
            <param name="args"></param>
            <returns></returns>        
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.LoadResFormat(System.String,System.String,System.String,System.Object[])">
            <summary>
            带参数的多语言
            </summary>
            <param name="description"></param>
            <param name="resourceID"></param>
            <param name="systemType"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.LoadResFormat(System.String,System.String,System.String,JieNor.Framework.SuperOrm.Resource.SubSystemType,System.Object[])">
            <summary>
            字符串处理：%1 %2 带参数的多语言字符串，此处需要讨论看该函数是否保留
            </summary>
            <param name="description"></param>
            <param name="resourceID"></param>
            <param name="sLanguage"></param>
            <param name="systemType"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.LoadImage(System.String)">
            <summary>
            System.Drawing.Image格式的图片载入
            1 从指定的图片资源文件载入图片
            2 如果没有找到该资源，则返回imgTbtn_flower的图片
            </summary>
            <param name="resourceID">图片标识</param>
            <returns>图片对象System.Drawing.Image</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.LoadIcon(System.String)">
            <summary>
            System.Drawing.Icon格式的图标载入
            </summary>
            <param name="resourceID">Icon标识</param>
            <returns>System.Drawing.Icon</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.LoadResourceAssembly(System.String,System.String)">
            <summary>
            按照不同系统载入对应语言的资源文件
            </summary>
            <param name="language">语言</param>
            <param name="systemType"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.GetResManagerInstance(System.String,System.String)">
            <summary>
            获取资源类的实例
            </summary>
            <param name="language"></param>
            <param name="systemType"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Resource.ResManager.getimageResourceManager">
            <summary>
            获取图片的资源管理类
            </summary>
            <returns>ResourceManager</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.ConfigurationBinder">
            <summary>
            定义一个绑定机制，允许定义从实体对象转换到真实对象的规则。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.ConfigurationBinder.ConfigurationToObject(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Object)">
            <summary>
            默认实现的从配置对象转换为真实对象的规则，在此实现中，程序尝试在配置实体的元数据上寻找MappingToAttribute，通过他映射到真实对象。
            </summary>
            <param name="dt">当前配置对象的类型</param>
            <param name="configurationObject">当前的配置实体</param>
            <returns>返回一个转换后的真实对象。</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.ConfigurationSerializer">
            <summary>
            预设的从配置对象转换为真实对象的序列化和反序列化工具类。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.ConfigurationSerializer.Deserialize(JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase,System.Object)">
            <summary>
            将配置对象的数据填充到真实对象上。
            </summary>
            <param name="configurationObject">配置对象</param>
            <param name="serviceInstance">服务实例</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.ConfigurationSerializer.Binder">
            <summary>
            返回/设置序列化和反序列化时使用的绑定工具类实例。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.ConfigurationSerializerImplement.ReadEntity(JieNor.Framework.SuperOrm.DataEntity.IDataEntityBase,System.Object)">
            <summary>
            将配置对象的值填充到真实对象上
            </summary>
            <param name="cObj">配置对象</param>
            <param name="sObj">真实对象</param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder">
            <summary>
            表示一个配置的绑定工具，通过给出一个节点名称，返回此名称对应的配置对象
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.ELEMENT">
            <summary>
            Dcxml配置对象中，可以忽略的后缀
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.IgnoreCase">
            <summary>
            返回用于比较实体类型的字符串比较策略，默认是忽略大小写
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.OnlyDbProperty">
            <summary>
            返回/设置是否仅处理数据库有关的属性，默认为true.
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.Culture">
            <summary>
            返回/设置在执行序列化和反序列化时，对应的时区信息，默认是当前时区。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.BindToType(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            根据节点的名称确定数据类型
            </summary>
            <param name="elementName">节点的名称</param>
            <param name="attributes">额外的附属Attribute信息</param>
            <returns>返回数据类型</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.TryBindToType(System.String,System.Collections.Generic.IDictionary{System.String,System.String},JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType@)">
            <summary>
            根据节点的名称确定数据类型
            </summary>
            <param name="elementName">节点的名称</param>
            <param name="attributes">额外的附属Attribute信息</param>
            <param name="result">返回数据类型</param>
            <returns>如果找到返回true，否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.BindToName(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            根据当前的实体类型，返回对应的XML节点名称
            </summary>
            <param name="dt">实体类型</param>
            <returns>对应的XML节点名称</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.GetDataEntityType(System.Object)">
            <summary>
            返回指定实体的类型信息
            </summary>
            <param name="dataEntity">要检测的实体</param>
            <returns>此实体的类型信息</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.GetDataEntityAttributes(System.Object)">
            <summary>
            返回指定实体的附属信息
            </summary>
            <param name="dataEntity">要检测的实体</param>
            <returns>此实体的附属的信息</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.CreateInstance(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType)">
            <summary>
            由Binder创建实例，默认实现是直接调用dt的CreateInstance方法
            </summary>
            <param name="dt">要创建实例的类型</param>
            <returns>新的实例</returns>
            <remarks>
            派生类可以重载此方法，例如标记实例创建的时机，或返回他的代理。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.ThrowException(JieNor.Framework.SuperOrm.Exceptions.SerializationException)">
            <summary>
            在序列化或反序列化时发生异常，决定是否抛出异常
            </summary>
            <param name="serializationException">异常对象</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.BindReadAction(System.Type,System.Action{JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty,System.Xml.XmlReader,System.Object})">
            <summary>
            允许定义某个数据类型的读取XML的机制，如果不重载，可以使用默认的读取方式。
            </summary>
            <param name="dataType">数据类型，每个数据类型可以定义不同的读取行为。</param>
            <param name="defaultAction">缺省的实现</param>
            <returns>最终的实现。</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.BindEqualsFunc(System.Type,System.Func{System.Object,System.Object,System.Boolean})">
            <summary>
            允许定义个性化的相等判断机制，如果不重载此方法，将使用默认的判断机制。
            </summary>
            <param name="dataType">要进行相等判断的数据类型。</param>
            <param name="defaultFunc">缺省的实现。</param>
            <returns>最终的实现</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlBinder.BindToStringFunc(System.Type,System.Func{JieNor.Framework.SuperOrm.Metadata.DataEntity.ISimpleProperty,System.Object,System.Object,System.String},System.Boolean@)">
            <summary>
            允许自定义数据类型转换为字符串的机制，如果不重载，将使用默认的行为。
            </summary>
            <param name="dataType">要转换的数据类型</param>
            <param name="defaultFunc">缺省的数据转换函数</param>
            <param name="isCData">是否是CData结构。</param>
            <returns>最终的实现。</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.ListDcxmlBinder">
            <summary>
            默认实现的DcxmlBinder实现，他通过实现给定一批实体类型来构建绑定。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.ListDcxmlBinder.#ctor(System.Collections.Generic.IEnumerable{JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType})">
            <summary>
            创建 ListDcxmlBinder 实例并指定默认的实体类型集合
            </summary>
            <param name="dts">要初始化的实体类型列表</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.ListDcxmlBinder.TryBindToType(System.String,System.Collections.Generic.IDictionary{System.String,System.String},JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType@)">
            <summary>
            根据节点的名称确定数据类型
            </summary>
            <param name="elementName">节点的名称</param>
            <param name="attributes">额外的附属Attribute信息</param>
            <param name="result">返回数据类型</param>
            <returns>如果找到返回true，否则返回false</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.ServiceDcxmlBinder">
            <summary>
            另外一种DcxmlBinder的实现，通过IDataEntityTypeCollection获取对应的类型
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.ServiceDcxmlBinder.#ctor(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityTypeCollection)">
            <summary>
            创建 ServiceDcxmlBinder 实例，并指定IDataEntityTypeCollection实例。
            </summary>
            <param name="col"></param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.ServiceDcxmlBinder.TryBindToType(System.String,System.Collections.Generic.IDictionary{System.String,System.String},JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType@)">
            <summary>
            根据节点的名称确定数据类型
            </summary>
            <param name="elementName">节点的名称</param>
            <param name="attributes">额外的附属Attribute信息</param>
            <param name="result">返回数据类型</param>
            <returns>如果找到返回true，否则返回false</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.DcxmlAction">
            <summary>
            描述一个差量化动作
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.#ctor(System.Int32,System.String)">
            <summary>
            内部初始化
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ActionName">
            <summary>
            返回动作名称
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.Equals(System.Object)">
            <summary>重载了相等判断</summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.Equals(JieNor.Framework.SuperOrm.Serialization.DcxmlAction)">
            <summary>
            判断两个动作是否相等。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.Equals(JieNor.Framework.SuperOrm.Serialization.DcxmlAction,JieNor.Framework.SuperOrm.Serialization.DcxmlAction)">
            <summary>静态的相等判断</summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.GetHashCode">
            <summary>重载hashcode的获取</summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ToString">
            <summary>输出动作名称</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.Keyword_Action">
            <summary>关键字：动作</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.Keyword_Oid">
            <summary>关键字：编号</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.PropertyAction_SetValue_Name">
            <summary>属性动作：赋值</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.PropertyAction_Reset_Name">
            <summary>属性动作：重置</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.PropertyAction_SetNull_Name">
            <summary>属性动作：设置为空</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ListAction_Add_Name">
            <summary>列表动作：新增</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ListAction_Edit_Name">
            <summary>列表动作：编辑</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ListAction_Remove_Name">
            <summary>列表动作：移除</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ListAction_Clear_Name">
            <summary>列表动作：清除（保留）</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.PropertyAction_SetValue">
            <summary>属性动作：赋值</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.PropertyAction_Reset">
            <summary>属性动作：重置</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.PropertyAction_SetNull">
            <summary>属性动作：设置为空</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ListAction_Add">
            <summary>列表动作：新增</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ListAction_Edit">
            <summary>列表动作：编辑</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ListAction_Remove">
            <summary>列表动作：移除</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlAction.ListAction_Clear">
            <summary>列表动作：清除（保留）</summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializerReadImplement">
            <summary>
            提供一种机制，提前分析属性操作的规律，以便优化性能。
            </summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializerReadImplement._colloctionIgnorePKValue">
            <summary>
            集合忽略PK值
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager">
            <summary>
            延迟填写数据的管理类
            </summary>
            <remarks>
            当填写某些节点时，并不真的立即填写，而是等待第一个有效的子节点，才写入之前未完成的任务。
            这主要是为防止如果未有任何属性改变，但却创建了一堆实体节点的问题。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.WriteStartDocument">
            <summary>
            写入XML文档的开始部分
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.WriteStartEntityElement(System.String,JieNor.Framework.SuperOrm.Serialization.DcxmlAction,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>写入实体的开始节点</summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.WriteEndEntityElement">
            <summary>写入实体的结束节点</summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.AddTask(JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.LazyWriteTask)">
            <summary>
            添加一个任务，此任务将添加到末尾。
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.JustDoIt">
            <summary>
            完成所有的延迟任务
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.EndTask">
            <summary>
            结束当前的任务 出栈 
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.LazyWriteTask.ElementName">
            <summary>任务节点名称 </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.LazyWriteTask.IsCompleted">
            <summary>
            是否已经完成了作业
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.LazyWriteTask.JustDoIt(System.Xml.XmlWriter)">
            <summary>立即开始工作，内部实际仅填写开始节点</summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.LazyWriteTaskManager.LazyWriteTask.End(System.Xml.XmlWriter)">
            <summary>结束操作</summary>
        </member>
        <member name="F:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializerWriteImplement._needDBIgnore">
            <summary>
            是否需要判断dbIgnore
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializerWriteImplement.Serialize(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Object,System.Object)">
            <summary>
            序列化实体数据，产生差量信息
            </summary>
            <param name="dt">当前实体的参考数据类型</param>
            <param name="currentEntity">当前实体</param>
            <param name="baseEntity">基础实体，</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializerWriteImplement.ListItemEquatable(System.Collections.IEnumerable,System.Collections.IEnumerable,System.Object,System.Object,System.Func{System.String})">
            <summary>
            判断两个元素的主键值是否相等。 
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.DcxmlTypeDescriptorContext">
            <summary>
            为序列化和反序列化设计的上下文对象，用于ConverterToString的第一个参数
            </summary>
            <remarks>
            参考了.net 关于属性表格的设计代码。
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlTypeDescriptorContext.#ctor(System.IServiceProvider)">
            <summary>
            创建 DcxmlTypeDescriptorContext 实例
            </summary>
            <param name="serviceProvider">当前的服务提供者</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlTypeDescriptorContext.Container">
            <summary>
            返回组件所在的容器。由于实体不支持组件模型，所以目前返回null。
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlTypeDescriptorContext.Instance">
            <summary>
            返回当前实体实例
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlTypeDescriptorContext.ComponentChangeService">
            <summary>
            返回组件改变服务
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlTypeDescriptorContext.OnComponentChanged">
            <summary>
            触发组件改变事件
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlTypeDescriptorContext.OnComponentChanging">
            <summary>
            触发组件改变前事件
            </summary>
            <returns>是否成功</returns>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlTypeDescriptorContext.PropertyDescriptor">
            <summary>
            属性描述符
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlTypeDescriptorContext.GetService(System.Type)">
            <summary>
            获取服务
            </summary>
            <param name="serviceType">服务类型</param>
            <returns>服务实例</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.IDynamicSerializer.Sync``1(JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Collections.Generic.IEnumerable{``0},System.Object,System.Func{System.String,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityProperty},System.Func{System.Collections.Generic.IEnumerable{``0},System.Object,System.String,System.String})">
            <summary>
            
            </summary>
            <typeparam name="TSrc"></typeparam>
            <param name="dt"></param>
            <param name="sourceData"></param>
            <param name="targetData"></param>
            <param name="findProperty"></param>
            <param name="findPkId"></param>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.IOC.CLRDataEntityType">
            <summary>
            对Type的操作，和普通IDataEntityType唯一不同的就是不会事先扫描属性
            </summary>
            <remarks>
            为什么不事先扫描呢？
            </remarks>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.SerializationUtils">
            <summary>
            序列化的辅助工具类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.DynamicObjectSerializationBinder">
            <summary>
            为动态实体在序列化和反序列化时，使用的绑定器
            </summary>
            <remarks>
            在序列化时，他在序列化的同时，记录下所有涉及的DynamicObjectType，以便记录这些信息
            在反序列化时，外部传入指定一批可用的类型。参见DynamicObject中KnowTypes
            </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DynamicObjectSerializationBinder.TryBindToType(System.String,System.Collections.Generic.IDictionary{System.String,System.String},JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType@)">
            <summary>
            根据节点的名称确定数据类型
            </summary>
            <param name="elementName">节点的名称</param>
            <param name="attributes">额外的附属Attribute信息</param>
            <param name="result">返回数据类型</param>
            <returns>如果找到返回true，否则返回false</returns>
        </member>
        <member name="T:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer">
             <summary>
             从一个Dcxml(Difference configuration xml)流中读取信息，并还原到某个配置实体对象上。
             </summary>
             <remarks>
             <para>差量XML规范:</para>
             <para>1）、属性操作符：SetValue</para>
             <para>这是对属性的默认操作，可以不标记，表示对属性赋值</para>
             <para>2）、属性操作符：Reset</para>
             <para>表示调用属性的重置操作，此操作将恢复属性的原始值</para>
             <para>3）、属性操作符：SetNull</para>
             <para>表示设置属性的值为null</para>
             <para>4）、元素操作符：Add</para>
             <para>元素的默认操作，表示向列表添加一个元素。</para>
             <para>5）、元素操作符：Edit</para>
             <para>表示修改指定编号的元素，必须在此动作中指定修改的元素主键值</para>
             <para>6）、元素操作符：Remove</para>
             <para>表示删除指定编号的元素，必须在此动作中指定被删除的元素主键值</para>
             <para>7）、列表操作符：Clear（保留）</para>
             <para>表示清空列表的所有元素</para>
             <example>
             下面的XML演示了列表的处理
             <code>
            &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;FunctionPackageContainer&gt;
              &lt;Packages&gt;
                &lt;!--修改--&gt;
                &lt;DcxmlPackage action=&quot;Edit&quot; oid=&quot;01&quot;&gt;
                  &lt;FileName&gt;NewFileName&lt;/FileName&gt;
                &lt;/DcxmlPackage&gt;
            
                &lt;!--删除--&gt;
                &lt;AssemblyPackage action=&quot;Remove&quot; oid=&quot;SaleOrder&quot;&gt;&lt;/AssemblyPackage&gt; 
            
                &lt;!-- 新增 --&gt;
                &lt;DcxmlPackage&gt;
                  &lt;ID&gt;03&lt;/ID&gt;
                  &lt;FileName&gt;03Data&lt;/FileName&gt;
                &lt;/DcxmlPackage&gt;
                
              &lt;/Packages&gt;
            &lt;/FunctionPackageContainer&gt;
             </code>
             </example>
             </remarks>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.#ctor(JieNor.Framework.SuperOrm.Serialization.DcxmlBinder)">
            <summary>
            创建 Dcxml的序列化和反序列化工具。
            </summary>
            <param name="binder">绑定器</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.#ctor(System.Collections.Generic.IEnumerable{JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType})">
            <summary>
            创建 Dcxml的序列化和反序列化工具。
            </summary>
            <param name="dts">传递默认的类型列表，默认创建ListDcxmlBinder</param>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.Binder">
            <summary>
            返回/设置节点名称和实体类型的映射工具
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.SerializeComplexProperty">
            <summary>
            设置是否序列化复合属性的开关
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.ColloctionIgnorePKValue">
            <summary>
            反序列化是否忽略主键冲突
            </summary>
        </member>
        <member name="P:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.NeedDBIgnore">
            <summary>
            是否需要忽略不支持数据库操作的元素序列化
            </summary>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.Deserialize(System.IO.Stream,System.Object)">
            <summary>
            对指定的流执行反序列化操作
            </summary>
            <param name="stream">数据流</param>
            <param name="entity">如果已经存在一个实体，可以提供给他</param>
            <returns>反序列化后的实体</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.Deserialize(System.Xml.XmlTextReader,System.Object)">
            <summary>
            对指定的流执行反序列化操作
            </summary>
            <param name="xmlReader">XML的读取器对象</param>
            <param name="entity">如果已经存在一个实体，可以提供给他</param>
            <returns>反序列化后的实体</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.Deserialize(System.String,System.Object)">
            <summary>
            对指定的位置执行反序列化操作
            </summary>
            <param name="url">数据来源</param>
            <param name="entity">如果已经存在一个实体，可以提供给他</param>
            <returns>反序列化后的实体</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.DeserializeFromString(System.String,System.Object)">
            <summary>
            对指定的文本执行反序列化操作
            </summary>
            <param name="xml">数据来源</param>
            <param name="entity">如果已经存在一个实体，可以提供给他</param>
            <returns>反序列化后的实体</returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.ReadElement(System.Xml.XmlReader,JieNor.Framework.SuperOrm.Metadata.DataEntity.IDataEntityType,System.Object)">
            <summary>
            保证每个操作是独立的实例隔离
            </summary>
            <param name="reader"></param>
            <param name="dt"></param>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.Serialize(System.IO.Stream,System.Object,System.Object)">
            <summary>
            比对当前实体和基础实体的信息，向流中写入差量化的XML数据。
            </summary>
            <param name="stream">XML数据流</param>
            <param name="currentEntity">当前实体</param>
            <param name="baseEntity">基础比对实体。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Object)">
            <summary>
            比对当前实体和基础实体的信息，向流中写入差量化的XML数据。
            </summary>
            <param name="writer">XML写入器对象</param>
            <param name="currentEntity">当前实体</param>
            <param name="baseEntity">基础比对实体。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.Serialize(System.String,System.Object,System.Object)">
            <summary>
            比对当前实体和基础实体的信息，向文件中写入差量化的XML数据。
            </summary>
            <param name="fileName">文件名</param>
            <param name="currentEntity">当前实体</param>
            <param name="baseEntity">基础比对实体。</param>
        </member>
        <member name="M:JieNor.Framework.SuperOrm.Serialization.DcxmlSerializer.SerializeToString(System.Object,System.Object)">
            <summary>
            比对当前实体和基础实体的信息，并返回差量化的XML数据。
            </summary>
            <param name="currentEntity">当前实体</param>
            <param name="baseEntity">基础比对实体。</param>
            <returns>差量化的XML数据。</returns>
        </member>
    </members>
</doc>
