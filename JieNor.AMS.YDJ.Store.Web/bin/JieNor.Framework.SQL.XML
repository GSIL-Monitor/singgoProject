<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JieNor.Framework.SQL</name>
    </assembly>
    <members>
        <member name="M:PerfmonUtil.StartMonitor">
            <summary>
            开始监控
            </summary>
        </member>
        <member name="M:PerfmonUtil.EndMonitor">
            <summary>
            结束监控
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.DatabaseType">
            <summary>
            DatabaseType
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dialect.Oracle.OracleUtil">
            <summary>
            OracleUtil
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.AbstractUpdateItem">
            <summary>
            为Update 更新语句中的项目定义的抽象类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.AggregateOption">
            <summary>
            聚合操作类型定义类
            SELECT [ ALL | DISTINCT ]
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.DistinctOption">
            <summary>
            DISTINCT操作定义类
            ALL,Distinct,DistinctRow MySql
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.BinaryOpType">
            <summary>
            二进制操作符定义类型自定义类
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Add">
            <summary>
            加操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.As">
            <summary>
            AS别名操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Assign">
            <summary>
            赋值操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.BitwiseAnd">
            <summary>
            二进制与操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.BitwiseNot">
            <summary>
            二进制非操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.BitwiseOr">
            <summary>
            二进制或操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.BitwiseXor">
            <summary>
            二进制异或操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.BooleanAnd">
            <summary>
            布尔类型与操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.BooleanOr">
            <summary>
            布尔类型或操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Divide">
            <summary>
            / 除操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Equality">
            <summary>
            =等于操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.GreaterThan">
            <summary>
            >大于操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.GreaterThanOrEqual">
            <summary>
            >=大于等于操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Is">
            <summary>
            Is操作
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.LessThan" -->
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.LessThanOrEqual" -->
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.LessThanOrGreater">
            <summary>
            小于或者大于操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.LeftShift">
            <summary>
            左移位操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Like">
            <summary>
            LIKE操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.RightShift">
            <summary>
            右移位操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Modulus">
            <summary>
            %取模操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Multiply">
            <summary>
            *乘法操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.NotEqual">
            <summary>
            !=不等于操作
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.NotLessThan" -->
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.NotGreaterThan">
            <summary>
            !>不大于操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Subtract">
            <summary>
            -减法操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Union">
            <summary>
            Union操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.NotLike">
            <summary>
            Not Like 操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.IsNot">
            <summary>
            Is Not 操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Concat">
            <summary>
            ORACLE连接两个字符型操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.BinaryOpType.Escape">
            <summary>
            ORACLE转义字符操作 如a like 'a\_b' escape '\'
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.ExprType">
            <summary>
            表达式类型定义类
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.BinaryOp">
            <summary>
            二进制操作
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Int">
            <summary>
            int类型定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Double">
            <summary>
            Double类型定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Variant">
            <summary>
            Variant变体类型定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Identifier">
            <summary>
            标识符类型定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Char">
            <summary>
            Char类型定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.NChar">
            <summary>
            NChar类型定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.FunctionInvoke">
            <summary>
            函数调用类型定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.AllColumn">
            <summary>
            获取所有列定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Unary">
            <summary>
            一元操作定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.MethodInvoke">
            <summary>
            方法调用定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Aggregate">
            <summary>
            聚合操作定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Case">
            <summary>
            CASE条件操作定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.InSubQuery">
            <summary>
            带IN的子查询定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.InList">
            <summary>
            IN表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Exists">
            <summary>
            exists表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.All">
            <summary>
            ALL表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Between">
            <summary>
            between表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Any">
            <summary>
            Any表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Some">
            <summary>
            Some表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Null">
            <summary>
            Null表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.DateTime">
            <summary>
            DateTime表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.DeclareVariant">
            <summary>
            声明变量表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.ObjectCreate">
            <summary>
            对象创建表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Subquery">
            <summary>
            子查询表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.PriorIdentifier">
            <summary>
            预定义标识符定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.JavaObjectValue">
            <summary>
            Java对象值定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Long">
            <summary>
            Long表达式定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Identity">
            <summary>
            Identity定义
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.ExprType.Empty">
            <summary>
            Empty操作定义
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.JavaObjectValueExpr">
            <summary>
            Java对象值表达式
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.ObjectCreateExpr">
            <summary>
            对象创建表达式类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.QueryExpr">
            <summary>
            查询表达式
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlAggregateExpr">
            <summary>
            聚合表达式
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlAllColumnExpr">
            <summary>
            查询所有列表达式
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlAllExpr">
            <summary>
            ALL表达式
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlAnyExpr">
            <summary>
            Any表达式
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlBetweenExpr">
            <summary>
            Between表达式
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr">
            <summary>
            二进制操作
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlCaseExpr">
            <summary>
            CASE表达式
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlCharExpr">
            <summary>
            Char操作类，对字符中\'的转义符进行处理
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlXmlExpr">
            <summary>
            Char操作类，对字符中\'的转义符进行处理
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlConvertTypeExpr">
            <summary>
            Convert
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr">
            <summary>
            DateTime日期类型定义
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr.getMillisecond">
            @return Returns the millisecon.
        </member>
        <member name="M:JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr.setMillisecond(System.Int32)">
            @param millisecon The millisecon to set.
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlDeclareVariantExpr">
            <summary>
            声明变量定义类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlDoubleExpr">
            <summary>
            Double
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlEmptyExpr">
            <summary>
            Empty
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlExistsExpr">
            <summary>
            Exists
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlExpr">
            <summary>
            
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlIdentifierExpr">
            <summary>
            Identifier
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlIdentityExpr">
            <summary>
            Identity
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlInListExpr">
            <summary>
            InList
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlInSubQueryExpr">
            <summary>
            In 子查询
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlIntExpr">
            <summary>
            Int
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlLongExpr">
            <summary>
            Long
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr">
            <summary>
            MethodInvoke
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlNCharExpr">
            <summary>
            NChar
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlNotExpr">
            <summary>
            Not
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlNullExpr">
            <summary>
            Null
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlPriorIdentifierExpr">
            <summary>
            PriorIdentifier
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Expr.SqlPriorIdentifierExpr.value">
            注意，如果是带双引号的别名，保存双引号存放在此
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlSomeExpr">
            <summary>
            Some
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlVarRefExpr">
            <summary>
            VarRef
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Expr.SqlOverExpr">
            <summary>
            Over子句
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.HierarchicalQueryClause">
            <summary>
            HierarchicalQuery
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.JoinType">
            <summary>
            Join 类型定义
            inner join,Left Join,Right Join,Full Join,Cross Join
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.KHint">
             <summary>
             KHint
            <author>wedison</author>
             <date>2016-06-06</date>
             <version>v1.0</version>
             </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Dom.KHint.#ctor(System.String)">
            <summary>
            构造一个不带初始参数的HINT
            </summary>
            <param name="name">不能为null</param>
        </member>
        <member name="M:JieNor.Framework.SQL.Dom.KHint.#ctor(System.String,System.Collections.ICollection)">
            <summary>
            构造一个带多个初始参数的HINT
            </summary>
            <param name="name">不能为null</param>
            <param name="_params"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Dom.KHint.equals(System.Object)">
            <summary>
            判断两个KHint是否相等
            先判断名称是否相等,再判断参数是否相等
            注意:如果名称相等,参数个数与值也相同,但参数的顺序不相等,则认为是两个不同的KHint
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.OrderByMode">
            <summary>
            Order By子句定义类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqColumnConstraint">
            <summary>
            列约束类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlAlterTableAddDefaultItem">
            <summary>    
            修改表的缺省项目类
            <see cref="T:JieNor.Framework.SQL.Dom.SqlAlterTableItem"/>
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlAlterTableAddItem">
            <summary>
            指定添加一个或多个列定义、计算列定义或者表约束
            <see cref="T:JieNor.Framework.SQL.Dom.SqlAlterTableItem"/>
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlAlterTableAlterColumnItem">
            <summary>
            增加字段列类
            <see cref="T:JieNor.Framework.SQL.Dom.SqlAlterTableItem"/>
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlAlterTableDropDefaultItem">
            <summary>
            删除表的缺省项目类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlAlterTableDropItem">
            <summary>
            删除表项目类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlAlterTableItem">
            <summary>
            修改表语句基类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlCaseItem">
            <summary>
            CASE语句类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlColumnConstraint">
            <summary>
            列约束基类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlColumnDef">
            <summary>
            列定义基类
            COLLATE,NULL,DEFAULT,UNIQUE。。。
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlDelete">
            <summary>
            DELETE语句类
            DELETE FROM TABLE ...
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlGroupBy">
            <summary>
            GroupBy 子句类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlInsert">
            <summary>
            insert 语句类
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.SqlInsert.columnList">
            Each element in the returned list is a {@link SqlIdentifierExpr}.
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.SqlInsert.hints">
            ����Hint��Ϣ
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlJoinedTableSource">
            <summary>
            Join Table子句类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlObject">
            <summary>
            SqlObject
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlOrderByItem">
            <summary>
            Order By子句
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlSelect">
            <summary>
            Select 语句
            <see cref="T:JieNor.Framework.SQL.Dom.SqlSelectBase"/>
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlSelectBase">
            <summary>
            select 语句基类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Dom.SqlSelectBase.getOptionMapDirect">
            May be null
            
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Dom.SqlSelectBase.output(System.Text.StringBuilder)">
            @deprecated @see #output(StringBuilder, FormatOptions)
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlSelectInto">
            <summary>
            Select Into语句类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlSelectItem">
            <summary>
            Select 项目子句
            如select f1,f2 from ...
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlSelectLimit">
            <summary>
            SelectLimit
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlSubQueryTableSource">
            <summary>
            子查询语句类
            （select ...） as a
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlTableCheck">
            <summary>
            TableCheck
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlTableConstraint">
            <summary>
            表约束类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlTableForeignKey">
            <summary>
            外键定义类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlTablePrimaryKey">
            <summary>
            主键定义类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlTableSource">
            <summary>
            With Table表数据源类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlTableSourceBase">
            <summary>
            SqlTableSourceBase
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlTableUnique">
            <summary>
            表唯一性属性类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlTopType">
            <summary>
            Top 类型定义类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlUnionSelect">
            <summary>
            Union Select语句类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlUpdate">
            <summary>
            Update 语句类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlUpdateItem">
            <summary>
            修改表项目属性类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlExecStmt">
            <summary>
            Exec 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlFetchStmt">
            <summary>
            Fetch 游标语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlGotoStmt">
            <summary>
            GO TO语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt">
            <summary>
            If 条件语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlInsertStmt">
            <summary>
            Insert 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlLabelStmt">
            <summary>
            Oracle Label 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlOpenStmt">
            <summary>
            Open 打开游标语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlSelectStmt">
            <summary>
            Select语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlSetLocalVariantStmt">
            <summary>
            Set 设置变量值语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlShowColumnsStmt">
            <summary>
            Show collumns My Sql语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlShowTablesStmt">
            <summary>
            Show Tables My Sql 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlTrancateTableStmt">
            <summary>
            Truncate Table语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlUpdateStmt">
            <summary>
            Update 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt">
            <summary>
            While 语法    
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.CallStmt">
            <summary>
            Oracle Call调用存储过程语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.IndexStmtEnum">
            <summary>
            索引类型枚举类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt">
            <summary>
            Alter Table语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlAlterViewStmt">
            <summary>
            Alter View 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlBreakStmt">
            <summary>
            Break 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlCloseStmt">
            <summary>
            Close 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt">
            <summary>
            Continue 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlCreateIndexStmt">
            <summary>
            Create Index语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt">
            <summary>
            Create Table 语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt.columnList">
            Each element in the returned list is a {@link SqlColumnDef}.
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt.constraintList">
            Each element in the returned list is a {@link SqlColumnConstraint}.
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt.tableSpace">
            表空间
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlCreateViewStmt">
            <summary>
            Create View 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt">
            <summary>
            Cursor Loop 游标循环语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlDeallocateStmt">
            <summary>
            Deallocate 释放游标语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlDeclareVariantStmt">
            <summary>
            Declare Variant 声明变量语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlDeleteStmt">
            <summary>
            Delete 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlDropFunctionStmt">
            <summary>
            Drop Function 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlDropIndexStmt">
            <summary>
            Drop Index 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlDropTableStmt">
            <summary>
            Drop Table 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlDropTriggerStmt">
            <summary>
            Drop Trigger 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.SqlDropViewStmt">
            <summary>
            Drop View 语法
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.Stmt.StmtType">
            <summary>
            语法类型定义类
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.Select">
            <summary>
            select 语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.Delete">
            <summary>
            Delete 语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.Insert">
            <summary>
            Insert 语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.Update">
            <summary>
            Update 语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.DeclareVariant">
            <summary>
            声明变量语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.DeclareCursor">
            <summary>
            什么游标语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.Exec">
            <summary>
            Exec 语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.While">
            <summary>
            While 循环语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.Do">
            <summary>
            Do 循环语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.If">
            <summary>
            If 条件语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.Set">
            <summary>
            Set 设置变量值语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.TruncateTable">
            <summary>
            Truncate Table 清空表语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.CreateDatabase">
            <summary>
            Create DataBase 创建数据库语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.CreateFunction">
            <summary>
            Create Function 创建函数语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.CreateIndex">
            <summary>
            Create Index 创建索引语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.CreateProcedure">
            <summary>
            Create Procedure创建存储过程语法
            
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.CreateTalble">
            <summary>
            Create Table 创建表语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.CreateTrigger">
            <summary>
            Create Trigger 创建触发器语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.CreateView">
            <summary>
            Create View 创建视图语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.AlterDatabase">
            <summary>
            Alter Database 修改数据库属性语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.AlterFunction">
            <summary>
            Alter Function 修改函数语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.AlterProcedure">
            <summary>
            Alter Procedure 修改存储过程语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.AlterTable">
            <summary>
            Alter Table 修改表属性语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.AlterTrigger">
            <summary>
            Alter Trigger 修改触发器语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.AlterView">
            <summary>
            Alter View 修改视图语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.DropDatabase">
            <summary>
            Drop DataBase 删除数据库语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.DropFunction">
            <summary>
            Drop Function 删除函数语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.DropProcedure">
            <summary>
            Drop Procedure 删除存储过程语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.DropTable">
            <summary>
            Drop Table 删除表语法
            
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.DropTrigger">
            <summary>
            Drop Trigger 删除触发器语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.DropView">
            <summary>
            Drop View 删除视图语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.DropIndex">
            <summary>
            Drop Index 删除索引语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.ShowColumns">
            <summary>
            MySQL显示列信息语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.ShowTables">
            <summary>
             show tables mysql显示表信息语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.Call">
            <summary>
            Oracle Call调用存储过程语法
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.Stmt.StmtType.Unknown">
            <summary>
            未知
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SubQueryUpdateItem">
            <summary>
            子查询更新类
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Dom.SubQueryUpdateItem.columnList">
            ItemType is String
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlBlockStmt">
            <summary>
            语句块基类类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlBlockStmt.DeclVarItem">
            <summary>
            变量声明类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Dom.SqlBlockStmt.DeclCurItem">
            <summary>
            游标声明类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Exception.DB2DropColumnException">
            <summary>
            B2DropColumnException
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Exception.DBNotSupportedException">
            <summary>
            DBNotSupportedException
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Exception.IllegalStateException">
            <summary>
            IllegalStateException 在非法或不适当的时间调用方法时产生的信号
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Exception.NotSupportedException">
            <summary>
            NotSupportedException
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Exception.ParserException">
            <summary>
            ParserException
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Exception.ParserException.#ctor(System.Exception,System.String,System.Int32)">
            解析异常
            @param ex
            @param ksql
            @param dbType
        </member>
        <member name="M:JieNor.Framework.SQL.Exception.ParserException.#ctor(System.Exception,System.String)">
            分析异常
            @param ex
            @param ksql
        </member>
        <member name="T:JieNor.Framework.SQL.Exception.RuntimeException">
            <summary>
            RuntimeException
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Exception.SqlTranslateException">
            <summary>
            TranslateException
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Exception.TODOException">
            <summary>
            TODOException
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Exception.TODOException.#ctor">
            
        </member>
        <member name="M:JieNor.Framework.SQL.Exception.TODOException.#ctor(System.String)">
            @param message
        </member>
        <member name="M:JieNor.Framework.SQL.Exception.TODOException.#ctor(System.Exception)">
            @param cause
        </member>
        <member name="M:JieNor.Framework.SQL.Exception.TODOException.#ctor(System.String,System.Exception)">
            @param message
            @param cause
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.DB2AS400SQLFormater">
            <summary>
            DB2AS400SQL格式器
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.DB2SQLFormater">
            <summary>
            DB2SQL格式化器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Boolean)">
            <summary>
            格式化2进制操作
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatTableSource(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            格式化表来源
            </summary>
            <param name="tableSource"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatPriorIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlPriorIdentifierExpr)">
            <summary>
            格式化前导标示符
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化方法映射
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatBlockStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt)">
            <summary>
            格式化语句块声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatIfStmt(JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt)">
            <summary>
            格式化IF声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatWhileStmt(JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt)">
            <summary>
            格式化While声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatDeallocateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeallocateStmt)">
            <summary>
            格式化Deallocate声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatCloseStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCloseStmt)">
            <summary>
            格式化关闭声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatSetLocalVariantStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSetLocalVariantStmt)">
            <summary>
            格式化设置本地变量声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatOpenStmt(JieNor.Framework.SQL.Dom.Stmt.SqlOpenStmt)">
            <summary>
            格式化打开声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatCursorLoopStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt)">
            <summary>
            格式化游标循环声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatFetchStmt(JieNor.Framework.SQL.Dom.Stmt.SqlFetchStmt)">
            <summary>
            格式化游标匹配声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatBreakStmt(JieNor.Framework.SQL.Dom.Stmt.SqlBreakStmt)">
            <summary>
            格式化Break声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatContinueStmt(JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt)">
            <summary>
            格式化Continue声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatGotoStmt(JieNor.Framework.SQL.Dom.Stmt.SqlGotoStmt)">
            <summary>
            格式化Goto声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatLabelStmt(JieNor.Framework.SQL.Dom.Stmt.SqlLabelStmt)">
            <summary>
            格式化标签行声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            格式化创建表声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatAlterTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化修改表声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatDateTimeExpr(JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr)">
            <summary>
            格式化日期类型
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatColumnDef(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化列定义
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatExecStmt(JieNor.Framework.SQL.Dom.Stmt.SqlExecStmt)">
            <summary>
            格式化Execute声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatShowTablesStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowTablesStmt)">
            <summary>
            格式化Showtables声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatShowColumnsStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowColumnsStmt)">
            <summary>
            格式化ShowColumns声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DB2SQLFormater.FormatSelect(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化Select子句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.FormaterException">
            <summary>
            格式化器异常类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.FormatOptions">
            <summary>
            KSQL翻译选项
            在调用<code>com.JieNor.Framework.sql.TransUtil.translate(string, int, FormatOptions)</code>时传入,以影响最终翻译结果.
            这些翻译选项可以通过数据库连接(@see com.JieNor.Framework.sql.shell.KDConnection)的URL传入.并在TransUtil类翻译时产生作用.
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Formater.FormatOptions.nologging">
                     无日志选项
                     * @see com.JieNor.Framework.sql.shell.KDDriver#OPTIONS_NOLOGGING
        </member>
        <member name="F:JieNor.Framework.SQL.Formater.FormatOptions.dbSchema">
            数据库模式选项
            @see com.JieNor.Framework.sql.shell.KDDriver#OPTIONS_DBSCHEMA
        </member>
        <member name="F:JieNor.Framework.SQL.Formater.FormatOptions.tableSchema">
            表模式
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.FormatOptions.GetDbSchema">
            <summary>
            数据库架构
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.FormatOptions.SetDbSchema(System.String)">
            <summary>
            设置数据库架构
            </summary>
            <param name="dbSchema"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.FormatOptions.IsNologging">
            <summary>
            获取是否记录日志
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.FormatOptions.SetNologging(System.Boolean)">
            <summary>
            设置是否记录日志
            </summary>
            <param name="nologging"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.FormatOptions.Clone">
            <summary>
            复制
            </summary>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.SQLFormater">
            <summary>
            SQL格式化器抽象类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.GetBuffer">
            <summary>
            获得格式化器的内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.SetBuffer(System.String)">
            <summary>
            设置翻译器的内容
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.GetOptions">
            <summary>
            获得KSQL翻译器选项
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.SetOptions(JieNor.Framework.SQL.Formater.FormatOptions)">
            <summary>
            设置翻译选项
            </summary>
            <param name="options"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.AfterFormat(System.Text.StringBuilder)">
            <summary>
            完成翻译之后的处理
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatStmt(JieNor.Framework.SQL.Dom.Stmt.SqlStmt)">
            <summary>
            翻译语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatSelectBase(JieNor.Framework.SQL.Dom.SqlSelectBase)">
            <summary>
            翻译select语句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatCallStmt(JieNor.Framework.SQL.Dom.Stmt.CallStmt)">
            <summary>
            翻译Call语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            翻译表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr,System.Boolean)">
            <summary>
            翻译表达式
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatTableName(System.String)">
            <summary>
            格式化表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatViewName(System.String)">
            <summary>
            格式化视图名
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatConstraintName(System.String)">
            <summary>
            格式化约束名
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatColumnName(System.String)">
            <summary>
            格式化列名
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormateIndexName(System.String)">
            <summary>
            格式化索引名
            </summary>
            <param name="indexName"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FunctionCount">
            <summary>
            获取函数数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.AddFunction(JieNor.Framework.SQL.Schema.FunctionDef)">
            <summary>
            增加函数
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.RemoveParameter(JieNor.Framework.SQL.Schema.FunctionDef)">
            <summary>
            移除参数
            </summary>
            <param name="func"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.RemoveFunctionAt(System.Int32)">
            <summary>
            按位置移除函数
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.ClearFunction">
            <summary>
            清空函数列表
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.GetFunction(System.Int32)">
            <summary>
            按位置获得函数定义
            </summary>
            <param name="funcIndex"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.GetFunction(System.String)">
            <summary>
            按名字获得函数定义
            </summary>
            <param name="funcName"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.ValidateCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            验证创建表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.ValidConstraintName(System.String)">
            <summary>
            验证约束名称
            </summary>
            <param name="constriantName"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.GetIndexName(JieNor.Framework.SQL.Dom.Stmt.SqlCreateIndexStmt)">
            <summary>
            获得索引名称
            </summary>
            <param name="stmt"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.GetIndexName(JieNor.Framework.SQL.Dom.Stmt.SqlDropIndexStmt)">
            <summary>
            获得索引名称
            </summary>
            <param name="stmt"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.ReplaceBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Collections.Hashtable)">
            <summary>
            替换二进制操作
            </summary>
            <param name="expr"></param>
            <param name="replaceMap"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.ReplaceExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr,System.Collections.Hashtable)">
            <summary>
            对表达式进行替换处理
            </summary>
            <param name="expr"></param>
            <param name="replaceMap"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.ReplaceCaseExpr(JieNor.Framework.SQL.Dom.Expr.SqlCaseExpr,System.Collections.Hashtable)">
            <summary>
            替换case表达式
            </summary>
            <param name="expr"></param>
            <param name="replaceMap"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.IsToUpperCaseExpr(JieNor.Framework.SQL.Dom.Expr.SqlIdentifierExpr)">
            <summary>
            是否忽略大小写
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatAnyExpr(JieNor.Framework.SQL.Dom.Expr.SqlAnyExpr)">
            <summary>
            格式化any表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatBetweenExpr(JieNor.Framework.SQL.Dom.Expr.SqlBetweenExpr)">
            <summary>
            格式化between表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatSomeExpr(JieNor.Framework.SQL.Dom.Expr.SqlSomeExpr)">
            <summary>
            格式化some表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatInListExpr(JieNor.Framework.SQL.Dom.Expr.SqlInListExpr)">
             <summary>
            格式化In列表表达式
             </summary>
             <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatDropViewStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDropViewStmt)">
            <summary>
            格式化删除视图语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatExiststExpr(JieNor.Framework.SQL.Dom.Expr.SqlExistsExpr)">
            <summary>
            格式化exists表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatDropTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDropTableStmt)">
            <summary>
            格式化删除表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatDropTriggerStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDropTriggerStmt)">
            <summary>
            格式化删除触发器语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatCreateViewStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateViewStmt)">
            <summary>
            格式化创建视图语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatSelectStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSelectStmt)">
            <summary>
            格式化select语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatAlterViewStmt(JieNor.Framework.SQL.Dom.Stmt.SqlAlterViewStmt)">
            <summary>
            格式化修改视图语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormateUpdateItem(JieNor.Framework.SQL.Dom.AbstractUpdateItem)">
            <summary>
            格式化更新的项目列表
            </summary>
            <param name="abstract_item"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatUpdateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlUpdateStmt)">
            <summary>
            格式化更新语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatInSubQueryExpr(JieNor.Framework.SQL.Dom.Expr.SqlInSubQueryExpr)">
            <summary>
            格式化in子查询语句
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatCaseExpr(JieNor.Framework.SQL.Dom.Expr.SqlCaseExpr)">
            <summary>
            格式化case表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatDeleteStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeleteStmt)">
            <summary>
            格式化delete语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatHintForDelete(JieNor.Framework.SQL.Dom.Stmt.SqlDeleteStmt)">
            <summary>
            格式化delete语句的提示
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatInsertStmt(JieNor.Framework.SQL.Dom.Stmt.SqlInsertStmt)">
            <summary>
            格式化Insert语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatCreateIndexStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateIndexStmt)">
            <summary>
            格式化创建索引语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatTrancateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlTrancateTableStmt)">
            <summary>
            格式化清空表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatAggregateExprExpr(JieNor.Framework.SQL.Dom.Expr.SqlAggregateExpr)">
            <summary>
            格式化Aggregate表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatChar(JieNor.Framework.SQL.Dom.Expr.SqlCharExpr)">
            <summary>
            格式化字符串数值
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatNChar(JieNor.Framework.SQL.Dom.Expr.SqlNCharExpr)">
            <summary>
            格式化NChar数值
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatAllExpr(JieNor.Framework.SQL.Dom.Expr.SqlAllExpr)">
            <summary>
            格式化All表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            格式化标识符
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatDropFunction(JieNor.Framework.SQL.Dom.Stmt.SqlDropFunctionStmt)">
            <summary>
            格式化删除函数语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatNotExpr(JieNor.Framework.SQL.Dom.Expr.SqlNotExpr)">
            <summary>
            格式化not表达式
            </summary>
            <param name="notExpr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatDropIndexStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDropIndexStmt)">
            <summary>
            格式化删除索引语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatNullExpr(JieNor.Framework.SQL.Dom.Expr.SqlNullExpr)">
            <summary>
            格式化null表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatEmptyExpr(JieNor.Framework.SQL.Dom.Expr.SqlEmptyExpr)">
            <summary>
            格式化Empty表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormeatUnkownMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化未知方法映射
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatQueryExpr(JieNor.Framework.SQL.Dom.Expr.QueryExpr)">
            <summary>
            格式化查询表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatVarRef(JieNor.Framework.SQL.Dom.Expr.SqlVarRefExpr)">
            <summary>
            格式化变量引用
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatDefault(JieNor.Framework.SQL.Dom.Expr.SqlDefaultExpr)">
            <summary>
            缺省值格式化
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.process(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Int32,System.Int32,System.Collections.Hashtable)">
            <summary>
            执行格式化 
            </summary>
            <param name="expr"></param>
            <param name="leftBracket"></param>
            <param name="rightBracket"></param>
            <param name="options"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Boolean)">
            <summary>
            格式化二进制操作
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatTableSource(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            格式化表来源
            </summary>
            <param name="tableSource"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatPriorIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlPriorIdentifierExpr)">
            <summary>
            格式化前导标识符
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化方法映射
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatBlockStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt)">
            <summary>
            格式化块语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatIfStmt(JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt)">
            <summary>
            格式化if语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatWhileStmt(JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt)">
            <summary>
            格式化while语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatDeallocateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeallocateStmt)">
            <summary>
            格式化dellocate语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatCloseStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCloseStmt)">
            <summary>
            格式化close语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatSetLocalVariantStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSetLocalVariantStmt)">
            <summary>
            格式化设置本地变量语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatOpenStmt(JieNor.Framework.SQL.Dom.Stmt.SqlOpenStmt)">
            <summary>
            格式化open语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatCursorLoopStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt)">
            <summary>
            格式化游标循环语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatFetchStmt(JieNor.Framework.SQL.Dom.Stmt.SqlFetchStmt)">
            <summary>
            格式化fetch语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatBreakStmt(JieNor.Framework.SQL.Dom.Stmt.SqlBreakStmt)">
            <summary>
            格式化break语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatContinueStmt(JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt)">
            <summary>
            格式化ontinue语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatGotoStmt(JieNor.Framework.SQL.Dom.Stmt.SqlGotoStmt)">
            <summary>
            格式化goto语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatLabelStmt(JieNor.Framework.SQL.Dom.Stmt.SqlLabelStmt)">
            <summary>
            格式化标签语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            格式化创建表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatAlterTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化你表结构修改语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatDateTimeExpr(JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr)">
            <summary>
            格式化日期类型
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatColumnDef(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化列定义
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatExecStmt(JieNor.Framework.SQL.Dom.Stmt.SqlExecStmt)">
            <summary>
            格式化execute语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatShowTablesStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowTablesStmt)">
            <summary>
            格式化获得表列表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatShowColumnsStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowColumnsStmt)">
            <summary>
            格式化获得字段列表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatSelect(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化select 语句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.FormatIdentity(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            格式化处理SELECT语句中的IDENTITY字段
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.SQLFormater.ReplaceMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr,System.Collections.Hashtable)">
            <summary>
            替换方法映射
            </summary>
            <param name="expr"></param>
            <param name="replaceMap"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.DerbySQLFormater">
            <summary>
            DerbySQL格式化器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Boolean)">
            <summary>
            格式化2进制操作
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatTableSource(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            格式化表来源
            </summary>
            <param name="tableSource"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatPriorIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlPriorIdentifierExpr)">
            <summary>
            格式化前导标示符
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化方法映射
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatBlockStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt)">
            <summary>
            格式化语句块声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatIfStmt(JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt)">
            <summary>
            格式化IF声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatWhileStmt(JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt)">
            <summary>
            格式化While声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatDeallocateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeallocateStmt)">
            <summary>
            格式化Deallocate声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatCloseStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCloseStmt)">
            <summary>
            格式化关闭声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatSetLocalVariantStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSetLocalVariantStmt)">
            <summary>
            格式化设置本地变量声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatOpenStmt(JieNor.Framework.SQL.Dom.Stmt.SqlOpenStmt)">
            <summary>
            格式化打开声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatCursorLoopStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt)">
            <summary>
            格式化游标循环声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatFetchStmt(JieNor.Framework.SQL.Dom.Stmt.SqlFetchStmt)">
            <summary>
            格式化游标匹配声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatBreakStmt(JieNor.Framework.SQL.Dom.Stmt.SqlBreakStmt)">
            <summary>
            格式化Break声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatContinueStmt(JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt)">
            <summary>
            格式化Continue声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatGotoStmt(JieNor.Framework.SQL.Dom.Stmt.SqlGotoStmt)">
            <summary>
            格式化Goto声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatLabelStmt(JieNor.Framework.SQL.Dom.Stmt.SqlLabelStmt)">
            <summary>
            格式化标签行声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            格式化创建表声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatAlterTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化修改表声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatDateTimeExpr(JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr)">
            <summary>
            格式化日期类型
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatColumnDef(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化列定义
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatExecStmt(JieNor.Framework.SQL.Dom.Stmt.SqlExecStmt)">
            <summary>
            格式化Execute声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatShowTablesStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowTablesStmt)">
            <summary>
            格式化Showtables声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatShowColumnsStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowColumnsStmt)">
            <summary>
            格式化ShowColumns声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DerbySQLFormater.FormatSelect(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化Select子句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.DrSQLFormater">
            <summary>
            DrSQL格式化器
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Formater.DrSQLFormater.instance">
            该实现例不能用于翻译,因为其是共享的, 用于翻译会导致结果的不确定.
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatInsertStmt(JieNor.Framework.SQL.Dom.Stmt.SqlInsertStmt)">
            <summary>
            格式化Insert声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.GetStandardFuncList_0">
            数学函数
            
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.IsValidateTableName(System.String)">
            判断是否合法的表名，判断了表名的最大长度，是否包含非法的字符，是否关键字
            
            @param tableName
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.IsValidateIdentifier(System.String)">
            判断是否合法的标识符，判断了列名的最大长度，是否包含非法的字符，是否关键字
            
            @param ident
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.IsValidateColumnName(System.String)">
            判断是否合法的列名，判断了列名的最大长度，是否包含非法的字符，是否关键字
            
            @param tableName
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.IsValidateIndexName(System.String)">
            判断是否合法的索引名，判断了索引名的最大长度，是否包含非法的字符，是否关键字
            
            @param tableName
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.IsValidateConstraintName(System.String)">
            判断是否合法的约束名，判断了约束名的最大长度，是否包含非法的字符，是否关键字
            
            @param tableName
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.GetStandardFuncList_1">
            字符函数
            
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatShowTablesStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowTablesStmt)">
            <summary>
            格式化获得表列表
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatShowColumnsStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowColumnsStmt)">
            <summary>
            格式化获得字段列表
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatExecStmt(JieNor.Framework.SQL.Dom.Stmt.SqlExecStmt,JieNor.Framework.SQL.Formater.FormatOptions)">
            <summary>
            格式化Exec声明
            </summary>
            <param name="stmt"></param>
            <param name="options"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatColumnDef(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化列定义
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatSelectItem(JieNor.Framework.SQL.Dom.SqlSelectItem)">
            <summary>
            格式化选择的项目
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatSelect(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化select语句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatTableSource(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            格式化来源表，关联关系
            </summary>
            <param name="tableSource"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatDateTimeExpr(JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr)">
            <summary>
            格式化日期类型
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化方法映射
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Boolean)">
            <summary>
            格式化二进制操作
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.ValidateCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            验证创建表的语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatBlockStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt)">
            <summary>
            格式化语句块声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatSetLocalVariantStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSetLocalVariantStmt)">
            <summary>
            格式设置变量
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatIfStmt(JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt)">
            <summary>
            格式化IF声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatWhileStmt(JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt)">
            <summary>
            格式化while声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatDeallocateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeallocateStmt)">
            <summary>
            格式化Deallocate声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatCloseStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCloseStmt)">
            <summary>
            格式化关闭声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatOpenStmt(JieNor.Framework.SQL.Dom.Stmt.SqlOpenStmt)">
            <summary>
            格式化打开声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatCursorLoopStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt)">
            <summary>
            格式化游标循环声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatFetchStmt(JieNor.Framework.SQL.Dom.Stmt.SqlFetchStmt)">
            <summary>
            格式化游标匹配声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatBreakStmt(JieNor.Framework.SQL.Dom.Stmt.SqlBreakStmt)">
            <summary>
            格式化Break声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatContinueStmt(JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt)">
            <summary>
            格式化Continue声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatGotoStmt(JieNor.Framework.SQL.Dom.Stmt.SqlGotoStmt)">
            <summary>
            格式化Goto声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatLabelStmt(JieNor.Framework.SQL.Dom.Stmt.SqlLabelStmt)">
            <summary>
            格式化标签行声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            格式化创建表声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatDropTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDropTableStmt)">
            <summary>
            格式化删除表的声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatAlterTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化修改表的声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatSelectStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSelectStmt)">
            <summary>
            格式化Select子句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatUpdateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlUpdateStmt)">
            <summary>
            格式化Update的声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrSQLFormater.FormatDeleteStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeleteStmt)">
            <summary>
            格式化Delete的声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.DrStyleSQLFormater">
            <summary>
            DrStyleSQL格式化器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrStyleSQLFormater.FormatSelect(JieNor.Framework.SQL.Dom.SqlSelect,System.Text.StringBuilder,JieNor.Framework.SQL.Formater.FormatOptions)">
            <summary>
            格式化select语句
            </summary>
            <param name="select"></param>
            <param name="buffer"></param>
            <param name="options"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.DrStyleSQLFormater.FormatTableSource(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            格式化来源表
            </summary>
            <param name="tableSource"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.FormaterFactory">
            <summary>
            格式化器抽象类工厂
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.Hints">
             Hints表示各数据库支持的HINTS
             @author michael_pan
            
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.Hints.FormatHints(System.Collections.IList,JieNor.Framework.SQL.Dom.SqlObject)">
            格式化输出Hint列表
            @param hints
            @param sql
            @return
            @throws FormaterException
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.MSTransactSQLFormater">
            <summary>
            SQL Server数据库SQL格式化器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatShowTablesStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowTablesStmt)">
            <summary>
            格式化获得表列表的语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatInsertStmt(JieNor.Framework.SQL.Dom.Stmt.SqlInsertStmt)">
            <summary>
            格式化Insert语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatShowColumnsStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowColumnsStmt)">
            <summary>
            格式化获得字段列表的语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatTableName(System.String)">
            <summary>
            格式化表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            格式化创建表的语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatTableConstraint(JieNor.Framework.SQL.Dom.SqlTableConstraint)">
            <summary>
            格式化表约束
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatTableSpace(System.String)">
            <summary>
            格式化表空间
            </summary>
            <param name="tableSpace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatColumnDef(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化列定义
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatColumnCollate(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化列排序规则
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化方法映射
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatBlockStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt)">
            <summary>
            格式化语句块声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatSetLocalVariantStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSetLocalVariantStmt)">
            <summary>
            格式化设置变量声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatIfStmt(JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt)">
            <summary>
            格式化IF声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatWhileStmt(JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt)">
            <summary>
            格式化while声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatDeallocateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeallocateStmt)">
            <summary>
            格式化Deallocate声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatCloseStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCloseStmt)">
            <summary>
            格式化关闭声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatOpenStmt(JieNor.Framework.SQL.Dom.Stmt.SqlOpenStmt)">
            <summary>
            格式化打开声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatCursorLoopStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt)">
            <summary>
            格式化游标循环声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatFetchStmt(JieNor.Framework.SQL.Dom.Stmt.SqlFetchStmt)">
            <summary>
            格式化游标匹配声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatBreakStmt(JieNor.Framework.SQL.Dom.Stmt.SqlBreakStmt)">
            <summary>
            格式化Break声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatContinueStmt(JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt)">
            <summary>
            格式化Continue声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatGotoStmt(JieNor.Framework.SQL.Dom.Stmt.SqlGotoStmt)">
            <summary>
            格式化Goto声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatLabelStmt(JieNor.Framework.SQL.Dom.Stmt.SqlLabelStmt)">
            <summary>
            格式化标签行声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatCreateIndexStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateIndexStmt)">
            <summary>
            格式化索引创建语句
            </summary>
            <param name="stmt"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatUpdateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlUpdateStmt)" -->
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr,System.Boolean)">
            <summary>
            格式化获得所有字段（*）的语句
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MSTransactSQLFormater.FormatIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            格式化标识符
            </summary>
            <param name="expr"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.MySQLFormater">
            <summary>
            MySQL数据库格式化器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatShowTablesStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowTablesStmt)">
            <summary>
            格式化获得表列表的语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatShowColumnsStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowColumnsStmt)">
            <summary>
            格式化获得字段列表的语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatExecStmt(JieNor.Framework.SQL.Dom.Stmt.SqlExecStmt)">
            <summary>
            格式化语句执行语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatColumnDef(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化列定义
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatAlterTableStmtOld(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化表结构修改语句
            Old
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatAlterTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化表结构修改语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatDateTimeExpr(JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr)">
            <summary>
            格式化日期类型声明
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatSelect(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化select语句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化方法映射
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatDateTimeFunc(System.String,JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化日期函数
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatMathFunc(System.String,JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化数学函数
            </summary>
            <param name="methodNameI"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Boolean)">
            <summary>
            格式化二进制操作声明
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            格式化创建表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatTableConstraintList(System.Collections.ICollection)">
            <summary>
            格式化表约束列表
            </summary>
            <param name="constraintList"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatTableConstraint(JieNor.Framework.SQL.Dom.SqlTableConstraint)">
            <summary>
            格式化表约束
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatTableSource(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            格式化表来源
            </summary>
            <param name="tableSource"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatPriorIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlPriorIdentifierExpr)">
            <summary>
            格式化前导标识
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatBlockStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt)">
            <summary>
            格式化语句块声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatSetLocalVariantStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSetLocalVariantStmt)">
            <summary>
            格式化设置变量声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatIfStmt(JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt)">
            <summary>
            格式化IF声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatWhileStmt(JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt)">
            <summary>
            格式化while声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatDeallocateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeallocateStmt)">
            <summary>
            格式化Deallocate声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatCloseStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCloseStmt)">
            <summary>
            格式化关闭声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatOpenStmt(JieNor.Framework.SQL.Dom.Stmt.SqlOpenStmt)">
            <summary>
            格式化打开声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatCursorLoopStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt)">
            <summary>
            格式化游标循环声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatFetchStmt(JieNor.Framework.SQL.Dom.Stmt.SqlFetchStmt)">
            <summary>
            格式化游标匹配声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatBreakStmt(JieNor.Framework.SQL.Dom.Stmt.SqlBreakStmt)">
            <summary>
            格式化Break声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatContinueStmt(JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt)">
            <summary>
            格式化Continue声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatGotoStmt(JieNor.Framework.SQL.Dom.Stmt.SqlGotoStmt)">
            <summary>
            格式化Goto声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.MySQLFormater.FormatLabelStmt(JieNor.Framework.SQL.Dom.Stmt.SqlLabelStmt)">
            <summary>
            格式化标签行声明
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.Oracle10gHints">
            <summary>
            Oracle10g提示类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.Oracle10SQLFormater">
            <summary>
            Oracle10SQL格式化器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.Oracle10SQLFormater.FormatDropTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDropTableStmt)">
            <summary>
            格式化删除表的语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.Oracle9iHints">
            <summary>
            Oracle9i提示类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.Oracle9SQLFormater">
            <summary>
            Oracle9SQL格式化器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.Oracle9SQLFormater.FormatNChar(JieNor.Framework.SQL.Dom.Expr.SqlNCharExpr)">
            <summary>
            NChar数据类型格式化
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.Oracle9SQLFormater.FormatInsertStmt(JieNor.Framework.SQL.Dom.Stmt.SqlInsertStmt)">
            <summary>
            格式化insert语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.Oracle9SQLFormater.FormatColumnDef(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化列定义语句
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.Oracle9SQLFormater.FormatSelect(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化select语句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.Oracle9SQLFormater.FormatTableSource(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            格式化来源表语句
            </summary>
            <param name="tableSource"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.OracleHints">
            <summary>
             OracleHints类是一个工具类,它的功能有:
             1. 判断KHint是否合法的Oracle hint
              2. 将KHint 按照Oracle hint的格式输出
              @author michael_pan
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleHints.NewHint(System.String)">
            <summary>
            新建一个Hint
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleHints.#ctor">
            <summary>
            单例模式,不能外部实例化
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleHints.FormatHints(System.Collections.IList,JieNor.Framework.SQL.Dom.SqlObject)">
            <summary>
            格式化输出 Hint
            </summary>
            <param name="hints"></param>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleHints.FormatHints(System.Collections.IList,JieNor.Framework.SQL.Dom.SqlObject,System.Text.StringBuilder)">
            <summary>
            格式化输出 Hint
            </summary>
            <param name="hints"></param>
            <param name="sql"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleHints.CheckHint(JieNor.Framework.SQL.Dom.KHint,System.Text.StringBuilder)">
            <summary>
             检查一个Hint是否合法
            </summary>
            <param name="hint"></param>
            <param name="sb">s用于保存错误信息</param>
            <returns>合法则返回true, 否则返回false</returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleHints.Output(JieNor.Framework.SQL.Dom.KHint,System.Text.StringBuilder)">
            <summary>
             格式化输出一个hint
            </summary>
            <param name="hint">确保该hint是合法的oracle hint</param>
            <param name="buffer"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleHints.Output(JieNor.Framework.SQL.Dom.KHint,System.Text.StringBuilder,System.Boolean)">
            <summary>
            格式化输出一个hint
            </summary>
            <param name="hint"></param>
            <param name="buffer"></param>
            <param name="flag"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.OracleHints.OraHint">
            <summary>
            内部类,用于保存一个Oracle Hint的规范信息
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleHints.OraHint.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            构建方法
            </summary>
            <param name="name">名称,必须不能为null,否则将抛出空指什异常</param>
            <param name="value"></param>
            <param name="type"></param>
            <param name="minParamSize">最小的参数数目</param>
            <param name="maxParamSize">最大的参数数目</param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.OracleSQLFormater">
            <summary>
            Oracle数据库SQL格式化器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatNChar(JieNor.Framework.SQL.Dom.Expr.SqlNCharExpr)">
            <summary>
            格式化NChar
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatExecStmt(JieNor.Framework.SQL.Dom.Stmt.SqlExecStmt)">
            <summary>
            格式化Exec语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.Format(System.Collections.ICollection)">
            <summary>
            重写格式化字符串
            </summary>
            <param name="stmtList"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatHintForDelete(JieNor.Framework.SQL.Dom.Stmt.SqlDeleteStmt)">
            <summary>
            格式化删除Hint
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatShowTablesStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowTablesStmt)">
            <summary>
            格式化获得表列表
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatShowColumnsStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowColumnsStmt)">
            <summary>
            格式化获得字段列表
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatAlterTableStmtOld(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化修改表结构
            old
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatAlterTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化修改表结构
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            格式化创建表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatTableConstraint(JieNor.Framework.SQL.Dom.SqlTableConstraint)">
            <summary>
            格式化表约束语句
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatTableConstraintList(System.Collections.ICollection)">
            <summary>
            格式化表约束列表
            </summary>
            <param name="constraintList"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatTableSpace(System.String)">
            <summary>
            格式化表空间
            </summary>
            <param name="tableSpace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatCreateIndexStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateIndexStmt)">
            <summary>
            格式化创建索引语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatColumnDef(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化列定义
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormateQueryHints(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化查询Hints
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatSelect(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化查询语句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.ComputeTableSourceList(JieNor.Framework.SQL.Dom.SqlTableSourceBase,System.Collections.ArrayList)">
            <summary>
            计算表来源列表
            </summary>
            <param name="tableSource"></param>
            <param name="tableSourceList"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.AppendJoinedCondition(System.Collections.ArrayList,JieNor.Framework.SQL.Dom.SqlJoinedTableSource,System.Boolean)">
            <summary>
            添加guanlian条件
            </summary>
            <param name="tableSourceList"></param>
            <param name="tableSource"></param>
            <param name="whereFlag"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.AppendOuterJoinCondition(System.Collections.ArrayList,JieNor.Framework.SQL.Dom.Expr.SqlExpr,System.Boolean)">
            <summary>
            添加外连接关联条件
            </summary>
            <param name="tableSourceList"></param>
            <param name="conditionExpr"></param>
            <param name="leftJoin"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.getRootExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            格式化root表达式
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatTableSource(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            格式化表来源
            </summary>
            <param name="tableSource"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatDateTimeExpr(JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr)">
            <summary>
            格式化日期
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatCaseExpr(JieNor.Framework.SQL.Dom.Expr.SqlCaseExpr)">
            <summary>
            格式化Case表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化方法映射表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.Format_TOCHAR_Invoke(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化到字符的转换
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.Format_TO_DATE_Invoke(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化到日期的转换
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Boolean)">
            <summary>
            格式化二进制操作表达式
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatPriorIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlPriorIdentifierExpr)">
            <summary>
            格式化前导标识表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatUpdateStmtForSepecific(JieNor.Framework.SQL.Dom.SqlUpdate)">
            <summary>
            格式化特殊更新语句
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatUpdateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlUpdateStmt)">
            <summary>
            格式化更新语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatUpdateStmt_New(JieNor.Framework.SQL.Dom.Stmt.SqlUpdateStmt)">
            <summary>
            格式化更新语句
            new
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatSelectForUpdate(JieNor.Framework.SQL.Dom.SqlSelectBase,JieNor.Framework.SQL.Dom.SqlUpdate,JieNor.Framework.SQL.Dom.SubQueryUpdateItem,System.String,System.String)">
            <summary>
            格式化Select语句ForUpdate语句
            </summary>
            <param name="select"></param>
            <param name="update"></param>
            <param name="queryItem"></param>
            <param name="tPrefix"></param>
            <param name="vPrefix"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.TableSourceExist(JieNor.Framework.SQL.Dom.SqlSelectBase,System.String,System.String)">
            <summary>
            判断表来源列表中是否存在指定的表
            </summary>
            <param name="select"></param>
            <param name="name"></param>
            <param name="alais"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.tableSourceExist(JieNor.Framework.SQL.Dom.SqlTableSourceBase,System.String,System.String)">
            <summary>
            判断表来源列表中是否存在指定的表
            </summary>
            <param name="selectBase"></param>
            <param name="name"></param>
            <param name="alais"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatUpdateStmt_old(JieNor.Framework.SQL.Dom.Stmt.SqlUpdateStmt)">
            <summary>
            格式化更新语句
            Old
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatBlockStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt)">
            <summary>
            格式化语句块表达式
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatSetLocalVariantStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSetLocalVariantStmt)">
            <summary>
            格式化设置本地变量
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatVarRef(JieNor.Framework.SQL.Dom.Expr.SqlVarRefExpr)">
            <summary>
            格式化变量引用
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatIfStmt(JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt)">
            <summary>
            格式化if表达式
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatIfStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt,JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt)">
            <summary>
            格式化if表达式
            </summary>
            <param name="block"></param>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatWhileStmt(JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt)">
            <summary>
            格式化While表达式
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatWhileStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt,JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt)">
            <summary>
            格式化While表达式
            </summary>
            <param name="block"></param>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatDeallocateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeallocateStmt)">
            <summary>
            格式化Delalocate表达式
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatCloseStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCloseStmt)">
            <summary>
            格式化close表达式
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatOpenStmt(JieNor.Framework.SQL.Dom.Stmt.SqlOpenStmt)">
            <summary>
            格式化open语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatCursorLoopStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt)">
            <summary>
            格式化游标循环语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatCursorLoopStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt,JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt)">
            <summary>
            格式化游标循环语句
            </summary>
            <param name="block"></param>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatFetchStmt(JieNor.Framework.SQL.Dom.Stmt.SqlFetchStmt)">
            <summary>
            格式化游标匹配语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatBreakStmt(JieNor.Framework.SQL.Dom.Stmt.SqlBreakStmt)">
            <summary>
            格式化Break语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatContinueStmt(JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt)">
            <summary>
            格式化Continue语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatContinueStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt,JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt)">
            <summary>
            格式化Continue语句
            </summary>
            <param name="block"></param>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt,JieNor.Framework.SQL.Dom.Stmt.SqlStmt)">
            <summary>
            格式化语句
            </summary>
            <param name="block"></param>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatGotoStmt(JieNor.Framework.SQL.Dom.Stmt.SqlGotoStmt)">
            <summary>
            格式化goto语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatLabelStmt(JieNor.Framework.SQL.Dom.Stmt.SqlLabelStmt)">
            <summary>
            格式化label语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatInListExpr(JieNor.Framework.SQL.Dom.Expr.SqlInListExpr)">
            <summary>
            格式化In或NotIn表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr,System.Boolean)">
            <summary>
            格式化表达式
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatIdentityExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            格式化Identity表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            格式化标识符表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatChar(JieNor.Framework.SQL.Dom.Expr.SqlCharExpr)">
            <summary>
            格式化字符
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatIFExistSelectBase(JieNor.Framework.SQL.Dom.SqlSelectBase)">
            <summary>
            格式化Exists判断表达式
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.OracleSQLFormater.FormatInsertStmt(JieNor.Framework.SQL.Dom.Stmt.SqlInsertStmt)">
            <summary>
            格式化Insert语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.PostgresSQLFormater">
            @author szuJobs
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.PostgresSQLFormater.FormatBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Boolean)">
            **
        </member>
        <member name="T:JieNor.Framework.SQL.Formater.TSQLFormater">
            <summary>
            TSQL格式化器
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatExecStmt(JieNor.Framework.SQL.Dom.Stmt.SqlExecStmt)">
            <summary>
            格式化Exec语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormateUpdateItem(JieNor.Framework.SQL.Dom.AbstractUpdateItem)">
            <summary>
            格式化更新项目
            </summary>
            <param name="abstract_item"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatUpdateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlUpdateStmt)">
            <summary>
            格式化update语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.replaceUpdateStmt(JieNor.Framework.SQL.Dom.SqlUpdate)">
            <summary>
            replaceupdate语句
            </summary>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.isUpdateSelf(JieNor.Framework.SQL.Dom.SqlUpdate,JieNor.Framework.SQL.Dom.SqlJoinedTableSource)">
            <summary>
            是否是自更新
            </summary>
            <param name="update"></param>
            <param name="joinTableSource"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatAlterTableStmtOld(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化表结构修改语句
            old
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatAlterTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            格式化表结构修改语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatCreateTableStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            格式化表创建语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.checkHaveChineseOrderBy(System.Collections.IList)">
            <summary>
            检查是否设置了中文排序规则
            </summary>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSelect(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化select子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSelectGroupBy(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化GroupBy子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSelectHaving(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化having子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSelectOrderBy(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化OrderBy子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSelectCondition(JieNor.Framework.SQL.Dom.SqlSelect,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            格式化条件子句
            </summary>
            <param name="select"></param>
            <param name="sysTableFlag"></param>
            <param name="sysIndexFlag"></param>
            <param name="sysConstraintFlag"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSelectTabSrc(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化表来源
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSelectInto(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化Into子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSelectLimit(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化结果限制子句(Top...)
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSelectDistinct(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            格式化Distinct子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.ReplaceUpdateTableAlias(JieNor.Framework.SQL.Dom.SqlTableSourceBase,System.Collections.Hashtable)">
            <summary>
            替换更新语句表别名
            </summary>
            <param name="tableSource"></param>
            <param name="updateTableAliasMap"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatTableSource(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            格式化表来源
            </summary>
            <param name="tableSource"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Boolean)">
            <summary>
            格式化二进制操作表达式
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatDropIndexStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDropIndexStmt)">
            <summary>
            格式化删除索引语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatDateTimeExpr(JieNor.Framework.SQL.Dom.Expr.SqlDateTimeExpr)">
            <summary>
            格式化日期表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatPriorIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlPriorIdentifierExpr)">
            <summary>
            格式化前导标识符
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatAggregateExprExpr(JieNor.Framework.SQL.Dom.Expr.SqlAggregateExpr)">
            <summary>
            格式化聚合选项表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatTableConstraintList(System.Collections.ICollection)">
            <summary>
            格式化表约束列表
            </summary>
            <param name="constraintList"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatTableConstraint(JieNor.Framework.SQL.Dom.SqlTableConstraint)">
            <summary>
            格式化表约束
            </summary>
            <param name="constraint"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatIdentifierExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            格式化标识符
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr,System.Boolean)">
            <summary>
            格式化表达式
            </summary>
            <param name="expr"></param>
            <param name="appendBrace"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatIdentityExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            格式化Identity表达式
            </summary>
            <param name="sqlexpr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatDataType(System.String)">
            <summary>
            格式化数据类型
            </summary>
            <param name="dataType"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatValueKSQL_COL_NULLABLE(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr)">
            <summary>
            格式化是否为空声明
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatMethodInvokeExpr(JieNor.Framework.SQL.Dom.Expr.SqlMethodInvokeExpr)">
            <summary>
            格式化方法映射表达式
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatBlockStmt(JieNor.Framework.SQL.Dom.SqlBlockStmt)">
            <summary>
            格式化块语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatIfStmt(JieNor.Framework.SQL.Dom.Stmt.SqlIfStmt)">
            <summary>
            格式化If语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatWhileStmt(JieNor.Framework.SQL.Dom.Stmt.SqlWhileStmt)">
            <summary>
            格式化While语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatDeallocateStmt(JieNor.Framework.SQL.Dom.Stmt.SqlDeallocateStmt)">
            <summary>
            格式化Deallocate语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatCloseStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCloseStmt)">
            <summary>
            格式话Close语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatSetLocalVariantStmt(JieNor.Framework.SQL.Dom.Stmt.SqlSetLocalVariantStmt)">
            <summary>
            格式化设置局部变量语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatOpenStmt(JieNor.Framework.SQL.Dom.Stmt.SqlOpenStmt)">
            <summary>
            格式化Open语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatCursorLoopStmt(JieNor.Framework.SQL.Dom.Stmt.SqlCursorLoopStmt)">
            <summary>
            格式化游标循环语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatFetchStmt(JieNor.Framework.SQL.Dom.Stmt.SqlFetchStmt)">
            <summary>
            格式化Fetch语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatBreakStmt(JieNor.Framework.SQL.Dom.Stmt.SqlBreakStmt)">
            <summary>
            格式化Break语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatContinueStmt(JieNor.Framework.SQL.Dom.Stmt.SqlContinueStmt)">
            <summary>
            格式化Continue语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatGotoStmt(JieNor.Framework.SQL.Dom.Stmt.SqlGotoStmt)">
            <summary>
            格式化Goto语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatLabelStmt(JieNor.Framework.SQL.Dom.Stmt.SqlLabelStmt)">
            <summary>
            格式化标签语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatColumnDef(JieNor.Framework.SQL.Dom.SqlColumnDef)">
            <summary>
            格式化字段定义
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatShowTablesStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowTablesStmt)">
            <summary>
            格式化显示表列表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Formater.TSQLFormater.FormatShowColumnsStmt(JieNor.Framework.SQL.Dom.Stmt.SqlShowColumnsStmt)">
            <summary>
            格式化显示字段列表语句
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.KSQLConstant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.KEY_WORD">
            关键字标志
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.FUNCTION_NAME">
            函数名标志
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.NOT_KW_FN">
            非关键字或函数名
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIMIZE_MODE_DISABLED">
            优化模式: 不进行优化
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIMIZE_MODE_UNUSED">
            优化模式: 优化无用字段
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIMIZE_MODE_OUTER_JOIN">
            优化模式: 优化OUTER LEFT JOIN 子句
        </member>
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.KSqlUtil.OPTIMIZE_MODE_INNER_JOIN" -->
        <member name="F:JieNor.Framework.SQL.KSqlUtil.optimizeMode">
            @see #setOptimizeMode(int)
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.setOptimizeMode(System.Int32)">
            设置默认的优化方式,设置该值将影响整个应用的优化方式
            其取值范围如下:
            OPTIMIZE_MODE_DISABLED 	: 不进行优化
            OPTIMIZE_MODE_UNUSED 	: 优化无用字段
            OPTIMIZE_MODE_OUTER_JOIN : 优化OUTER LEFT JOIN
            OPTIMIZE_MODE_INNER_JOIN : 优化INNER JOIN. 该模式专为虚模式中第二次查询取数时调用,其它方法调用将产生逻辑错误!
            @param mode
            该方法存在不安全因素,当前已经被屏蔽.-- By Michael Pan
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getOptimizeMode">
            返回默认的优化方式
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.printResultSet(System.Data.IDataReader)">
            输出ResultSet
            
            @param rs
            @throws SQLException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.optimize(System.String,System.Int32)">
            <p>优化SQL语句.</p>
            <p>根据不同的优化模式,该方式可以做如下的优化</p>
            <p>1.把语句中冗余LeftJoin的右边的表去掉.</p>
            <p>2.把语句中冗余的INNER Join的表去掉.</p>
            <p>冗余是指该表不在SelectList, Where, OrderBy, GroupBy, Haveing中被使用.
            如果在上述的子句中存在不可优化的表达式(如*),则不会对语句进行优化</p>
            <p>警告: 1.此优化SQL的方法是针对O-R Mapping拼装SQL的过程中，产生了大量冗余的不必要的连接而进行优化的。 
            除了Query和O-RMapping使用外，其他人勿用。2.使用者也应该清楚该方法并不是针对所有情况都适用的，不恰当使用会产生副作用</p>
            
            @param sql
            @param optimizeMode 优化方式 @see #setOptimizeMode(int)
            @return 优化后的SQL语句
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.optimize(System.String)">
            使用默认方式优化SQL
            @see #optimize(Object, int)
            @param sql
            @return
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.optimize(System.Object)">
            使用默认方式优化SQL
            @see #optimize(Object, int)
            @param sqlObject
            @return
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.optimize(System.Object,System.Int32)">
            使用指定方式优化SQL
            @see #optimize(Object, int)
            @param sqlObject
            @param optimizeMode
            @return
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.singleOptimize(System.String,System.Int32)">
            优化SQL
            @param sql
            @param mode
            @return
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.adjust(JieNor.Framework.SQL.Dom.SqlSelect)">
            校正别名
            @param select
            @throws ParserException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.adjust(JieNor.Framework.SQL.Dom.SqlSelect,System.Int32)">
            校正别名
            @param select
            @param mode 模式
            @throws ParserException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.replace_for_join_condition(System.Collections.Hashtable,JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            替换join条件表达式的字段
            
            @param joinConditionExprCanReplaceMap
                       替换表
            @param expr
                       join条件表达式
            @return
            @throws ParserException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.computeJoinConditionCanReplaceExprMap(System.Collections.Hashtable,JieNor.Framework.SQL.Dom.SqlTableSourceBase,System.Int32)">
            计算JOIN条件中的可替换表达式
            
            @param joinConditionExprCanReplaceMap
            @param tabSrcBase
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.computeLeftJoinConditionCanReplaceExprMap(System.Collections.Hashtable,JieNor.Framework.SQL.Dom.SqlJoinedTableSource)">
            计算Left JOIN条件中的可替换表达式
            
            @param joinConditionExprCanReplaceMap
            @param joinTabSrc
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.computeInnerJoinConditionCanReplaceExprMap(System.Collections.Hashtable,JieNor.Framework.SQL.Dom.SqlJoinedTableSource)">
            计算Inner JOIN条件中的可替换表达式
            
            @param joinConditionExprCanReplaceMap
            @param joinTabSrc
        </member>
        <!-- Badly formed XML comment ignored for member "M:JieNor.Framework.SQL.KSqlUtil.isSimpleJoinCondition(JieNor.Framework.SQL.Dom.Expr.SqlExpr)" -->
        <member name="M:JieNor.Framework.SQL.KSqlUtil.isPropExpr(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            判断SqlExpr是否为类似“表名.列名”的形式
            
            @param expr
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getProperOwnerString(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            获得表达式“表名.字段”中的表名
            
            @param expr
                       表达式
            @return 表名
        </member>
        <!-- Badly formed XML comment ignored for member "M:JieNor.Framework.SQL.KSqlUtil.adjust_replace(System.Collections.Hashtable,JieNor.Framework.SQL.Dom.Expr.SqlExpr)" -->
        <member name="M:JieNor.Framework.SQL.KSqlUtil.optimize(JieNor.Framework.SQL.Dom.SqlSelect)">
            以默认的方式优化SQLSelect
            @param select
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.optimize_selectbase(JieNor.Framework.SQL.Dom.SqlSelectBase,System.Int32)">
            
            @param selectBase
            @param mode 优化方式
            @throws ParserException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.computeUsedTableAlias(System.Collections.Hashtable,JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            @return 返回值表示是否包含不可优化的表达式，例如*，没有标识表名的字段，
                    如果返回值为false，在表达式中查找的usedTableAlias可能不完全计算。
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.computeJoinConditionUsedAlias(System.Collections.Hashtable,JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            计算JoinCondition中已经使用到的表别名列表
            
            @param usedAliasMap
                       别名列表
            @param tableSource
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.cleanTableSource(System.Collections.Hashtable,System.Collections.Hashtable,JieNor.Framework.SQL.Dom.SqlTableSourceBase,System.Int32)">
            将多余的连接删除
            
            @param usedTableAliasSet
                       已经使用过的表别名
            @param joinConditionUsedAliasMap
                       已经使用到的表别名列表
            @param tableSource
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.cleanUp(System.Data.IDbConnection,System.Data.IDbCommand)">
            关闭数据库连接及Statement 对象
            @param conn
            @param stmt
            @throws SQLException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.cleanUp(System.Data.IDbConnection,System.Data.IDbCommand,System.Data.IDataReader)">
            关闭数据库连接,Statement对象及ResultSet
            @param conn
            @param stmt
            @param rs
            @throws SQLException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.cleanUp(System.Data.IDbCommand,System.Data.IDataReader)">
            关闭Stemtent及ResultSet 对象
            @param stmt
            @param rs
            @throws SQLException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getOracleCurrentUser(System.Data.IDbConnection)">
            获取指定ORACLE数据库连接的当前用户
            @param conn
            @return
            @throws SQLException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.buildKSqlDateString(System.DateTime)">
            返回KSQL中日期表达式的标准格式
            @param date
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getSqlType(System.String)">
            根据函数名称返回函数在系统中对应的类型
            @param methodName
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getNameType(System.String)">
            返回关键字的类型, 是函数, 还是关键字, 还是其他
            @param name
            @return
            返回KSqlUtil.KEY_WORD                 (0)  为 函数名
            返回KSqlUtil.FUNCTION_NAME            (1)  为关键字
            返回KSqlUtil.NOT_KW_FN                (-1) 为其他
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.encodeUrl(System.String)">
            加密SQL URL
            @param url
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.decodeUrl(System.String)">
            解密KSQL URL
            @param url 加密后的SQL URL @see #encodeUrl(string)
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.encodePassword(System.String)">
            加密数据源密码，也可以用于加密数据源的用户名。
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.decodePassword(System.String)">
            解密数据源密码
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getURL(System.Data.IDbConnection)">
            获得当前连接的URl
            
            @param conn
            @return
            @throws SQLException
            @author R.X.
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getDbType(System.Data.IDbConnection)">
            获得当前连接的数据库类型
            
            @param conn
            @return
            @throws SQLException
            @author R.X.
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getDbTypeName(System.Data.IDbConnection)">
            获得当前连接的数据库类型名称
            
            @param conn
            @return
            @throws SQLException
            @author R.X.
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getConnectStackTrace(System.Data.IDbConnection)">
            获取当前连接的StackTrace
            
            @param conn
            @return
            @throws SQLException
            @author R.X.
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIONS_DBTYPE">
            选项(必须):指定数据库类型.
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIONS_TRANSLATE">
            选项(可选):是否进行翻译.可取值:true|false
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIONS_TRACE">
            选项(可选):是否跟踪.其格式为trace=off|on[:file=url][:filter=option]
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIONS_NOLOGGING">
            无日志选项键值(可选)
            <p>当打开该选项时,将会对临时表做减少日志的优化</p>
            <p>该选项当前仅对ORACLE数据库有效</p>
            <p><b>注意,在ORACLE数据库中打开该选项时,如果是insert语句,则该insert语句必须在单独的一个transaction中执行,
            	否则将报数据库错误!</b></p>
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIONS_BINDPORT">
            选项(可选):绑定端口号.用于进行监视
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIONS_OPTIMIZE">
            选项(可选):优化方式.其值是一个整型数
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIONS_TEMPTABLESPACE">
            选项(可选):指定临时表空间
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIONS_DBSCHEMA">
            数据库模式选项键值
            <p>在DB2类型的数据库中使用.Windows系统下,DB2的默认账户是DB2ADMIN,而在其它系统中却不一定是该用户.</p>
            <p>该选项允许应用系统通过数据库连接的URL来指定访问数据库所用的SCHEMA</p>
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlUtil.OPTIONS_TABLESCHEMA">
            数据库表模式
            该选项仅用于DB2 AS400数据库上,它决定检测表、字段、索引、外键的TABLE_SCHEMA空间
        </member>
        <!-- Badly formed XML comment ignored for member "M:JieNor.Framework.SQL.KSqlUtil.parseURL(System.String,System.Int32)" -->
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getOption(System.String,System.String)">
            从URL中解析选项值,请在解析之前将URL及option name转为统一大小写形式.即本方法不忽略大小写
            @param url
            @param name
            @return 如果不存在则返回null
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getBoolOption(System.String,System.String,System.Boolean)">
            从URL中解析一个布尔类型的选项值
            @param url
            @param name
            @param defValue 不存在该选项时的默认值
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.getIntOption(System.String,System.String,System.Int32)">
            从URL中解析一个整型的选项值
            @param url
            @param name
            @param defValue
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.GenerateTableSQL(System.Data.IDbConnection,System.Collections.ArrayList,JieNor.Framework.SQL.KSqlExportOption)">
            <summary>
            生成表的构造SQL
            </summary>
            <param name="conn">源数据库连接对象</param>
            <param name="tableName">表名，为空时获得所有用户表</param>
            <param name="expOpt">引出选项</param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlUtil.GetObjectCheckStmt(JieNor.Framework.SQL.KSqlCheckObjType,System.String,System.String)">
            <summary>
            获得数据库对象的检查Stmt
            </summary>
            <param name="objType">检查对象类型</param>
            <param name="objName">检查对象名称</param>
            <param name="tableName">所属表名</param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.AlterTableParser">
            <summary>
            表结构修改解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.AlterTableParser.parse_itemList(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            解析项目列表
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.AlterTableParser.parseAlterTokenItemList(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            解析变更标识项目列表
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.AlterTableParser.parseAddTokenItemList(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            解析添加标识项目列表
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.AlterTableParser.parseDropTokenItemList(JieNor.Framework.SQL.Dom.Stmt.SqlAlterTableStmt)">
            <summary>
            解析删除标识项目列表
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.KeyWord">
            <summary>
            关键字类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.DeclareParser">
            <summary>
            声明语句解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.DeclareParser.#ctor(System.String)">
            <summary>
            根据SQL语句创建解析器
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.DeclareParser.#ctor(JieNor.Framework.SQL.Parser.TokenList)">
            <summary>
            根据符号列表创建解析器
            </summary>
            <param name="tokenList"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.DeclareParser.parse">
            <summary>
            执行解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.DeclareParser.parseDeclVarExpr">
            <summary>
            解析变量声明表达式
            </summary>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.DeleteParser">
            <summary>
            Delete删除语句解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.DeleteParser.parse_delete">
            <summary>
            解析Delete语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.DeleteParser.from(JieNor.Framework.SQL.Dom.SqlDelete)">
            <summary>
            处理Delete语句的From子句
            </summary>
            <param name="delete"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.DeleteParser.where(JieNor.Framework.SQL.Dom.SqlDelete)">
            <summary>
            处理Delete语句的Where子句
            </summary>
            <param name="delete"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.HintsParser">
            <summary>
            Hints解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.HintsParser.parse(System.String)">
            从一个SQL片断中解析出Hints -Add By Michael Pan 2007/01/09
            @param hints hints 不能为空(null)
            @return 包含所有com.JieNor.Framework.sql.dom.KHints的列表
            @throws ParserException
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.InsertParser">
            <summary>
            insert语句解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.InsertParser.insert">
            <summary>
            解析Insert语句
            </summary>
            <returns>解析后的Insert语句</returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.InsertParser.columnList(System.Collections.IList)">
            <summary>
            解析字段列表
            </summary>
            <param name="exprCol"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.InsertParser.valueList(System.Collections.IList)">
            <summary>
            解析值列表
            </summary>
            <param name="exprCol"></param>
            <returns>是否成功</returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.IReader">
            <summary>
            读取器接口类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.IReader.next">
            <summary>
            读取下一字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.IReader.peek">
            <summary>
            获得当前字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.IReader.unget">
            <summary>
            位置指针回退一个字符
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.IReader.eos">
            <summary>
            是否结尾
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.IReader.skip">
            <summary>
            跳过一个字符
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.IReader.lookup(System.Int32)">
            <summary>
            获得当前位置偏移i字符位置的字符
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.Lexer">
            <summary>
            词汇解分析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.next">
            <summary>
            读取下一个
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.readIdent(System.Char)">
            <summary>
            读取标识符
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.readDigit(System.Char,System.Int32)">
            <summary>
            读取数字
            </summary>
            <param name="ch"></param>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.readChar">
            <summary>
            读取字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.readAlias_ex">
            <summary>
            读取别名
            扩展方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.readAlias">
            <summary>
            读取别名
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.readTableFunction">
            <summary>
            读取表函数
            扩展方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.readlineComment">
            <summary>
            读取整行语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.readOperator(System.Char)">
            <summary>
            读取运算符
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.readPunctuation(System.Char)">
            <summary>
            读取标点符号
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Lexer.isOperator(System.Char)">
            <summary>
            是否是运算符
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.select">
            <summary>
            解析Select语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.select(System.Boolean)">
            <summary>
            解析Select语句
            </summary>
            <param name="parseOrderBy"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.into(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析into子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.selectRest(JieNor.Framework.SQL.Dom.SqlSelectBase)">
            <summary>
            解析union合并查询
            </summary>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.hierarchicalQueryClause(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析分等级的查询子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.selectListOption(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析字段列表选项(distinct|all)
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.selectHint(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析查询提示
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.top(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析结果限制子句(top)
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.from(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析from子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.where(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析Where子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.groupBy(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析group by子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.withRollUp(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析with rollup 子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.having(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析having子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.orderBy(JieNor.Framework.SQL.Dom.SqlSelectBase)">
            <summary>
            解析order by 子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.selectList(System.Collections.IList)">
            <summary>
            解析字段列表
            </summary>
            <param name="selectItemCol"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.tableSource">
            <summary>
            解析表来源
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.tableSourceRest(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            解析表关联来源
            </summary>
            <param name="tablesource"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.checkOuterJoinCondition(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            检查外连接条件
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.OqlParser.As(System.String[])">
            <summary>
            解析As别名
            </summary>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.SelectParser">
            <summary>
            select语句解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.select">
            <summary>
            解析select语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.select(System.Boolean)">
            <summary>
            解析select语句
            </summary>
            <param name="parseOrderBy"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.into(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析into子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.selectRest(JieNor.Framework.SQL.Dom.SqlSelectBase)">
            <summary>
            解析union合并查询
            </summary>
            <param name="select"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.hierarchicalQueryClause(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析分等级的查询子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.selectHint(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析查询提示
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.top(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析top子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.from(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析from子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.where(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析where子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.groupBy(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析groupby子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.withRollUp(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析with rollup子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.having(JieNor.Framework.SQL.Dom.SqlSelect)">
            <summary>
            解析having子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.orderBy(JieNor.Framework.SQL.Dom.SqlSelectBase)">
            <summary>
            解析order by 子句
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.selectList(System.Collections.IList)">
            <summary>
            解析select字段列表
            </summary>
            <param name="selectItemCol"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.tableSource">
            <summary>
            解析表来源
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.tableSourceRest(JieNor.Framework.SQL.Dom.SqlTableSourceBase)">
            <summary>
            解析表关联来源
            </summary>
            <param name="tablesource"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.checkOuterJoinCondition(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            检查外关联条件
            </summary>
            <param name="expr"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SelectParser.As(System.String[])">
            <summary>
            解析As别名
            </summary>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.SqlBlockParser">
            <summary>
            SQL块解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlBlockParser.decl(System.Collections.IList)">
            <summary>
            解析声明
            </summary>
            <param name="descList"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlBlockParser.block">
            <summary>
            解析语句块
            </summary>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.SqlCreateTableParser">
            <summary>
            创建表解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlCreateTableParser.parse">
            <summary>
            解析
            </summary>
            <returns>创建表的描述语句</returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlCreateTableParser.parseTableSpace(JieNor.Framework.SQL.Dom.Stmt.SqlCreateTableStmt)">
            <summary>
            解析表空间
            </summary>
            <param name="stmt"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlCreateTableParser.tableConstraintList(System.Collections.IList)">
            <summary>
            解析表约束列表
            </summary>
            <param name="constraintList"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlCreateTableParser.tableConstraint">
            <summary>
            解析表约束
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlCreateTableParser.parseColumnDefList(System.Collections.IList)">
            <summary>
            解析字段定义列表
            </summary>
            <param name="columnList"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlCreateTableParser.parseColumnDef">
            <summary>
            解析字段定义
            </summary>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.SqlExprParser">
            <summary>
            SQL表达式解析类
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.SqlExprParser.inSubQueryKeyword">
            专锟斤拷锟斤拷锟絆QL锟接诧拷询锟斤拷锟叫达拷锟斤拷
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.expr">
            <summary>
            解析SQL表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.exprRest(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            解析SQL表达式
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.exprList(System.Collections.IList)">
            <summary>
            解析列表表达式
            </summary>
            <param name="exprCol"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.unary">
            <summary>
            解析一元表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.primary">
            <summary>
            解析
            主要解析逻辑
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.parseSql99DateExpr">
            <summary>
            解析日期表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.parseSql99TimeStampExpr">
            <summary>
            解析时间表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.parseDatetimeExpr">
            <summary>
            解析日期时间表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.OverExpr">
            <summary>
            解析Over
            </summary>
            <param name="select"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.inRest(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            in列表解析
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.multiplicativeRest(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            解析多匹配
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.or">
            <summary>
            解析Or连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.orRest(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            解析Or连接
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.relational">
            <summary>
            解析表达式关系
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.relationalRest(JieNor.Framework.SQL.Dom.Expr.SqlExpr)">
            <summary>
            解析关系关键字
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.getInSubQueryKeyword">
            <summary>
            获取in子查询关键字
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlExprParser.setInSubQueryKeyword(JieNor.Framework.SQL.Parser.KeyWord)">
            <summary>
            设置in子查询关键字
            </summary>
            <param name="inSubQueryKeyword"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.SqlParser">
            <summary>
            SQL解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlParser.parseStmtList">
            <summary>
            解析语句列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlParser.isThrowExWhenNameTooLong">
            <summary>
            返回 名称超长时是否抛出异常
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlParser.setThrowExWhenNameTooLong(System.Boolean)">
            <summary>
            设置 名称超长时是否抛出异常
            </summary>
            <param name="throwExWhenNameTooLong"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.SqlParserBase">
            <summary>
            SQL解析器基类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.SqlStmtParser">
            <summary>
            SQL语句解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.stmtList(System.Collections.IList,JieNor.Framework.SQL.Parser.Token)">
            <summary>
            解析到指定标识符的语句列表
            </summary>
            <param name="stmtCol"></param>
            <param name="tok"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.stmt">
            <summary>
            解析语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.drop">
            <summary>
            解析Drop语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.ksql_cursor_loop">
            <summary>
            解析游标循环
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.ksql_fetch">
            <summary>
            解析Fetch
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.select">
            <summary>
            解析Select语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.update">
            <summary>
            解析Update语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseIf">
            <summary>
            解析If语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseSet">
            <summary>
            解析Set语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseWhile">
            <summary>
            解析While语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseCreate">
            <summary>
            解析Create语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseCreateClusteredIndex">
            <summary>
            解析创建聚集索引的语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseCreateClusteredIndex(System.String)">
            <summary>
            解析创建聚集索引的语句
            </summary>
            <param name="createWord"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseCreateIndex">
            <summary>
            解析创建索引的语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseCreateIndex(System.String)">
            <summary>
            解析创建索引的语句
            </summary>
            <param name="createWord"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseCreateUniqueIndex">
            <summary>
            解析创建唯一索引的语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseCreateUniqueIndex(System.String)">
            <summary>
            解析创建唯一索引的语句
            </summary>
            <param name="createWord"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.SqlStmtParser.parseOrderByMode(JieNor.Framework.SQL.Parser.SqlExprParser)">
            <summary>
            解析排序规则
            </summary>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.StringReader">
            <summary>
            字符串读取器类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.StringReader.next">
            <summary>
            读取字符并向前移动指针
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.StringReader.skip">
            <summary>
            向前忽略一个字符
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.StringReader.peek">
            <summary>
            返回当前位置的字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.StringReader.unget">
            <summary>
            指针向后回退一个字符
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.StringReader.eos">
            <summary>
            是否已到结尾
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.StringReader.lookup(System.Int32)">
            <summary>
            获得当前位置向前偏移指定量位置上的字符
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.StringReader.ptr">
            <summary>
            获得当前指针的位置
            </summary>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.Token">
            <summary>
            标识符类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Token.GetOrgValue">
            获取原值
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.Token.SetOrgValue(System.String)">
            设置原值
            @param orgValue
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.EqualToken">
            =
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.NotEqualToken">
            !=
        </member>
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.Parser.Token.LessThanToken" -->
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.Parser.Token.LessThanOrEqualToken" -->
        <member name="F:JieNor.Framework.SQL.Parser.Token.GreaterThanToken">
            >
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.GreaterThanOrEqualToken">
            >=
        </member>
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.Parser.Token.NotLessThanToken" -->
        <member name="F:JieNor.Framework.SQL.Parser.Token.NotGreaterThanToken">
            !>
        </member>
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.Parser.Token.LessThanOrGreaterThanToken" -->
        <member name="F:JieNor.Framework.SQL.Parser.Token.PlusToken">
            +
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.MinusToken">
            -
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.MulToken">
            *
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DivToken">
            /
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ModToken">
            %
        </member>
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.Parser.Token.BitwiseAndToken" -->
        <member name="F:JieNor.Framework.SQL.Parser.Token.BitwiseOrToken">
            |
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ConcatOpToken">
            ||
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OpenCurlyBraceToken">
            {
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CloseCurlyBraceToken">
            }
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OpenBraceToken">
            (
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CloseBraceToken">
            )
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OpenSquareBraceToken">
            [
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CloseSquareBraceToken">
            ]
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PeriodToken">
            .
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CommaToken">
            ,
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ColonToken">
            :
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.SemicolonToken">
            ;
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.EOFToken">
            
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.AddToken">
            ADD
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.AllToken">
            ALL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.AlterToken">
            ALTER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.AndToken">
            AND
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.AnyToken">
            ANY
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.AsToken">
            AS
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.AscToken">
            ASC
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.AuthorizationToken">
            AUTHORIZATION
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.BackupToken">
            BACKUP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.BeginToken">
            BEGIN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.BetweenToken">
            BETWEEN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.BreakToken">
            BREAK
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.BrowseToken">
            BROWSE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.BulkToken">
            BULK
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ByToken">
            BY
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CascadeToken">
            CASCADE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CallToken">
            CALL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CaseToken">
            CASE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CheckToken">
            CHECK
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CheckpointToken">
            CHECKPOINT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CloseToken">
            CLOSE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ClusteredToken">
            CLUSTERED
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CoalesceToken">
            COALESCE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CollateToken">
            COLLATE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ColumnToken">
            COLUMN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CommitToken">
            COMMIT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ComputeToken">
            COMPUTE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ConnectToken">
            CONNECT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ConstraintToken">
            CONSTRAINT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ContainsToken">
            CONTAINS
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ContainstableToken">
            CONTAINSTABLE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ContinueToken">
            CONTINUE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ConvertToken">
            CONVERT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CreateToken">
            CREATE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CrossToken">
            CROSS
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CurrentToken">
            CURRENT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.Current_DateToken">
            CURRENT_DATE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.Current_TimeToken">
            CURRENT_TIME
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.Current_TimestampToken">
            CURRENT_TIMESTAMP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.Current_UserToken">
            CURRENT_USER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CursorToken">
            CURSOR
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DatabaseToken">
            DATABASE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DateToken">
            DATE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DBCCToken">
            DBCC
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DeallocateToken">
            DEALLOCATE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DeclareToken">
            DECLARE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DefaultToken">
            DEFAULT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DeleteToken">
            DELETE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DescToken">
            DESC
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DenyToken">
            DENY
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DiskToken">
            DISK
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DistinctToken">
            DISTINCT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DistributedToken">
            DISTRIBUTED
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DoubleToken">
            DOUBLE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DoToken">
            DO
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DropToken">
            DROP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DummyToken">
            DUMMY
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.DumpToken">
            DUMP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ElseToken">
            ELSE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.EndToken">
            END
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ErrLvlToken">
            ERRLVL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.EscapeToken">
            ESCAPE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ExceptToken">
            EXCEPT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ExecToken">
            EXEC
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ExecuteToken">
            EXECUTE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ExistsToken">
            EXISTS
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ExitToken">
            EXIT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.FalseToken">
            FALSE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.FetchToken">
            FETCH
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.FileToken">
            FILE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.FillFactorToken">
            FILLFACTOR
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ForToken">
            FOR
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ForeignToken">
            FOREIGN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.FreeTextToken">
            FREETEXT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.FreeTextTableToken">
            FREETEXTTABLE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.FromToken">
            FROM
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.FullToken">
            FULL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.FunctionToken">
            FUNCTION
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.GotoToken">
            GOTO
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.LabelToken">
            LABEL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.GrantToken">
            GRANT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.GroupToken">
            GROUP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.HavingToken">
            HAVING
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.HoldLockToken">
            HOLDLOCK
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ReadPastToken">
            READPAST
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.IdentityToken">
            IDENTITY
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.Identity_InsertToken">
            IDENTITY_INSERT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.IdentityColToken">
            IDENTITYCOL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.IfToken">
            IF
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.InToken">
            IN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.SelectIntoToken">
            INTO
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.IndexToken">
            INDEX
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.InnerToken">
            INNER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.InsertToken">
            INSERT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.IntersectToken">
            INTERSECT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.IsToken">
            IS
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.JoinToken">
            JOIN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KeyToken">
            KEY
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KillToken">
            KILL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSqlBlockToken">
            KSQL_BLOCK
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSqlFetchToken">
            KSQL_FETCH
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSqlCursorLoopToken">
            KSQL_CURSOR_LOOP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.CursorLoopToken">
            CURSOR_LOOP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.LeftToken">
            LEFT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.LikeToken">
            LIKE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.LineNoToken">
            LINENO
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.LoopToken">
            LOOP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.LoadToken">
            LOAD
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.NationalToken">
            NATIONAL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.NoCheckToken">
            NOCHECK
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.NonClusteredToken">
            NONCLUSTERED
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.NotToken">
            NOT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.NullToken">
            NULL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.EmptyToken">
            EMPTY
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.NullIfToken">
            NULLIF
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OfToken">
            OF
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OffToken">
            OFF
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OffSetsToken">
            OFFSETS
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OnToken">
            ON
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OpenToken">
            OPEN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OpenDataSourceToken">
            OPENDATASOURCE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OpenQueryToken">
            OPENQUERY
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OpenRowSetToken">
            OPENROWSET
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OpenXmlToken">
            OPENXML
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OptionToken">
            OPTION
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OrToken">
            OR
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OrderToken">
            ORDER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OuterToken">
            OUTER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.OverToken">
            OVER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PercentToken">
            PERCENT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PlanToken">
            PLAN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PrecisionToken">
            PRECISION
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PrimaryToken">
            PRIMARY
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PrintToken">
            PRINT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PriorToken">
            PRIOR
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ProcToken">
            PROC
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ProcedureToken">
            PROCEDURE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PublicToken">
            PUBLIC
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RaisErrorToken">
            RAISERROR
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ReadToken">
            READ
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ReadTextToken">
            READTEXT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ReConfigureToken">
            RECONFIGURE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ReferencesToken">
            REFERENCES
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ReplicationToken">
            REPLICATION
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RestoreToken">
            RESTORE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ReturnToken">
            RETURN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RevokeToken">
            REVOKE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RightToken">
            RIGHT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RollBackToken">
            ROLLBACK
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RowCountToken">
            ROWCOUNT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RowGuidColToken">
            ROWGUIDCOL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RuleToken">
            RULE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.SaveToken">
            SAVE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.SchemaToken">
            SCHEMA
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.SelectToken">
            SELECT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.Session_User">
            SESSION_USER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.SetToken">
            SET
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.SetUserToken">
            SETUSER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ShutdownToken">
            SHUTDOWN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.SomeToken">
            SOME
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.StartToken">
            START
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.StatisticsToken">
            STATISTICS
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.System_UserToken">
            SYSTEM_USER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TableToken">
            TABLE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TextsizeToken">
            TEXTSIZE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ThenToken">
            THEN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TimeToken">
            TIME
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TimeStampToken">
            TIMESTAMP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ToToken">
            TO
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TopToken">
            TOP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TranToken">
            TRAN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TransactionToken">
            TRANSACTION
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TriggerToken">
            TRIGGER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TrueToken">
            TRUE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TruncateToken">
            TRUNCATE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TsequalToken">
            TSEQUAL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.UnionToken">
            UNION
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.UniqueToken">
            UNIQUE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.UpdateToken">
            UPDATE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.IntoToken">
            INTO
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.UpdateTextToken">
            UPDATETEXT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.UseToken">
            USE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.UserToken">
            USER
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ValuesToken">
            VALUES
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.VaryingToken">
            VARYING
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.ViewToken">
            VIEW
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.WaitForToken">
            WAITFOR
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.WhenToken">
            WHEN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.WhereToken">
            WHERE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.WhileToken">
            WHILE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.WithToken">
            WITH
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.WriteTextToken">
            WRITETEXT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.New">
            NEW
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.USERTABLES">
            KSQL_USERTABLES
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.USERCOLUMNS">
            KSQL_USERCOLUMNS
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.TABLECOLUMNDEFAULTVALUE">
            KSQL_TABNAME
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_COL_NAME">
            KSQL_COL_NAME
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_COL_TABNAME">
            KSQL_COL_TABNAME
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_COL_NULLABLE">
            KSQL_COL_NULLABLE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_COL_DEFAULT">
            KSQL_COL_DEFAULT
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.SYSINDEXES">
            KSQL_INDEXES
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.INDNAME">
            KSQL_INDNAME
        </member>
        <!-- Badly formed XML comment ignored for member "F:JieNor.Framework.SQL.Parser.Token.INDCOLUMNS" -->
        <member name="F:JieNor.Framework.SQL.Parser.Token.SYSCONSTRAINTS">
            KSQL_CONSTRAINTS
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_CONS_NAME">
            KSQL_CONS_NAME
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_CONS_TABNAME">
            KSQL_CONS_TABNAME
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_CONS_TYPE">
            KSQL_CONS_TYPE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_CT_F">
            KSQL_CT_F
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_CT_P">
            KSQL_CT_P
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_CT_U">
            KSQL_CT_U
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.KSQL_CT_C">
            KSQL_CT_C
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PinYinToken">
            SCHINESE_PINYIN
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.StrokeToken">
            SCHINESE_STROKE
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RadicalToken">
            SCHINESE_RADICAL
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.RollUpToken">
            ROLLUP
        </member>
        <member name="F:JieNor.Framework.SQL.Parser.Token.PartitionToken">
            <summary>
            PARTITION
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.TokenList">
            <summary>
            标识符列表类
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.TokenType">
            <summary>
            标识符类型类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.TokenType.Typename(System.Int32)">
            <summary>
            获取指定标识符类型名称
            </summary>
            <param name="tokType"></param>
            <returns></returns>
        </member>
        <member name="T:JieNor.Framework.SQL.Parser.UpdateParser">
            <summary>
            update语句解析类
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.UpdateParser.update">
            <summary>
            解析update语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.UpdateParser.updateTableSource(JieNor.Framework.SQL.Dom.SqlUpdate)">
            <summary>
            解析update语句表来源
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.UpdateParser.updateList(JieNor.Framework.SQL.Dom.SqlUpdate)">
            <summary>
            解析update语句更新列表
            </summary>
            <param name="sqlUpdate"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.UpdateParser.from(JieNor.Framework.SQL.Dom.SqlUpdate)">
            <summary>
            解析from子句
            </summary>
            <param name="update"></param>
        </member>
        <member name="M:JieNor.Framework.SQL.Parser.UpdateParser.where(JieNor.Framework.SQL.Dom.SqlUpdate)">
            <summary>
            解析where子句
            </summary>
            <param name="update"></param>
        </member>
        <member name="T:JieNor.Framework.SQL.Schema.Datatype.DataTypeBase">
            <summary>
            DataTypeBase
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Schema.Datatype.IntDataType">
            <summary>
            IntDataType
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Schema.FunctionDef">
            <summary>
            FunctionDef
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Schema.ParameterDef">
            <summary>
            ParameterDef
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Schema.SequenceInfo">
            <summary>
            Sequence
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Schema.SqlColumn">
            <summary>
            SqlColumn
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Schema.SqlSchemaObject">
            <summary>
            SchemaObject
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Schema.SqlTable">
            <summary>
            SqlTable
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Schema.Sql2kUtil.generateCreateTableSqlDom(System.Data.SqlClient.SqlConnection,System.Boolean)">
            
            @param conn
            @return
            @throws SQLException
        </member>
        <member name="T:JieNor.Framework.SQL.Shell.Driver">
            <summary>
            Driver
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Shell.DriverWrapper">
            一个对各种Driver的包装层。DataSource 与 ConnectionPoolDataSource
            均是通过此类得到数据库连接Connection。
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.IInterruptListener.checkInterrupt">
            检查当前工作线程是否需要抛出异常回滚
        </member>
        <member name="T:JieNor.Framework.SQL.Shell.KDConnection">
            封装java.sql.Connection，实现对KSQL Driver的支持， 创建数据库连接
        </member>
        <member name="F:JieNor.Framework.SQL.Shell.KDConnection.dbType">
            只支持 oracle or db2 or sqlserver三种类型
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.KDConnection.#ctor(System.Data.IDbConnection,System.Int32,JieNor.Framework.SQL.Shell.Trace.TraceInfo)">
            创建数据库连接
            
            @param cn
                       java.sql.Connection
            @param dbType
                       "oracle" ,"db2" or "sqlserver"
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.KDConnection.getDbType">
            返回当前数据库类型，该方法将在Statement类中被调用.
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.KDConnection.clearWarnings">
            返回TraceInfo
            
            @return
        </member>
        <!-- Badly formed XML comment ignored for member "T:JieNor.Framework.SQL.Shell.KDConnectionPoolDataSource" -->
        <member name="T:JieNor.Framework.SQL.Shell.KDPreparedStatement">
            封装java.sql.PrepareStatement，实现对KSQL Driver的支持，
            各个方法对应功能同java.sql.PrepareStatement
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.KDPreparedStatement.checkNeedSet(System.Int32)">
            检查参数的索引号是否合法并且允许设置值.
            @param index
            @return
        </member>
        <member name="T:JieNor.Framework.SQL.Shell.KDResultSet">
            封装java.sql.ResultSet，实现对KSQL Driver的支持， 各个方法对应功能同java.sql.ResultSet
        </member>
        <member name="T:JieNor.Framework.SQL.Shell.Trace.ConnectionLogger">
            @author szujobs
            
            TODO 要更改此生成的类型注释的模板，请转至 窗口 － 首选项 － Java － 代码样式 － 代码模板
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.Trace.KSqlMonitor.getActivateConnectionInfoReport(System.Text.StringBuilder)">
            获取未关闭连接信息的报表
        </member>
        <member name="T:JieNor.Framework.SQL.Shell.Trace.Queue">
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.Trace.Queue.put(System.Object)">
            Put object in queue. Notify data consumers.
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.Trace.Queue.get(System.Int64)">
            Wait at most timeout miliseconds until queue becomes not empty and take
            object from the queue
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.Trace.Queue.get">
            Wait until queue is not empty and take object from the queue.
        </member>
        <member name="M:JieNor.Framework.SQL.Shell.Trace.Queue.isEmpty">
            check if queue is empty
        </member>
        <!-- Badly formed XML comment ignored for member "T:JieNor.Framework.SQL.Shell.Trace.TraceInfo" -->
        <member name="F:JieNor.Framework.SQL.Shell.Trace.TraceInfo.userName">
            TODO 这里不够安全，以后需要想办法改进
        </member>
        <member name="F:JieNor.Framework.SQL.Shell.Trace.TraceInfo.password">
            TODO 这里不够安全，以后需要想办法改进
        </member>
        <member name="T:JieNor.Framework.SQL.SqlStyle">
            <summary>
            SqlStyle
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.AS400DBReservedWord">
            <summary>
            AS400DBReservedWord
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.IReservedWord">
            <summary>
            IReservedWord
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.ReservedWord">
            <summary>
            ReservedWord
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Util.ReservedWord.isReservedWord(System.String,System.String[],System.Int32)">
            通过二分法查找保留字
            
            @param reservedWords 保留字数组（子类实现）
            @param word （被查找的关键字）
            @return SqlStandard value
        </member>
        <member name="T:JieNor.Framework.SQL.Util.ReservedWordInfo">
            <summary>
            ReservedWordInfo
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Util.ReservedWordInfo.getStandard">
            @return Returns the agreement.
        </member>
        <member name="M:JieNor.Framework.SQL.Util.ReservedWordInfo.getReservedWord">
            @return Returns the reservedWord.
        </member>
        <member name="T:JieNor.Framework.SQL.Util.FormatUtil">
             <summary>  
            KSQL格式化工具类, 辅助翻译和解析
               * 该工具类仍未稳定,请不要使用.
               * @author michael_pan
               *  
             </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Util.FormatUtil.getBracketNumber(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Collections.Hashtable,System.Collections.Hashtable,System.Boolean)">
            获取输出某二元表达式时必须带有的括号(左或右)
            仅处理操作类型为 BinaryOpType.BooleanAnd 和 BinaryOpType.BooleanOr的二元表达式
               求左括号 ownTreeMap ::= (expr.left -> expr); otherTreeMap ::= (expr.right -> expr); isLeft = true;
               求右括号 ownTreeMap ::= (expr.right -> expr); otherTreeMap ::= (expr.left -> expr); isLeft = false;
            @param expr 二元表达式
            @param ownTreeMap 二元表达式所处树的相同子树父子关系映射, value值是key的父结点.
            @param otherTreeMap 二元表达式所处树的另一个子树上的父子关系映射, value值是key的父结点.
            @param isLeft 是否求值左括号(true), false表示求所需的右括号数目
            @return 所需括号(左或右)数目
            @see com.JieNor.Framework.sql.dom.expr.BinaryOpType.BooleanAnd
            @see com.JieNor.Framework.sql.dom.expr.BinaryOpType.BooleanOr
        </member>
        <member name="M:JieNor.Framework.SQL.Util.FormatUtil.processBinaryOpExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,JieNor.Framework.SQL.Util.SqlBinaryOpExprProcessor,System.Collections.Hashtable)">
            特殊处理BinaryOpExpr中的BinaryOpType.BooleanOr 和BinaryOpType.BooleanAnd 操作表达式
            中序处理OR 和 AND构成的二叉树.避免方法递归导致栈溢出错误.
            @param expr
            @return 是否成功处理,如果expr不为BooleanOr或BooleanAnd返回false;
            @throws Exception
        </member>
        <member name="M:JieNor.Framework.SQL.Util.FormatUtil.formatAndOrExpr(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr)">
            <summary>
            
            </summary>
            <param name="expr"></param>
            <returns></returns>
            throws Exception
        </member>
        <member name="T:JieNor.Framework.SQL.Util.KSQLReservedWord">
            <summary>
            KSQLReservedWord
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.OQLReservedWord">
            <summary>
            OQLReservedWord
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.OracleReservedWord">
            <summary>
            OracleReservedWord
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.ReservedWordException">
            <summary>
            ReservedWordException
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Util.ReservedWordUtil.logger">
            Logger for this class
        </member>
        <member name="T:JieNor.Framework.SQL.Util.Rijndael_Algorithm">
            <summary>
            
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.Rijndael_Properties">
            <summary>
            Rijndael_Properties
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.Rijndael_Util">
            这个类用于方便对数据使用AES算法对数据进行加密。AES算法只能一块一块对数据进行加密。
            
            @author szuJobs
            
        </member>
        <member name="M:JieNor.Framework.SQL.Util.Rijndael_Util.getInt(System.Byte[],System.Int32)">
            将4个byte组装成一个整数
            
            @param bytes
            @param offSet
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Util.Rijndael_Util.putInt(System.Int32,System.Byte[],System.Int32)">
            将一个整数拆为4个byte
            
            @param val
            @param bytes
            @param offSet
        </member>
        <member name="T:JieNor.Framework.SQL.Util.Sql2003ReservedWord">
            <summary>
            Sql2003ReservedWord
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.Sql92ReservedWord">
            <summary>
            Sql92ReservedWord
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.Sql99ReservedWord">
            <summary>
            Sql99ReservedWord
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.SqlBinaryOpExprProcessor">
            <summary>
            SqlBinaryOpExprProcessor
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Util.SqlBinaryOpExprProcessor.process(JieNor.Framework.SQL.Dom.Expr.SqlBinaryOpExpr,System.Int32,System.Int32,System.Collections.Hashtable)">
            仅处理expr的不为 BinaryOpType.BooleanAnd 与  BinaryOpType.BooleanOr 的左右子树
            @param expr
            @param leftBracket
            @param rightBracket
        </member>
        <member name="T:JieNor.Framework.SQL.Util.SqlExprUtil">
            <summary>
            SqlExprUtil
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.SqlStandard">
            <summary>
            SqlStandard
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.StringUtil">
            常用的字符串操作函数。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.split(System.String,System.Int32)">
            分割字符串。
            @param line      字符串
            @param seperator 分隔符
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.split(System.String,System.String)">
            分割字符串。
            @param line      字符串
            @param seperator 分隔字符串
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.fixNumber(System.Int64)">
            返回字符串，以固定长度格式表示长整数，这里的长度为8。
            @see StringUtils#fixNumber(long,int)
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.fixNumber(System.Int64,System.Int32)">
            返回字符串，以固定长度格式表示长整数。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.fixNumber(System.Int32)">
            返回字符串，以固定长度格式表示整数，这里的长度为4。
            @see StringUtils#fixNumber(int,int)
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.fixNumber(System.Int32,System.Int32)">
            返回字符串，以固定长度格式表示整数。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.isEmpty(System.String)">
            判断字符串是否为 null 或为空字符串。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.equals(System.String,System.String)">
            判断两字符串是否严格相等（包括字符串为 null 为空字符串的情况）。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.equalsIgnoreCase(System.String,System.String)">
            判断两字符串是否相等（不区分大小写），包括字符串为 null 为空字符串的情况。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.enumeration2StringArray(System.Collections.IEnumerator,System.Int32)">
            将 string 枚举转换成 string 数组
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.chars2bytes(System.Char[])">
            将 char（双字节）数组转换成 byte 数组
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.bytes2chars(System.Byte[])">
            将 byte 数组转换成 char（双字节）数组
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.padStringWidth(System.String,System.Int32)">
            在字符串后添加空格使之长度为指定长度
            @param int 指定长度
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.padStringWidth(System.Int32,System.Int32)">
            @see padStringWidth(string, int)
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.padStringWidth(System.Single,System.Int32)">
            @see padStringWidth(string, int)
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.padStringWidth(System.Int64,System.Int32)">
            @see padStringWidth(string, int)
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.padStringWidth(System.Double,System.Int32)">
            @see padStringWidth(string, int)
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.toHexString(System.Int64,System.Int32)">
            将指定 long 值转化为16进制字符串格式
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.GBToUnicode(System.String)">
            转化 GB2312 编码的字符串至 Unicode 编码
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.unicodeToGB(System.String)">
            转化 Unicode 编码的字符串至 GB2312 编码
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.cnulls(System.Object)">
            如果 obj 为 null，返回空字符串；否则返回 obj.toString()。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.cnulls(System.Object,System.String)">
            如果 obj 为 null，返回 defaultValue；否则返回 obj.toString()。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.cnulls(System.String,System.String)">
            如果 str 为 null，返回defaultValue；否则返回 str。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.cnulls(System.String)">
            如果 str 为 null，返回空字符串；否则返回 str。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.formatCurrency(System.Double)">
            格式化 cy 为 “￥123,456.00”格式。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.formatNumber(System.Double,System.Int32)">
            格式化double值为“123,456.00”。
            @param int - 指定格式化的小数位数。
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.replace(System.String,System.String,System.String)">
            @param str
            @param oldChars
            @param newChars
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.byteArrayToString(System.Byte[])">
            Returns a string of hexadecimal digits from a byte array. Each
            byte is converted to 2 hex symbols.
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.fromDigit(System.Char)">
            Returns the number from 0 to 15 corresponding to the hex digit <i>ch</i>.
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.escapeXMLstr(System.String)">
            将输入string转换为不含XML特殊标记的string
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.escapeHTMLstr(System.String)">
            将输入string转换为不含HTML特殊标记的string
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.isJavaIdentifier(System.String)">
             是否合法的Java标识符
             @param s
             @return
            需要调整为是否合法的net标识符
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.isJavaClassName(System.String)">
            是否合法的Java Class Name 
            @param name
            @return
            需要调整为net类名 
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.isKsqlIdentifierPart(System.String)">
            是否合法的KSQL标识符的一部分
            @param s
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.isKsqlIdentifier(System.String)">
            是否合法的KSQL标识符
            @param s
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.isFileName(System.String)">
            是否合法的文件名称
            @param s
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.arrayToString(System.Object[],System.String)">
            数组转换为字符串
            @param objArray 数组
            @param operator 分隔符
            @return 字符串
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.stringArrayAppend(System.String[],System.String)">
            字符串数组添加
            @param array 原数组
            @param appendObj 附加对象
            @return 附加后的数组
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.trim(System.String)">
            Trim
            @param str
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.addBracket(System.String)">
            给指定的字符串两边加上括号
            @param str
            @return
            string
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.abbreviate(System.String,System.Int32)">
            得出缩写词。
            
            @param txt 使用首字母大写来分隔的英文单词词组，形如：ExpenseReqBill
            @param len 预期的缩写词长度
            @author pl
        </member>
        <member name="F:JieNor.Framework.SQL.Util.StringUtil.VOWELS">
            Five values in the English language 
        </member>
        <member name="F:JieNor.Framework.SQL.Util.StringUtil.FRONTV">
            Variable used in Metaphone algorithm
        </member>
        <member name="F:JieNor.Framework.SQL.Util.StringUtil.VARSON">
            Variable used in Metaphone algorithm
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.metaphone(System.String,System.Int32)">
             得出metaphone码。使用变形metaphone算法。
             
             Limitations: Input format is expected to be a single ASCII word
             with only characters in the A - Z, a - z range, no punctuation or numbers.
            
             @param txt string to find the metaphone code for
             @return A metaphone code corresponding to the string supplied
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.fastSplit(System.String,System.Int32)">
            快速分割字符串
            added by ivan_zhang  
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.calcSeperatorTimes(System.String,System.Int32,System.Int32[])">
            获取分隔符总数及位置
            @param src
            @param seperator
            @param pos
            @return
        </member>
        <member name="M:JieNor.Framework.SQL.Util.StringUtil.calcSeperatorTimes(System.String,System.String,System.Int32[])">
            获取分隔符总数及位置
            @param src
            @param seperator
            @param pos
            @return
        </member>
        <member name="T:JieNor.Framework.SQL.Util.UDBReservedWord">
            <summary>
            UDBReservedWord
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.Util.UUTN.GLOBAL_TEMPORARY_TABLE_PREFIX">
            全局临时表表名前缀
        </member>
        <member name="F:JieNor.Framework.SQL.Util.UUTN.LOCAL_TEMPORARY_TABLE_PREFIX">
            临时表表名前缀
        </member>
        <member name="M:JieNor.Framework.SQL.Util.UUTN.isTempTable(System.String)">
            判断一个表名是否为临时表(非全局临时表)
            By Michael Pan
            @return
        </member>
        <member name="T:JieNor.Framework.SQL.Util.UUTNException">
            <summary>
            
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.UUTNSource">
            <summary>
            UUTNSource
            </summary>
        </member>
        <member name="M:JieNor.Framework.SQL.Util.UUTNSource.getLocleAddress">
            获取本地IP 地址。通过遍历NetworkInterface，获取本机的ip地址.
            如果没有可用的IP地址，默认返回loopbackAddress(127.0.0.1)
            public static InetAddress getLocleAddress()throws SocketException
        </member>
        <member name="T:JieNor.Framework.SQL.Util.XUtil">
            <summary>
            XUtil
            </summary>
        </member>
        <member name="T:JieNor.Framework.SQL.Util.ZipUtil">
            <summary>
            ZipUtil
            </summary>
        </member>
        <member name="F:JieNor.Framework.SQL.KSqlTools.logger">
            优化指定的SqlSelectBase对象
            @param optimizeMode
            @param selectBase
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.KSqlTools.inner_optimize_selectbase(JieNor.Framework.SQL.Dom.SqlSelectBase,System.Int32)">
            
            @param selectBase
            @param mode 优化方式
            @throws ParserException
        </member>
        <member name="T:JieNor.Framework.SQL.TransUtil">
            翻译工具类 把KSql翻译到目标数据库的SQL
            
            @author szuJobs
            @version 1.0
            @preserve all
        </member>
        <member name="F:JieNor.Framework.SQL.TransUtil.Dialect_Prefix">
            SQL方言前缀
        </member>
        <member name="M:JieNor.Framework.SQL.TransUtil.Translate(System.String,System.Collections.IList,System.Int32)">
            以默认的方式翻译KSQL成目标数据库SQL
            
            @param kSql
            @param stmtCol
            @param targetDbType
            @return
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.TransUtil.Translate(System.String,System.Int32,JieNor.Framework.SQL.Shell.Trace.TraceInfo)">
            此方法内做了临时表指定表空间处理，其余的没有此功能。 翻译选项将从参数traceInfo传入,建议该方法作为统一入口处理
            
            @param kSql
            @param targetDbType
            @param traceInfo
            @return
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.TransUtil.Translate(System.String,System.Int32,JieNor.Framework.SQL.Formater.FormatOptions)">
            使用指定的翻译选项来将KSQL语句翻译成目标数据库的SQL语句
            
            @param kSql
                       原始KSQL语句
            @param targetDbType
                       目标数据库类型
            @param options
                       翻译的选项
            @return 目标数据库的SQL语句
            @throws SqlTranslateException
                        当分析或解析过程中遇到语法错误时抛出该异常
        </member>
        <member name="M:JieNor.Framework.SQL.TransUtil.Translate(System.String,System.Int32)">
            使用默认的翻译选项,把KSql翻译到目标数据库的SQL
            
            @param kSql
            @param targetDbType
                       DbType类中定义了不同数据库类型的常量
            @return 返回目标SQL
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.TransUtil.getStmtList(System.String)">
            分析KSQL
            
            @param ksql
            @return
            @throws ParserException
        </member>
        <member name="M:JieNor.Framework.SQL.TransUtil.format(System.String,System.Collections.IList,System.Int32,JieNor.Framework.SQL.Formater.FormatOptions)">
            解析KSQL
            
            @param ksql
            @param stmtCol
            @param targetDbType
            @param options
            @return
            @throws SqlTranslateException
        </member>
        <member name="M:JieNor.Framework.SQL.TransUtil.logFormatError(System.Exception,System.String,System.Int32)">
            记录格解析时错误
            
            @param ex
            @param kSql
            @param targetDbType
        </member>
        <member name="M:JieNor.Framework.SQL.TransUtil.logParseError(System.Exception,System.String)">
            记录分析时错误
            
            @param ex
            @param kSql
        </member>
    </members>
</doc>
